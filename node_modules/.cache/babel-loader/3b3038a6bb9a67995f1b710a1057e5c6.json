{"ast":null,"code":"import { _ } from '@ag-grid-community/core';\nimport { getStyleId } from './styles/stylesheet';\n\nvar convertLegacyType = function (type) {\n  var t = type.charAt(0).toLowerCase();\n  return t === 's' ? 'inlineStr' : t;\n};\n\nvar cellFactory = {\n  getTemplate: function (config) {\n    var ref = config.ref,\n        data = config.data,\n        styleId = config.styleId;\n    var type = data.type,\n        value = data.value;\n    var convertedType = type;\n\n    if (type.charAt(0) === type.charAt(0).toUpperCase()) {\n      convertedType = convertLegacyType(type);\n    }\n\n    var obj = {\n      name: 'c',\n      properties: {\n        rawMap: {\n          r: ref,\n          t: convertedType === 'empty' ? undefined : convertedType,\n          s: styleId ? getStyleId(styleId) : undefined\n        }\n      }\n    };\n    var children;\n\n    if (convertedType === 'inlineStr') {\n      children = [{\n        name: 'is',\n        children: [{\n          name: 't',\n          textNode: _.escape(_.utf8_encode(value))\n        }]\n      }];\n    } else {\n      children = [{\n        name: 'v',\n        textNode: value\n      }];\n    }\n\n    return _.assign({}, obj, {\n      children: children\n    });\n  }\n};\nexport default cellFactory;","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/excel-export/dist/es6/excelExport/files/ooxml/cell.js"],"names":["_","getStyleId","convertLegacyType","type","t","charAt","toLowerCase","cellFactory","getTemplate","config","ref","data","styleId","value","convertedType","toUpperCase","obj","name","properties","rawMap","r","undefined","s","children","textNode","escape","utf8_encode","assign"],"mappings":"AAAA,SAASA,CAAT,QAAkB,yBAAlB;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AACA,IAAIC,iBAAiB,GAAG,UAAUC,IAAV,EAAgB;AACpC,MAAIC,CAAC,GAAGD,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAAR;AACA,SAAOF,CAAC,KAAK,GAAN,GAAY,WAAZ,GAA0BA,CAAjC;AACH,CAHD;;AAIA,IAAIG,WAAW,GAAG;AACdC,EAAAA,WAAW,EAAE,UAAUC,MAAV,EAAkB;AAC3B,QAAIC,GAAG,GAAGD,MAAM,CAACC,GAAjB;AAAA,QAAsBC,IAAI,GAAGF,MAAM,CAACE,IAApC;AAAA,QAA0CC,OAAO,GAAGH,MAAM,CAACG,OAA3D;AACA,QAAIT,IAAI,GAAGQ,IAAI,CAACR,IAAhB;AAAA,QAAsBU,KAAK,GAAGF,IAAI,CAACE,KAAnC;AACA,QAAIC,aAAa,GAAGX,IAApB;;AACA,QAAIA,IAAI,CAACE,MAAL,CAAY,CAAZ,MAAmBF,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeU,WAAf,EAAvB,EAAqD;AACjDD,MAAAA,aAAa,GAAGZ,iBAAiB,CAACC,IAAD,CAAjC;AACH;;AACD,QAAIa,GAAG,GAAG;AACNC,MAAAA,IAAI,EAAE,GADA;AAENC,MAAAA,UAAU,EAAE;AACRC,QAAAA,MAAM,EAAE;AACJC,UAAAA,CAAC,EAAEV,GADC;AAEJN,UAAAA,CAAC,EAAEU,aAAa,KAAK,OAAlB,GAA4BO,SAA5B,GAAwCP,aAFvC;AAGJQ,UAAAA,CAAC,EAAEV,OAAO,GAAGX,UAAU,CAACW,OAAD,CAAb,GAAyBS;AAH/B;AADA;AAFN,KAAV;AAUA,QAAIE,QAAJ;;AACA,QAAIT,aAAa,KAAK,WAAtB,EAAmC;AAC/BS,MAAAA,QAAQ,GAAG,CAAC;AACJN,QAAAA,IAAI,EAAE,IADF;AAEJM,QAAAA,QAAQ,EAAE,CAAC;AACHN,UAAAA,IAAI,EAAE,GADH;AAEHO,UAAAA,QAAQ,EAAExB,CAAC,CAACyB,MAAF,CAASzB,CAAC,CAAC0B,WAAF,CAAcb,KAAd,CAAT;AAFP,SAAD;AAFN,OAAD,CAAX;AAOH,KARD,MASK;AACDU,MAAAA,QAAQ,GAAG,CAAC;AACJN,QAAAA,IAAI,EAAE,GADF;AAEJO,QAAAA,QAAQ,EAAEX;AAFN,OAAD,CAAX;AAIH;;AACD,WAAOb,CAAC,CAAC2B,MAAF,CAAS,EAAT,EAAaX,GAAb,EAAkB;AAAEO,MAAAA,QAAQ,EAAEA;AAAZ,KAAlB,CAAP;AACH;AAnCa,CAAlB;AAqCA,eAAehB,WAAf","sourcesContent":["import { _ } from '@ag-grid-community/core';\nimport { getStyleId } from './styles/stylesheet';\nvar convertLegacyType = function (type) {\n    var t = type.charAt(0).toLowerCase();\n    return t === 's' ? 'inlineStr' : t;\n};\nvar cellFactory = {\n    getTemplate: function (config) {\n        var ref = config.ref, data = config.data, styleId = config.styleId;\n        var type = data.type, value = data.value;\n        var convertedType = type;\n        if (type.charAt(0) === type.charAt(0).toUpperCase()) {\n            convertedType = convertLegacyType(type);\n        }\n        var obj = {\n            name: 'c',\n            properties: {\n                rawMap: {\n                    r: ref,\n                    t: convertedType === 'empty' ? undefined : convertedType,\n                    s: styleId ? getStyleId(styleId) : undefined\n                }\n            }\n        };\n        var children;\n        if (convertedType === 'inlineStr') {\n            children = [{\n                    name: 'is',\n                    children: [{\n                            name: 't',\n                            textNode: _.escape(_.utf8_encode(value))\n                        }]\n                }];\n        }\n        else {\n            children = [{\n                    name: 'v',\n                    textNode: value\n                }];\n        }\n        return _.assign({}, obj, { children: children });\n    }\n};\nexport default cellFactory;\n"]},"metadata":{},"sourceType":"module"}