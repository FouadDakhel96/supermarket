{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"../context/context\";\nimport { HeaderWrapperComp } from \"../headerRendering/header/headerWrapperComp\";\nimport { _ } from \"../utils\";\nimport { BeanStub } from \"../context/beanStub\";\n\nvar AutoWidthCalculator =\n/** @class */\nfunction (_super) {\n  __extends(AutoWidthCalculator, _super);\n\n  function AutoWidthCalculator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AutoWidthCalculator.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  AutoWidthCalculator.prototype.registerHeaderRootComp = function (headerRootComp) {\n    this.headerRootComp = headerRootComp;\n  }; // this is the trick: we create a dummy container and clone all the cells\n  // into the dummy, then check the dummy's width. then destroy the dummy\n  // as we don't need it any more.\n  // drawback: only the cells visible on the screen are considered\n\n\n  AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column, skipHeader) {\n    var eHeaderCell = this.getHeaderCellForColumn(column); // cell isn't visible\n\n    if (!eHeaderCell) {\n      return -1;\n    }\n\n    var eDummyContainer = document.createElement('span'); // position fixed, so it isn't restricted to the boundaries of the parent\n\n    eDummyContainer.style.position = 'fixed'; // we put the dummy into the body container, so it will inherit all the\n    // css styles that the real cells are inheriting\n\n    var eBodyContainer = this.gridPanel.getCenterContainer();\n    eBodyContainer.appendChild(eDummyContainer); // get all the cells that are currently displayed (this only brings back\n    // rendered cells, rows not rendered due to row visualisation will not be here)\n\n    this.putRowCellsIntoDummyContainer(column, eDummyContainer);\n\n    if (!skipHeader) {\n      // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n      // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n      // as the groups can span columns and this class only considers one column at a time.\n      this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);\n    } // at this point, all the clones are lined up vertically with natural widths. the dummy\n    // container will have a width wide enough just to fit the largest.\n\n\n    var dummyContainerWidth = eDummyContainer.offsetWidth; // we are finished with the dummy container, so get rid of it\n\n    eBodyContainer.removeChild(eDummyContainer); // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n    // user can configure the grid to add a few more pixels after the calculated width\n\n    var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();\n    return dummyContainerWidth + autoSizePadding;\n  };\n\n  AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {\n    var comp = null; // find the rendered header cell\n\n    this.headerRootComp.forEachHeaderElement(function (headerElement) {\n      if (headerElement instanceof HeaderWrapperComp) {\n        var headerWrapperComp = headerElement;\n\n        if (headerWrapperComp.getColumn() === column) {\n          comp = headerWrapperComp;\n        }\n      }\n    });\n    return comp ? comp.getGui() : null;\n  };\n\n  AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {\n    var _this = this;\n\n    var eCells = this.rowRenderer.getAllCellsForColumn(column);\n    eCells.forEach(function (eCell) {\n      return _this.cloneItemIntoDummy(eCell, eDummyContainer);\n    });\n  };\n\n  AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {\n    // make a deep clone of the cell\n    var eCellClone = eCell.cloneNode(true); // the original has a fixed width, we remove this to allow the natural width based on content\n\n    eCellClone.style.width = ''; // the original has position = absolute, we need to remove this so it's positioned normally\n\n    eCellClone.style.position = 'static';\n    eCellClone.style.left = ''; // we put the cell into a containing div, as otherwise the cells would just line up\n    // on the same line, standard flow layout, by putting them into divs, they are laid\n    // out one per line\n\n    var eCloneParent = document.createElement('div');\n\n    if (_.containsClass(eCellClone, 'ag-header-cell')) {\n      _.addCssClass(eCloneParent, 'ag-header');\n\n      _.addCssClass(eCloneParent, 'ag-header-row');\n\n      eCloneParent.style.position = 'static';\n    } // table-row, so that each cell is on a row. i also tried display='block', but this\n    // didn't work in IE\n\n\n    eCloneParent.style.display = 'table-row'; // the twig on the branch, the branch on the tree, the tree in the hole,\n    // the hole in the bog, the bog in the clone, the clone in the parent,\n    // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n\n    eCloneParent.appendChild(eCellClone);\n    eDummyContainer.appendChild(eCloneParent);\n  };\n\n  __decorate([Autowired('rowRenderer')], AutoWidthCalculator.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], AutoWidthCalculator.prototype, \"gridOptionsWrapper\", void 0);\n\n  AutoWidthCalculator = __decorate([Bean('autoWidthCalculator')], AutoWidthCalculator);\n  return AutoWidthCalculator;\n}(BeanStub);\n\nexport { AutoWidthCalculator };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/rendering/autoWidthCalculator.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","HeaderWrapperComp","_","BeanStub","AutoWidthCalculator","_super","apply","registerGridComp","gridPanel","registerHeaderRootComp","headerRootComp","getPreferredWidthForColumn","column","skipHeader","eHeaderCell","getHeaderCellForColumn","eDummyContainer","document","createElement","style","position","eBodyContainer","getCenterContainer","appendChild","putRowCellsIntoDummyContainer","cloneItemIntoDummy","dummyContainerWidth","offsetWidth","removeChild","autoSizePadding","gridOptionsWrapper","getAutoSizePadding","comp","forEachHeaderElement","headerElement","headerWrapperComp","getColumn","getGui","_this","eCells","rowRenderer","getAllCellsForColumn","forEach","eCell","eCellClone","cloneNode","width","left","eCloneParent","containsClass","addCssClass","display"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../context/context\";\nimport { HeaderWrapperComp } from \"../headerRendering/header/headerWrapperComp\";\nimport { _ } from \"../utils\";\nimport { BeanStub } from \"../context/beanStub\";\nvar AutoWidthCalculator = /** @class */ (function (_super) {\n    __extends(AutoWidthCalculator, _super);\n    function AutoWidthCalculator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AutoWidthCalculator.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    AutoWidthCalculator.prototype.registerHeaderRootComp = function (headerRootComp) {\n        this.headerRootComp = headerRootComp;\n    };\n    // this is the trick: we create a dummy container and clone all the cells\n    // into the dummy, then check the dummy's width. then destroy the dummy\n    // as we don't need it any more.\n    // drawback: only the cells visible on the screen are considered\n    AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column, skipHeader) {\n        var eHeaderCell = this.getHeaderCellForColumn(column);\n        // cell isn't visible\n        if (!eHeaderCell) {\n            return -1;\n        }\n        var eDummyContainer = document.createElement('span');\n        // position fixed, so it isn't restricted to the boundaries of the parent\n        eDummyContainer.style.position = 'fixed';\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        var eBodyContainer = this.gridPanel.getCenterContainer();\n        eBodyContainer.appendChild(eDummyContainer);\n        // get all the cells that are currently displayed (this only brings back\n        // rendered cells, rows not rendered due to row visualisation will not be here)\n        this.putRowCellsIntoDummyContainer(column, eDummyContainer);\n        if (!skipHeader) {\n            // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n            // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n            // as the groups can span columns and this class only considers one column at a time.\n            this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);\n        }\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\n        // container will have a width wide enough just to fit the largest.\n        var dummyContainerWidth = eDummyContainer.offsetWidth;\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n        // user can configure the grid to add a few more pixels after the calculated width\n        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();\n        return dummyContainerWidth + autoSizePadding;\n    };\n    AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {\n        var comp = null;\n        // find the rendered header cell\n        this.headerRootComp.forEachHeaderElement(function (headerElement) {\n            if (headerElement instanceof HeaderWrapperComp) {\n                var headerWrapperComp = headerElement;\n                if (headerWrapperComp.getColumn() === column) {\n                    comp = headerWrapperComp;\n                }\n            }\n        });\n        return comp ? comp.getGui() : null;\n    };\n    AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {\n        var _this = this;\n        var eCells = this.rowRenderer.getAllCellsForColumn(column);\n        eCells.forEach(function (eCell) { return _this.cloneItemIntoDummy(eCell, eDummyContainer); });\n    };\n    AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {\n        // make a deep clone of the cell\n        var eCellClone = eCell.cloneNode(true);\n        // the original has a fixed width, we remove this to allow the natural width based on content\n        eCellClone.style.width = '';\n        // the original has position = absolute, we need to remove this so it's positioned normally\n        eCellClone.style.position = 'static';\n        eCellClone.style.left = '';\n        // we put the cell into a containing div, as otherwise the cells would just line up\n        // on the same line, standard flow layout, by putting them into divs, they are laid\n        // out one per line\n        var eCloneParent = document.createElement('div');\n        if (_.containsClass(eCellClone, 'ag-header-cell')) {\n            _.addCssClass(eCloneParent, 'ag-header');\n            _.addCssClass(eCloneParent, 'ag-header-row');\n            eCloneParent.style.position = 'static';\n        }\n        // table-row, so that each cell is on a row. i also tried display='block', but this\n        // didn't work in IE\n        eCloneParent.style.display = 'table-row';\n        // the twig on the branch, the branch on the tree, the tree in the hole,\n        // the hole in the bog, the bog in the clone, the clone in the parent,\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n        eCloneParent.appendChild(eCellClone);\n        eDummyContainer.appendChild(eCloneParent);\n    };\n    __decorate([\n        Autowired('rowRenderer')\n    ], AutoWidthCalculator.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], AutoWidthCalculator.prototype, \"gridOptionsWrapper\", void 0);\n    AutoWidthCalculator = __decorate([\n        Bean('autoWidthCalculator')\n    ], AutoWidthCalculator);\n    return AutoWidthCalculator;\n}(BeanStub));\nexport { AutoWidthCalculator };\n"]},"metadata":{},"sourceType":"module"}