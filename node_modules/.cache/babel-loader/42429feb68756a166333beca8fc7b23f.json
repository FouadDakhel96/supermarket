{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar _a, _b, _c, _d;\n\nimport { Padding } from \"../util/padding\";\nimport { CartesianChart } from \"./cartesianChart\";\nimport { NumberAxis } from \"./axis/numberAxis\";\nimport { CategoryAxis } from \"./axis/categoryAxis\";\nimport { LineSeries } from \"./series/cartesian/lineSeries\";\nimport { BarSeries } from \"./series/cartesian/barSeries\";\nimport { HistogramSeries } from \"./series/cartesian/histogramSeries\";\nimport { ScatterSeries } from \"./series/cartesian/scatterSeries\";\nimport { AreaSeries } from \"./series/cartesian/areaSeries\";\nimport { PolarChart } from \"./polarChart\";\nimport { PieSeries } from \"./series/polar/pieSeries\";\nimport { AxisLabel, AxisTick } from \"../axis\";\nimport { TimeAxis } from \"./axis/timeAxis\";\nimport { Caption } from \"../caption\";\nimport { DropShadow } from \"../scene/dropShadow\";\nimport { Legend, LegendPosition } from \"./legend\";\nimport { Navigator } from \"./navigator/navigator\";\nimport { NavigatorMask } from \"./navigator/navigatorMask\";\nimport { NavigatorHandle } from \"./navigator/navigatorHandle\";\nimport palette from \"./palettes\";\n/*\n    This file defines the specs for creating different kinds of charts, but\n    contains no code that uses the specs to actually create charts\n*/\n\nvar commonChartMappings = {\n  background: {\n    meta: {\n      defaults: {\n        visible: true,\n        fill: 'white'\n      }\n    }\n  },\n  padding: {\n    meta: {\n      constructor: Padding,\n      defaults: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }\n  },\n  title: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        enabled: true,\n        padding: new Padding(10),\n        text: 'Title',\n        fontStyle: undefined,\n        fontWeight: 'bold',\n        fontSize: 14,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgba(70, 70, 70, 1)'\n      }\n    }\n  },\n  subtitle: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        enabled: true,\n        padding: new Padding(10),\n        text: 'Subtitle',\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgba(140, 140, 140, 1)'\n      }\n    }\n  },\n  legend: {\n    meta: {\n      constructor: Legend,\n      defaults: {\n        enabled: true,\n        position: LegendPosition.Right,\n        spacing: 20,\n        layoutHorizontalSpacing: 16,\n        layoutVerticalSpacing: 8,\n        itemSpacing: 8,\n        markerShape: undefined,\n        markerSize: 15,\n        strokeWidth: 1,\n        color: 'black',\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif'\n      }\n    }\n  }\n};\nvar chartDefaults = {\n  container: undefined,\n  data: [],\n  padding: new Padding(20),\n  title: undefined,\n  subtitle: undefined\n};\nvar chartMeta = {\n  // Charts components' constructors normally don't take any parameters (which makes things consistent -- everything\n  // is configured the same way, via the properties, and makes the factory pattern work well) but the charts\n  // themselves are the exceptions.\n  // If a chart config has the (optional) `document` property, it will be passed to the constructor.\n  // There is no actual `document` property on the chart, it can only be supplied during instantiation.\n  constructorParams: ['document'],\n  setAsIs: ['container', 'data', 'tooltipOffset']\n};\nvar axisDefaults = {\n  defaults: {\n    visibleRange: [0, 1],\n    gridStyle: [{\n      stroke: 'rgba(219, 219, 219, 1)',\n      lineDash: [4, 2]\n    }]\n  }\n};\nvar seriesDefaults = {\n  visible: true,\n  showInLegend: true\n};\nvar columnSeriesDefaults = {\n  fills: palette.fills,\n  strokes: palette.strokes,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  xKey: '',\n  xName: '',\n  yKeys: [],\n  yNames: [],\n  grouped: false,\n  normalizedTo: undefined,\n  strokeWidth: 1,\n  shadow: undefined,\n  highlightStyle: {\n    fill: 'yellow'\n  }\n};\nvar shadowMapping = {\n  shadow: {\n    meta: {\n      constructor: DropShadow,\n      defaults: {\n        enabled: true,\n        color: 'rgba(0, 0, 0, 0.5)',\n        xOffset: 0,\n        yOffset: 0,\n        blur: 5\n      }\n    }\n  }\n};\nvar labelDefaults = {\n  enabled: true,\n  fontStyle: undefined,\n  fontWeight: undefined,\n  fontSize: 12,\n  fontFamily: 'Verdana, sans-serif',\n  color: 'rgba(70, 70, 70, 1)'\n};\nvar labelMapping = {\n  label: {\n    meta: {\n      defaults: __assign({}, labelDefaults)\n    }\n  }\n};\nvar axisMappings = {\n  line: {\n    meta: {\n      defaults: {\n        width: 1,\n        color: 'rgba(195, 195, 195, 1)'\n      }\n    }\n  },\n  title: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        enabled: true,\n        padding: new Padding(10),\n        text: 'Axis Title',\n        fontStyle: undefined,\n        fontWeight: 'bold',\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgba(70, 70, 70, 1)'\n      }\n    }\n  },\n  label: {\n    meta: {\n      constructor: AxisLabel,\n      defaults: {\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        padding: 5,\n        color: 'rgba(87, 87, 87, 1)',\n        formatter: undefined\n      }\n    }\n  },\n  tick: {\n    meta: {\n      constructor: AxisTick,\n      defaults: {\n        width: 1,\n        size: 6,\n        color: 'rgba(195, 195, 195, 1)',\n        count: 10\n      }\n    }\n  }\n};\nvar mappings = (_a = {}, _a[CartesianChart.type] = __assign(__assign({\n  meta: __assign(__assign({\n    constructor: CartesianChart\n  }, chartMeta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      axes: [{\n        type: CategoryAxis.type,\n        position: 'bottom'\n      }, {\n        type: NumberAxis.type,\n        position: 'left'\n      }]\n    })\n  })\n}, commonChartMappings), {\n  axes: (_b = {}, _b[NumberAxis.type] = __assign({\n    meta: __assign({\n      constructor: NumberAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b[CategoryAxis.type] = __assign({\n    meta: __assign({\n      constructor: CategoryAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b[TimeAxis.type] = __assign({\n    meta: __assign({\n      constructor: TimeAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b),\n  series: (_c = {}, _c[LineSeries.type] = {\n    meta: {\n      constructor: LineSeries,\n      defaults: {\n        title: undefined,\n        xKey: '',\n        xName: '',\n        yKey: '',\n        yName: '',\n        stroke: palette.fills[0],\n        strokeWidth: 2,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        highlightStyle: {\n          fill: 'yellow'\n        }\n      }\n    },\n    highlightStyle: {},\n    marker: {}\n  }, _c.column = __assign(__assign({\n    meta: {\n      constructor: BarSeries,\n      defaults: __assign(__assign({\n        flipXY: false\n      }, seriesDefaults), columnSeriesDefaults)\n    },\n    highlightStyle: {}\n  }, labelMapping), shadowMapping), _c.bar = __assign(__assign({\n    meta: {\n      constructor: BarSeries,\n      defaults: __assign(__assign({\n        flipXY: true\n      }, seriesDefaults), columnSeriesDefaults)\n    },\n    highlightStyle: {}\n  }, labelMapping), shadowMapping), _c[ScatterSeries.type] = {\n    meta: {\n      constructor: ScatterSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        xKey: '',\n        yKey: '',\n        sizeKey: undefined,\n        labelKey: undefined,\n        xName: '',\n        yName: '',\n        sizeName: 'Size',\n        labelName: 'Label',\n        fill: palette.fills[0],\n        stroke: palette.strokes[0],\n        strokeWidth: 2,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        tooltipRenderer: undefined,\n        highlightStyle: {\n          fill: 'yellow'\n        }\n      })\n    },\n    highlightStyle: {},\n    marker: {}\n  }, _c[AreaSeries.type] = __assign({\n    meta: {\n      constructor: AreaSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        xKey: '',\n        xName: '',\n        yKeys: [],\n        yNames: [],\n        normalizedTo: undefined,\n        fills: palette.fills,\n        strokes: palette.strokes,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        strokeWidth: 2,\n        shadow: undefined,\n        highlightStyle: {\n          fill: 'yellow'\n        }\n      })\n    },\n    highlightStyle: {},\n    marker: {}\n  }, shadowMapping), _c[HistogramSeries.type] = {\n    meta: {\n      constructor: HistogramSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        xKey: '',\n        yKey: '',\n        xName: '',\n        yName: '',\n        fill: palette.fills[0],\n        stroke: palette.strokes[0],\n        strokeWidth: 1,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        aggregation: 'sum',\n        tooltipRenderer: undefined,\n        highlightStyle: {\n          fill: 'yellow'\n        }\n      })\n    },\n    highlightStyle: {}\n  }, _c),\n  navigator: {\n    meta: {\n      constructor: Navigator,\n      defaults: {\n        enabled: false,\n        height: 30,\n        min: 0,\n        max: 1\n      }\n    },\n    mask: {\n      meta: {\n        constructor: NavigatorMask,\n        defaults: {\n          fill: '#999999',\n          stroke: '#999999',\n          strokeWidth: 1,\n          fillOpacity: 0.2\n        }\n      }\n    },\n    minHandle: {\n      meta: {\n        constructor: NavigatorHandle,\n        defaults: {\n          fill: '#f2f2f2',\n          stroke: '#999999',\n          strokeWidth: 1,\n          width: 8,\n          height: 16,\n          gripLineGap: 2,\n          gripLineLength: 8\n        }\n      }\n    },\n    maxHandle: {\n      meta: {\n        constructor: NavigatorHandle,\n        defaults: {\n          fill: '#f2f2f2',\n          stroke: '#999999',\n          strokeWidth: 1,\n          width: 8,\n          height: 16,\n          gripLineGap: 2,\n          gripLineLength: 8\n        }\n      }\n    }\n  }\n}), _a[PolarChart.type] = __assign(__assign({\n  meta: __assign(__assign({\n    constructor: PolarChart\n  }, chartMeta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      padding: new Padding(40)\n    })\n  })\n}, commonChartMappings), {\n  series: (_d = {}, _d[PieSeries.type] = __assign({\n    meta: {\n      constructor: PieSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        calloutColors: palette.strokes,\n        calloutStrokeWidth: 1,\n        calloutLength: 10,\n        angleKey: '',\n        angleName: '',\n        radiusKey: undefined,\n        radiusName: undefined,\n        labelKey: undefined,\n        labelName: undefined,\n        fills: palette.fills,\n        strokes: palette.strokes,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        rotation: 0,\n        outerRadiusOffset: 0,\n        innerRadiusOffset: 0,\n        strokeWidth: 1,\n        shadow: undefined\n      })\n    },\n    highlightStyle: {},\n    title: {\n      meta: {\n        constructor: Caption,\n        defaults: {\n          enabled: true,\n          padding: new Padding(10),\n          text: 'Series Title',\n          fontStyle: undefined,\n          fontWeight: 'bold',\n          fontSize: 14,\n          fontFamily: 'Verdana, sans-serif',\n          color: 'black'\n        }\n      }\n    },\n    label: {\n      meta: {\n        defaults: __assign(__assign({}, labelDefaults), {\n          offset: 3,\n          minAngle: 20\n        })\n      }\n    },\n    callout: {\n      meta: {\n        defaults: {\n          colors: palette.strokes,\n          length: 10,\n          strokeWidth: 1\n        }\n      }\n    }\n  }, shadowMapping), _d)\n}), _a); // Amend the `mappings` object with aliases for different chart types.\n\n{\n  var typeToAliases = {\n    cartesian: ['line', 'area', 'bar', 'column'],\n    polar: ['pie']\n  };\n\n  var _loop_1 = function (type) {\n    typeToAliases[type].forEach(function (alias) {\n      mappings[alias] = mappings[type];\n    });\n  };\n\n  for (var type in typeToAliases) {\n    _loop_1(type);\n  }\n} // Special handling for scatter and histogram charts, for which both axes should default to type `number`.\n\nmappings['scatter'] = mappings['histogram'] = __assign(__assign({}, mappings.cartesian), {\n  meta: __assign(__assign({}, mappings.cartesian.meta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      axes: [{\n        type: 'number',\n        position: 'bottom'\n      }, {\n        type: 'number',\n        position: 'left'\n      }]\n    })\n  })\n});\nexport default mappings;","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/ag-charts-community/dist/es6/chart/chartMappings.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","_a","_b","_c","_d","Padding","CartesianChart","NumberAxis","CategoryAxis","LineSeries","BarSeries","HistogramSeries","ScatterSeries","AreaSeries","PolarChart","PieSeries","AxisLabel","AxisTick","TimeAxis","Caption","DropShadow","Legend","LegendPosition","Navigator","NavigatorMask","NavigatorHandle","palette","commonChartMappings","background","meta","defaults","visible","fill","padding","constructor","top","right","bottom","left","title","enabled","text","fontStyle","undefined","fontWeight","fontSize","fontFamily","color","subtitle","legend","position","Right","spacing","layoutHorizontalSpacing","layoutVerticalSpacing","itemSpacing","markerShape","markerSize","strokeWidth","chartDefaults","container","data","chartMeta","constructorParams","setAsIs","axisDefaults","visibleRange","gridStyle","stroke","lineDash","seriesDefaults","showInLegend","columnSeriesDefaults","fills","strokes","fillOpacity","strokeOpacity","xKey","xName","yKeys","yNames","grouped","normalizedTo","shadow","highlightStyle","shadowMapping","xOffset","yOffset","blur","labelDefaults","labelMapping","label","axisMappings","line","width","formatter","tick","size","count","mappings","type","axes","series","yKey","yName","marker","column","flipXY","bar","sizeKey","labelKey","sizeName","labelName","tooltipRenderer","aggregation","navigator","height","min","max","mask","minHandle","gripLineGap","gripLineLength","maxHandle","calloutColors","calloutStrokeWidth","calloutLength","angleKey","angleName","radiusKey","radiusName","rotation","outerRadiusOffset","innerRadiusOffset","offset","minAngle","callout","colors","typeToAliases","cartesian","polar","_loop_1","forEach","alias"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a, _b, _c, _d;\nimport { Padding } from \"../util/padding\";\nimport { CartesianChart } from \"./cartesianChart\";\nimport { NumberAxis } from \"./axis/numberAxis\";\nimport { CategoryAxis } from \"./axis/categoryAxis\";\nimport { LineSeries } from \"./series/cartesian/lineSeries\";\nimport { BarSeries } from \"./series/cartesian/barSeries\";\nimport { HistogramSeries } from \"./series/cartesian/histogramSeries\";\nimport { ScatterSeries } from \"./series/cartesian/scatterSeries\";\nimport { AreaSeries } from \"./series/cartesian/areaSeries\";\nimport { PolarChart } from \"./polarChart\";\nimport { PieSeries } from \"./series/polar/pieSeries\";\nimport { AxisLabel, AxisTick } from \"../axis\";\nimport { TimeAxis } from \"./axis/timeAxis\";\nimport { Caption } from \"../caption\";\nimport { DropShadow } from \"../scene/dropShadow\";\nimport { Legend, LegendPosition } from \"./legend\";\nimport { Navigator } from \"./navigator/navigator\";\nimport { NavigatorMask } from \"./navigator/navigatorMask\";\nimport { NavigatorHandle } from \"./navigator/navigatorHandle\";\nimport palette from \"./palettes\";\n/*\n    This file defines the specs for creating different kinds of charts, but\n    contains no code that uses the specs to actually create charts\n*/\nvar commonChartMappings = {\n    background: {\n        meta: {\n            defaults: {\n                visible: true,\n                fill: 'white'\n            }\n        }\n    },\n    padding: {\n        meta: {\n            constructor: Padding,\n            defaults: {\n                top: 20,\n                right: 20,\n                bottom: 20,\n                left: 20\n            }\n        }\n    },\n    title: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                enabled: true,\n                padding: new Padding(10),\n                text: 'Title',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 14,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgba(70, 70, 70, 1)'\n            }\n        }\n    },\n    subtitle: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                enabled: true,\n                padding: new Padding(10),\n                text: 'Subtitle',\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgba(140, 140, 140, 1)'\n            }\n        }\n    },\n    legend: {\n        meta: {\n            constructor: Legend,\n            defaults: {\n                enabled: true,\n                position: LegendPosition.Right,\n                spacing: 20,\n                layoutHorizontalSpacing: 16,\n                layoutVerticalSpacing: 8,\n                itemSpacing: 8,\n                markerShape: undefined,\n                markerSize: 15,\n                strokeWidth: 1,\n                color: 'black',\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif'\n            }\n        }\n    }\n};\nvar chartDefaults = {\n    container: undefined,\n    data: [],\n    padding: new Padding(20),\n    title: undefined,\n    subtitle: undefined,\n};\nvar chartMeta = {\n    // Charts components' constructors normally don't take any parameters (which makes things consistent -- everything\n    // is configured the same way, via the properties, and makes the factory pattern work well) but the charts\n    // themselves are the exceptions.\n    // If a chart config has the (optional) `document` property, it will be passed to the constructor.\n    // There is no actual `document` property on the chart, it can only be supplied during instantiation.\n    constructorParams: ['document'],\n    setAsIs: ['container', 'data', 'tooltipOffset'],\n};\nvar axisDefaults = {\n    defaults: {\n        visibleRange: [0, 1],\n        gridStyle: [{\n                stroke: 'rgba(219, 219, 219, 1)',\n                lineDash: [4, 2]\n            }]\n    }\n};\nvar seriesDefaults = {\n    visible: true,\n    showInLegend: true\n};\nvar columnSeriesDefaults = {\n    fills: palette.fills,\n    strokes: palette.strokes,\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    xKey: '',\n    xName: '',\n    yKeys: [],\n    yNames: [],\n    grouped: false,\n    normalizedTo: undefined,\n    strokeWidth: 1,\n    shadow: undefined,\n    highlightStyle: {\n        fill: 'yellow'\n    }\n};\nvar shadowMapping = {\n    shadow: {\n        meta: {\n            constructor: DropShadow,\n            defaults: {\n                enabled: true,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 0,\n                yOffset: 0,\n                blur: 5\n            }\n        }\n    }\n};\nvar labelDefaults = {\n    enabled: true,\n    fontStyle: undefined,\n    fontWeight: undefined,\n    fontSize: 12,\n    fontFamily: 'Verdana, sans-serif',\n    color: 'rgba(70, 70, 70, 1)'\n};\nvar labelMapping = {\n    label: {\n        meta: {\n            defaults: __assign({}, labelDefaults)\n        }\n    }\n};\nvar axisMappings = {\n    line: {\n        meta: {\n            defaults: {\n                width: 1,\n                color: 'rgba(195, 195, 195, 1)'\n            }\n        }\n    },\n    title: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                enabled: true,\n                padding: new Padding(10),\n                text: 'Axis Title',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgba(70, 70, 70, 1)'\n            }\n        }\n    },\n    label: {\n        meta: {\n            constructor: AxisLabel,\n            defaults: {\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                padding: 5,\n                color: 'rgba(87, 87, 87, 1)',\n                formatter: undefined\n            }\n        }\n    },\n    tick: {\n        meta: {\n            constructor: AxisTick,\n            defaults: {\n                width: 1,\n                size: 6,\n                color: 'rgba(195, 195, 195, 1)',\n                count: 10\n            }\n        }\n    }\n};\nvar mappings = (_a = {},\n    _a[CartesianChart.type] = __assign(__assign({ meta: __assign(__assign({ constructor: CartesianChart }, chartMeta), { defaults: __assign(__assign({}, chartDefaults), { axes: [{\n                        type: CategoryAxis.type,\n                        position: 'bottom'\n                    }, {\n                        type: NumberAxis.type,\n                        position: 'left'\n                    }] }) }) }, commonChartMappings), { axes: (_b = {},\n            _b[NumberAxis.type] = __assign({ meta: __assign({ constructor: NumberAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b[CategoryAxis.type] = __assign({ meta: __assign({ constructor: CategoryAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b[TimeAxis.type] = __assign({ meta: __assign({ constructor: TimeAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b), series: (_c = {},\n            _c[LineSeries.type] = {\n                meta: {\n                    constructor: LineSeries,\n                    defaults: {\n                        title: undefined,\n                        xKey: '',\n                        xName: '',\n                        yKey: '',\n                        yName: '',\n                        stroke: palette.fills[0],\n                        strokeWidth: 2,\n                        fillOpacity: 1,\n                        strokeOpacity: 1,\n                        highlightStyle: {\n                            fill: 'yellow'\n                        }\n                    }\n                },\n                highlightStyle: {},\n                marker: {}\n            },\n            _c.column = __assign(__assign({ meta: {\n                    constructor: BarSeries,\n                    defaults: __assign(__assign({ flipXY: false }, seriesDefaults), columnSeriesDefaults)\n                }, highlightStyle: {} }, labelMapping), shadowMapping),\n            _c.bar = __assign(__assign({ meta: {\n                    constructor: BarSeries,\n                    defaults: __assign(__assign({ flipXY: true }, seriesDefaults), columnSeriesDefaults)\n                }, highlightStyle: {} }, labelMapping), shadowMapping),\n            _c[ScatterSeries.type] = {\n                meta: {\n                    constructor: ScatterSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { title: undefined, xKey: '', yKey: '', sizeKey: undefined, labelKey: undefined, xName: '', yName: '', sizeName: 'Size', labelName: 'Label', fill: palette.fills[0], stroke: palette.strokes[0], strokeWidth: 2, fillOpacity: 1, strokeOpacity: 1, tooltipRenderer: undefined, highlightStyle: {\n                            fill: 'yellow'\n                        } })\n                },\n                highlightStyle: {},\n                marker: {}\n            },\n            _c[AreaSeries.type] = __assign({ meta: {\n                    constructor: AreaSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { xKey: '', xName: '', yKeys: [], yNames: [], normalizedTo: undefined, fills: palette.fills, strokes: palette.strokes, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 2, shadow: undefined, highlightStyle: {\n                            fill: 'yellow'\n                        } })\n                }, highlightStyle: {}, marker: {} }, shadowMapping),\n            _c[HistogramSeries.type] = {\n                meta: {\n                    constructor: HistogramSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { title: undefined, xKey: '', yKey: '', xName: '', yName: '', fill: palette.fills[0], stroke: palette.strokes[0], strokeWidth: 1, fillOpacity: 1, strokeOpacity: 1, aggregation: 'sum', tooltipRenderer: undefined, highlightStyle: {\n                            fill: 'yellow'\n                        } })\n                },\n                highlightStyle: {}\n            },\n            _c), navigator: {\n            meta: {\n                constructor: Navigator,\n                defaults: {\n                    enabled: false,\n                    height: 30,\n                    min: 0,\n                    max: 1\n                }\n            },\n            mask: {\n                meta: {\n                    constructor: NavigatorMask,\n                    defaults: {\n                        fill: '#999999',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        fillOpacity: 0.2\n                    }\n                }\n            },\n            minHandle: {\n                meta: {\n                    constructor: NavigatorHandle,\n                    defaults: {\n                        fill: '#f2f2f2',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        width: 8,\n                        height: 16,\n                        gripLineGap: 2,\n                        gripLineLength: 8\n                    }\n                }\n            },\n            maxHandle: {\n                meta: {\n                    constructor: NavigatorHandle,\n                    defaults: {\n                        fill: '#f2f2f2',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        width: 8,\n                        height: 16,\n                        gripLineGap: 2,\n                        gripLineLength: 8\n                    }\n                }\n            }\n        } }),\n    _a[PolarChart.type] = __assign(__assign({ meta: __assign(__assign({ constructor: PolarChart }, chartMeta), { defaults: __assign(__assign({}, chartDefaults), { padding: new Padding(40) }) }) }, commonChartMappings), { series: (_d = {},\n            _d[PieSeries.type] = __assign({ meta: {\n                    constructor: PieSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { title: undefined, calloutColors: palette.strokes, calloutStrokeWidth: 1, calloutLength: 10, angleKey: '', angleName: '', radiusKey: undefined, radiusName: undefined, labelKey: undefined, labelName: undefined, fills: palette.fills, strokes: palette.strokes, fillOpacity: 1, strokeOpacity: 1, rotation: 0, outerRadiusOffset: 0, innerRadiusOffset: 0, strokeWidth: 1, shadow: undefined })\n                }, highlightStyle: {}, title: {\n                    meta: {\n                        constructor: Caption,\n                        defaults: {\n                            enabled: true,\n                            padding: new Padding(10),\n                            text: 'Series Title',\n                            fontStyle: undefined,\n                            fontWeight: 'bold',\n                            fontSize: 14,\n                            fontFamily: 'Verdana, sans-serif',\n                            color: 'black'\n                        }\n                    }\n                }, label: {\n                    meta: {\n                        defaults: __assign(__assign({}, labelDefaults), { offset: 3, minAngle: 20 })\n                    }\n                }, callout: {\n                    meta: {\n                        defaults: {\n                            colors: palette.strokes,\n                            length: 10,\n                            strokeWidth: 1\n                        }\n                    }\n                } }, shadowMapping),\n            _d) }),\n    _a);\n// Amend the `mappings` object with aliases for different chart types.\n{\n    var typeToAliases = {\n        cartesian: ['line', 'area', 'bar', 'column'],\n        polar: ['pie']\n    };\n    var _loop_1 = function (type) {\n        typeToAliases[type].forEach(function (alias) {\n            mappings[alias] = mappings[type];\n        });\n    };\n    for (var type in typeToAliases) {\n        _loop_1(type);\n    }\n}\n// Special handling for scatter and histogram charts, for which both axes should default to type `number`.\nmappings['scatter'] =\n    mappings['histogram'] = __assign(__assign({}, mappings.cartesian), { meta: __assign(__assign({}, mappings.cartesian.meta), { defaults: __assign(__assign({}, chartDefaults), { axes: [{\n                        type: 'number',\n                        position: 'bottom'\n                    }, {\n                        type: 'number',\n                        position: 'left'\n                    }] }) }) });\nexport default mappings;\n"]},"metadata":{},"sourceType":"module"}