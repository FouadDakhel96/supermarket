{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { Constants } from \"./constants\";\nimport { Autowired, Bean, Optional, PostConstruct } from \"./context/context\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { _ } from \"./utils\";\n\nvar GridApi =\n/** @class */\nfunction () {\n  function GridApi() {\n    this.detailGridInfoMap = {};\n    this.destroyCalled = false;\n  }\n\n  GridApi.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  GridApi.prototype.registerGridCore = function (gridCore) {\n    this.gridCore = gridCore;\n  };\n\n  GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {\n    this.headerRootComp = headerRootComp;\n  };\n\n  GridApi.prototype.init = function () {\n    switch (this.rowModel.getType()) {\n      case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:\n        this.clientSideRowModel = this.rowModel;\n        break;\n\n      case Constants.ROW_MODEL_TYPE_INFINITE:\n        this.infiniteRowModel = this.rowModel;\n        break;\n\n      case Constants.ROW_MODEL_TYPE_SERVER_SIDE:\n        this.serverSideRowModel = this.rowModel;\n        break;\n    }\n  };\n  /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n\n\n  GridApi.prototype.__getAlignedGridService = function () {\n    return this.alignedGridsService;\n  };\n\n  GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {\n    this.detailGridInfoMap[id] = gridInfo;\n  };\n\n  GridApi.prototype.removeDetailGridInfo = function (id) {\n    this.detailGridInfoMap[id] = undefined;\n  };\n\n  GridApi.prototype.getDetailGridInfo = function (id) {\n    return this.detailGridInfoMap[id];\n  };\n\n  GridApi.prototype.forEachDetailGridInfo = function (callback) {\n    var index = 0;\n\n    _.iterateObject(this.detailGridInfoMap, function (id, gridInfo) {\n      // check for undefined, as old references will still be lying around\n      if (_.exists(gridInfo)) {\n        callback(gridInfo, index);\n        index++;\n      }\n    });\n  };\n\n  GridApi.prototype.getDataAsCsv = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.getDataAsCsv')) {\n      return this.csvCreator.getDataAsCsv(params);\n    }\n  };\n\n  GridApi.prototype.exportDataAsCsv = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.exportDataAsCSv')) {\n      this.csvCreator.exportDataAsCsv(params);\n    }\n  };\n\n  GridApi.prototype.getDataAsExcel = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getDataAsExcel')) {\n      return this.excelCreator.getDataAsExcelXml(params);\n    }\n  };\n\n  GridApi.prototype.exportDataAsExcel = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportDataAsExcel')) {\n      this.excelCreator.exportDataAsExcel(params);\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setEnterpriseDatasource = function (datasource) {\n    console.warn(\"ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()\");\n    this.setServerSideDatasource(datasource);\n  };\n\n  GridApi.prototype.setServerSideDatasource = function (datasource) {\n    if (this.gridOptionsWrapper.isRowModelServerSide()) {\n      // should really have an IEnterpriseRowModel interface, so we are not casting to any\n      this.rowModel.setDatasource(datasource);\n    } else {\n      console.warn(\"ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + \"'\");\n    }\n  };\n\n  GridApi.prototype.setDatasource = function (datasource) {\n    if (this.gridOptionsWrapper.isRowModelInfinite()) {\n      this.rowModel.setDatasource(datasource);\n    } else {\n      console.warn(\"ag-Grid: you can only use a datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_INFINITE + \"'\");\n    }\n  };\n\n  GridApi.prototype.setViewportDatasource = function (viewportDatasource) {\n    if (this.gridOptionsWrapper.isRowModelViewport()) {\n      // this is bad coding, because it's using an interface that's exposed in the enterprise.\n      // really we should create an interface in the core for viewportDatasource and let\n      // the enterprise implement it, rather than casting to 'any' here\n      this.rowModel.setViewportDatasource(viewportDatasource);\n    } else {\n      console.warn(\"ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_VIEWPORT + \"'\");\n    }\n  };\n\n  GridApi.prototype.setRowData = function (rowData) {\n    if (this.gridOptionsWrapper.isRowModelDefault()) {\n      if (this.gridOptionsWrapper.isImmutableData()) {\n        var res = this.immutableService.createTransactionForRowData(rowData);\n\n        if (!res) {\n          return;\n        }\n\n        var transaction = res[0],\n            orderIdMap = res[1];\n        this.clientSideRowModel.updateRowData(transaction, orderIdMap); // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened\n        // to the data change event on the row node and refreshed itself.\n\n        this.rowRenderer.refreshFullWidthRows();\n      } else {\n        this.selectionController.reset();\n        this.clientSideRowModel.setRowData(rowData);\n      }\n    } else {\n      console.warn('cannot call setRowData unless using normal row model');\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setFloatingTopRowData = function (rows) {\n    console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');\n    this.setPinnedTopRowData(rows);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setFloatingBottomRowData = function (rows) {\n    console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');\n    this.setPinnedBottomRowData(rows);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingTopRowCount = function () {\n    console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');\n    return this.getPinnedTopRowCount();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingBottomRowCount = function () {\n    console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');\n    return this.getPinnedBottomRowCount();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingTopRow = function (index) {\n    console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');\n    return this.getPinnedTopRow(index);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingBottomRow = function (index) {\n    console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');\n    return this.getPinnedBottomRow(index);\n  };\n\n  GridApi.prototype.setPinnedTopRowData = function (rows) {\n    this.pinnedRowModel.setPinnedTopRowData(rows);\n  };\n\n  GridApi.prototype.setPinnedBottomRowData = function (rows) {\n    this.pinnedRowModel.setPinnedBottomRowData(rows);\n  };\n\n  GridApi.prototype.getPinnedTopRowCount = function () {\n    return this.pinnedRowModel.getPinnedTopRowCount();\n  };\n\n  GridApi.prototype.getPinnedBottomRowCount = function () {\n    return this.pinnedRowModel.getPinnedBottomRowCount();\n  };\n\n  GridApi.prototype.getPinnedTopRow = function (index) {\n    return this.pinnedRowModel.getPinnedTopRow(index);\n  };\n\n  GridApi.prototype.getPinnedBottomRow = function (index) {\n    return this.pinnedRowModel.getPinnedBottomRow(index);\n  };\n\n  GridApi.prototype.setColumnDefs = function (colDefs, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.columnController.setColumnDefs(colDefs, source);\n  };\n\n  GridApi.prototype.setAutoGroupColumnDef = function (colDef, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.gridOptionsWrapper.setProperty('autoGroupColumnDef', colDef, true);\n  };\n\n  GridApi.prototype.expireValueCache = function () {\n    this.valueCache.expire();\n  };\n\n  GridApi.prototype.getVerticalPixelRange = function () {\n    return this.gridPanel.getVScrollPosition();\n  };\n\n  GridApi.prototype.getHorizontalPixelRange = function () {\n    return this.gridPanel.getHScrollPosition();\n  };\n\n  GridApi.prototype.setAlwaysShowVerticalScroll = function (show) {\n    this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);\n  };\n\n  GridApi.prototype.refreshToolPanel = function () {\n    this.gridCore.refreshSideBar();\n  };\n\n  GridApi.prototype.refreshCells = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (Array.isArray(params)) {\n      // the old version of refreshCells() took an array of rowNodes for the first argument\n      console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');\n      return;\n    }\n\n    this.rowRenderer.refreshCells(params);\n  };\n\n  GridApi.prototype.flashCells = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    this.rowRenderer.flashCells(params);\n  };\n\n  GridApi.prototype.redrawRows = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (params && params.rowNodes) {\n      this.rowRenderer.redrawRows(params.rowNodes);\n    } else {\n      this.rowRenderer.redrawAfterModelUpdate();\n    }\n  };\n\n  GridApi.prototype.timeFullRedraw = function (count) {\n    if (count === void 0) {\n      count = 1;\n    }\n\n    var iterationCount = 0;\n    var totalProcessing = 0;\n    var totalReflow = 0;\n    var that = this;\n    doOneIteration();\n\n    function doOneIteration() {\n      var start = new Date().getTime();\n      that.rowRenderer.redrawAfterModelUpdate();\n      var endProcessing = new Date().getTime();\n      window.setTimeout(function () {\n        var endReflow = new Date().getTime();\n        var durationProcessing = endProcessing - start;\n        var durationReflow = endReflow - endProcessing; // tslint:disable-next-line\n\n        console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');\n        iterationCount++;\n        totalProcessing += durationProcessing;\n        totalReflow += durationReflow;\n\n        if (iterationCount < count) {\n          // wait for 1s between tests\n          window.setTimeout(doOneIteration, 1000);\n        } else {\n          finish();\n        }\n      }, 0);\n    }\n\n    function finish() {\n      // tslint:disable-next-line\n      console.log('tests complete. iteration count = ' + iterationCount); // tslint:disable-next-line\n\n      console.log('average processing = ' + totalProcessing / iterationCount + 'ms'); // tslint:disable-next-line\n\n      console.log('average reflow = ' + totalReflow / iterationCount + 'ms');\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.refreshView = function () {\n    console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');\n    this.redrawRows();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.refreshRows = function (rowNodes) {\n    console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');\n    this.refreshCells({\n      rowNodes: rowNodes\n    });\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.rowDataChanged = function (rows) {\n    console.warn('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');\n    this.redrawRows();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.softRefreshView = function () {\n    console.error('ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.refreshGroupRows = function () {\n    console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' + 'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' + 'not be necessary to only refresh the group rows.');\n    this.refreshCells();\n  };\n\n  GridApi.prototype.setFunctionsReadOnly = function (readOnly) {\n    this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);\n  };\n\n  GridApi.prototype.refreshHeader = function () {\n    this.headerRootComp.refreshHeader();\n    this.gridPanel.setHeaderAndFloatingHeights();\n  };\n\n  GridApi.prototype.isAnyFilterPresent = function () {\n    return this.filterManager.isAnyFilterPresent();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.isAdvancedFilterPresent = function () {\n    console.warn('ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');\n    return this.isColumnFilterPresent();\n  };\n\n  GridApi.prototype.isColumnFilterPresent = function () {\n    return this.filterManager.isAdvancedFilterPresent();\n  };\n\n  GridApi.prototype.isQuickFilterPresent = function () {\n    return this.filterManager.isQuickFilterPresent();\n  };\n\n  GridApi.prototype.getModel = function () {\n    return this.rowModel;\n  };\n\n  GridApi.prototype.setRowNodeExpanded = function (rowNode, expanded) {\n    if (rowNode) {\n      rowNode.setExpanded(expanded);\n    }\n  };\n\n  GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {\n    if (_.missing(this.clientSideRowModel)) {\n      console.warn('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');\n    }\n\n    if (_.exists(deprecated_refreshFromIndex)) {\n      console.warn('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');\n    } // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n    // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n    // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n    // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n\n\n    this.clientSideRowModel.refreshModel({\n      step: Constants.STEP_MAP\n    });\n  };\n\n  GridApi.prototype.refreshInMemoryRowModel = function (step) {\n    console.warn(\"ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()\");\n    this.refreshClientSideRowModel(step);\n  };\n\n  GridApi.prototype.refreshClientSideRowModel = function (step) {\n    if (_.missing(this.clientSideRowModel)) {\n      console.warn('cannot call refreshClientSideRowModel unless using normal row model');\n    }\n\n    var paramsStep = Constants.STEP_EVERYTHING;\n    var stepsMapped = {\n      group: Constants.STEP_EVERYTHING,\n      filter: Constants.STEP_FILTER,\n      map: Constants.STEP_MAP,\n      aggregate: Constants.STEP_AGGREGATE,\n      sort: Constants.STEP_SORT,\n      pivot: Constants.STEP_PIVOT\n    };\n\n    if (_.exists(step)) {\n      paramsStep = stepsMapped[step];\n    }\n\n    if (_.missing(paramsStep)) {\n      console.error(\"ag-Grid: invalid step \" + step + \", available steps are \" + Object.keys(stepsMapped).join(', '));\n      return;\n    }\n\n    var modelParams = {\n      step: paramsStep,\n      keepRenderedRows: true,\n      animate: true,\n      keepEditingRows: true\n    };\n    this.clientSideRowModel.refreshModel(modelParams);\n  };\n\n  GridApi.prototype.isAnimationFrameQueueEmpty = function () {\n    return this.animationFrameService.isQueueEmpty();\n  };\n\n  GridApi.prototype.getRowNode = function (id) {\n    return this.rowModel.getRowNode(id);\n  };\n\n  GridApi.prototype.getSizesForCurrentTheme = function () {\n    return {\n      rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n      headerHeight: this.gridOptionsWrapper.getHeaderHeight()\n    };\n  };\n\n  GridApi.prototype.expandAll = function () {\n    if (_.missing(this.clientSideRowModel)) {\n      console.warn('ag-Grid: cannot call expandAll unless using normal row model');\n      return;\n    }\n\n    this.clientSideRowModel.expandOrCollapseAll(true);\n  };\n\n  GridApi.prototype.collapseAll = function () {\n    if (_.missing(this.clientSideRowModel)) {\n      console.warn('ag-Grid: cannot call collapseAll unless using normal row model');\n      return;\n    }\n\n    this.clientSideRowModel.expandOrCollapseAll(false);\n  };\n\n  GridApi.prototype.getToolPanelInstance = function (id) {\n    return this.gridCore.getToolPanelInstance(id);\n  };\n\n  GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {\n    if (typeof eventName !== 'string') {\n      console.warn('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');\n    }\n\n    this.addRenderedRowListener(eventName, rowIndex, callback);\n  };\n\n  GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {\n    if (eventName === 'virtualRowSelected') {\n      console.warn(\"ag-Grid: event virtualRowSelected is deprecated, to register for individual row\\n                selection events, add a listener directly to the row node.\");\n    }\n\n    this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n  };\n\n  GridApi.prototype.setQuickFilter = function (newFilter) {\n    this.filterManager.setQuickFilter(newFilter);\n  };\n\n  GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {\n    console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    this.selectionController.selectIndex(index, tryMulti);\n  };\n\n  GridApi.prototype.deselectIndex = function (index, suppressEvents) {\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    this.selectionController.deselectIndex(index);\n  };\n\n  GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {\n    if (tryMulti === void 0) {\n      tryMulti = false;\n    }\n\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    node.setSelectedParams({\n      newValue: true,\n      clearSelection: !tryMulti\n    });\n  };\n\n  GridApi.prototype.deselectNode = function (node, suppressEvents) {\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    node.setSelectedParams({\n      newValue: false\n    });\n  };\n\n  GridApi.prototype.selectAll = function () {\n    this.selectionController.selectAllRowNodes();\n  };\n\n  GridApi.prototype.deselectAll = function () {\n    this.selectionController.deselectAllRowNodes();\n  };\n\n  GridApi.prototype.selectAllFiltered = function () {\n    this.selectionController.selectAllRowNodes(true);\n  };\n\n  GridApi.prototype.deselectAllFiltered = function () {\n    this.selectionController.deselectAllRowNodes(true);\n  };\n\n  GridApi.prototype.recomputeAggregates = function () {\n    if (_.missing(this.clientSideRowModel)) {\n      console.warn('cannot call recomputeAggregates unless using normal row model');\n    }\n\n    console.warn(\"recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead\");\n    this.clientSideRowModel.refreshModel({\n      step: Constants.STEP_AGGREGATE\n    });\n  };\n\n  GridApi.prototype.sizeColumnsToFit = function () {\n    this.gridPanel.sizeColumnsToFit();\n  };\n\n  GridApi.prototype.showLoadingOverlay = function () {\n    this.gridPanel.showLoadingOverlay();\n  };\n\n  GridApi.prototype.showNoRowsOverlay = function () {\n    this.gridPanel.showNoRowsOverlay();\n  };\n\n  GridApi.prototype.hideOverlay = function () {\n    this.gridPanel.hideOverlay();\n  };\n\n  GridApi.prototype.isNodeSelected = function (node) {\n    console.warn('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');\n    return node.isSelected();\n  };\n\n  GridApi.prototype.getSelectedNodesById = function () {\n    console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');\n    return null;\n  };\n\n  GridApi.prototype.getSelectedNodes = function () {\n    return this.selectionController.getSelectedNodes();\n  };\n\n  GridApi.prototype.getSelectedRows = function () {\n    return this.selectionController.getSelectedRows();\n  };\n\n  GridApi.prototype.getBestCostNodeSelection = function () {\n    return this.selectionController.getBestCostNodeSelection();\n  };\n\n  GridApi.prototype.getRenderedNodes = function () {\n    return this.rowRenderer.getRenderedNodes();\n  };\n\n  GridApi.prototype.ensureColIndexVisible = function (index) {\n    console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');\n  };\n\n  GridApi.prototype.ensureColumnVisible = function (key) {\n    this.gridPanel.ensureColumnVisible(key);\n  }; // Valid values for position are bottom, middle and top\n\n\n  GridApi.prototype.ensureIndexVisible = function (index, position) {\n    this.gridPanel.ensureIndexVisible(index, position);\n  }; // Valid values for position are bottom, middle and top\n\n\n  GridApi.prototype.ensureNodeVisible = function (comparator, position) {\n    this.gridCore.ensureNodeVisible(comparator, position);\n  };\n\n  GridApi.prototype.forEachLeafNode = function (callback) {\n    if (_.missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNode unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachLeafNode(callback);\n  };\n\n  GridApi.prototype.forEachNode = function (callback) {\n    this.rowModel.forEachNode(callback);\n  };\n\n  GridApi.prototype.forEachNodeAfterFilter = function (callback) {\n    if (_.missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNodeAfterFilter unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachNodeAfterFilter(callback);\n  };\n\n  GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n    if (_.missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n  };\n\n  GridApi.prototype.getFilterApiForColDef = function (colDef) {\n    console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterInstance instead');\n    return this.getFilterInstance(colDef);\n  };\n\n  GridApi.prototype.getFilterInstance = function (key, callback) {\n    var column = this.columnController.getPrimaryColumn(key);\n\n    if (column) {\n      var filterPromise = this.filterManager.getFilterComponent(column, 'NO_UI');\n      var currentValue = filterPromise.resolveNow(null, function (filterComp) {\n        return filterComp;\n      });\n\n      if (callback) {\n        if (currentValue) {\n          setTimeout(callback, 0, currentValue);\n        } else {\n          filterPromise.then(callback);\n        }\n      }\n\n      return currentValue;\n    }\n  };\n\n  GridApi.prototype.getFilterApi = function (key) {\n    console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');\n    return this.getFilterInstance(key);\n  };\n\n  GridApi.prototype.destroyFilter = function (key) {\n    var column = this.columnController.getPrimaryColumn(key);\n\n    if (column) {\n      return this.filterManager.destroyFilter(column, \"filterDestroyed\");\n    }\n  };\n\n  GridApi.prototype.getStatusPanel = function (key) {\n    if (this.statusBarService) {\n      return this.statusBarService.getStatusPanel(key);\n    }\n  };\n\n  GridApi.prototype.getColumnDef = function (key) {\n    var column = this.columnController.getPrimaryColumn(key);\n\n    if (column) {\n      return column.getColDef();\n    }\n\n    return null;\n  };\n\n  GridApi.prototype.onFilterChanged = function () {\n    this.filterManager.onFilterChanged();\n  };\n\n  GridApi.prototype.onSortChanged = function () {\n    this.sortController.onSortChanged();\n  };\n\n  GridApi.prototype.setSortModel = function (sortModel, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.sortController.setSortModel(sortModel, source);\n  };\n\n  GridApi.prototype.getSortModel = function () {\n    return this.sortController.getSortModel();\n  };\n\n  GridApi.prototype.setFilterModel = function (model) {\n    this.filterManager.setFilterModel(model);\n  };\n\n  GridApi.prototype.getFilterModel = function () {\n    return this.filterManager.getFilterModel();\n  };\n\n  GridApi.prototype.getFocusedCell = function () {\n    return this.focusController.getFocusedCell();\n  };\n\n  GridApi.prototype.clearFocusedCell = function () {\n    return this.focusController.clearFocusedCell();\n  };\n\n  GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {\n    this.focusController.setFocusedCell(rowIndex, colKey, floating, true);\n  };\n\n  GridApi.prototype.setSuppressRowDrag = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);\n  };\n\n  GridApi.prototype.setSuppressMoveWhenRowDragging = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);\n  };\n\n  GridApi.prototype.setSuppressRowClickSelection = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);\n  };\n\n  GridApi.prototype.addRowDropZone = function (params) {\n    this.gridPanel.getRowDragFeature().addRowDropZone(params);\n  };\n\n  GridApi.prototype.removeRowDropZone = function (params) {\n    var activeDropTarget = this.dragAndDropService.findExternalZone(params);\n\n    if (activeDropTarget) {\n      this.dragAndDropService.removeDropTarget(activeDropTarget);\n    }\n  };\n\n  GridApi.prototype.getRowDropZoneParams = function (events) {\n    return this.gridPanel.getRowDragFeature().getRowDropZone(events);\n  };\n\n  GridApi.prototype.setHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.setGridAutoHeight = function (gridAutoHeight) {\n    console.warn('api.setGridAutoHeight(boolean) is deprecated, please use api.setDomLayout() instead');\n    this.setDomLayout(gridAutoHeight ? 'autoHeight' : 'normal');\n  };\n\n  GridApi.prototype.setDomLayout = function (domLayout) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);\n  };\n\n  GridApi.prototype.setEnableCellTextSelection = function (selectable) {\n    this.gridPanel.setCellTextSelection(selectable);\n  };\n\n  GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);\n    this.doLayout();\n  };\n\n  GridApi.prototype.isSideBarVisible = function () {\n    return this.gridCore.isSideBarVisible();\n  };\n\n  GridApi.prototype.setSideBarVisible = function (show) {\n    this.gridCore.setSideBarVisible(show);\n  };\n\n  GridApi.prototype.setSideBarPosition = function (position) {\n    this.gridCore.setSideBarPosition(position);\n  };\n\n  GridApi.prototype.showToolPanel = function (show) {\n    console.warn(\"ag-grid: from v19 api.showToolPanel has been deprecated in favour of api.setSideBarVisible\");\n    this.setSideBarVisible(show);\n  };\n\n  GridApi.prototype.openToolPanel = function (key) {\n    this.gridCore.openToolPanel(key);\n  };\n\n  GridApi.prototype.closeToolPanel = function () {\n    this.gridCore.closeToolPanel();\n  };\n\n  GridApi.prototype.getOpenedToolPanel = function () {\n    return this.gridCore.getOpenedToolPanel();\n  };\n\n  GridApi.prototype.getSideBar = function () {\n    return this.gridCore.getSideBar();\n  };\n\n  GridApi.prototype.setSideBar = function (def) {\n    return this.gridCore.setSideBar(def);\n  };\n\n  GridApi.prototype.setSuppressClipboardPaste = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);\n  };\n\n  GridApi.prototype.isToolPanelShowing = function () {\n    return this.gridCore.isToolPanelShowing();\n  };\n\n  GridApi.prototype.doLayout = function () {\n    this.gridPanel.checkViewportAndScrolls();\n  };\n\n  GridApi.prototype.resetRowHeights = function () {\n    if (_.exists(this.clientSideRowModel)) {\n      this.clientSideRowModel.resetRowHeights();\n    }\n  };\n\n  GridApi.prototype.setGroupRemoveSingleChildren = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);\n  };\n\n  GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);\n  };\n\n  GridApi.prototype.onRowHeightChanged = function () {\n    if (this.clientSideRowModel) {\n      this.clientSideRowModel.onRowHeightChanged();\n    } else if (this.serverSideRowModel) {\n      this.serverSideRowModel.onRowHeightChanged();\n    }\n  };\n\n  GridApi.prototype.getValue = function (colKey, rowNode) {\n    var column = this.columnController.getPrimaryColumn(colKey);\n\n    if (_.missing(column)) {\n      column = this.columnController.getGridColumn(colKey);\n    }\n\n    if (_.missing(column)) {\n      return null;\n    }\n\n    return this.valueService.getValue(column, rowNode);\n  };\n\n  GridApi.prototype.addEventListener = function (eventType, listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.addEventListener(eventType, listener, async);\n  };\n\n  GridApi.prototype.addGlobalListener = function (listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.addGlobalListener(listener, async);\n  };\n\n  GridApi.prototype.removeEventListener = function (eventType, listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.removeEventListener(eventType, listener, async);\n  };\n\n  GridApi.prototype.removeGlobalListener = function (listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.removeGlobalListener(listener, async);\n  };\n\n  GridApi.prototype.dispatchEvent = function (event) {\n    this.eventService.dispatchEvent(event);\n  };\n\n  GridApi.prototype.destroy = function () {\n    // this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part\n    // of context.destroy(). so we need to stop the infinite loop.\n    if (this.destroyCalled) {\n      return;\n    }\n\n    this.destroyCalled = true; // destroy the UI first (as they use the services)\n\n    this.context.destroyBean(this.gridCore); // destroy the services\n\n    this.context.destroy();\n  };\n\n  GridApi.prototype.resetQuickFilter = function () {\n    this.rowModel.forEachNode(function (node) {\n      return node.quickFilterAggregateText = null;\n    });\n  };\n\n  GridApi.prototype.getRangeSelections = function () {\n    console.warn(\"ag-Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\\n        getCellRanges() is a bit different, please check the ag-Grid documentation.\");\n    return null;\n  };\n\n  GridApi.prototype.getCellRanges = function () {\n    if (this.rangeController) {\n      return this.rangeController.getCellRanges();\n    }\n\n    console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n    return null;\n  };\n\n  GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {\n    return _.camelCaseToHumanText(camelCase);\n  };\n\n  GridApi.prototype.addRangeSelection = function (deprecatedNoLongerUsed) {\n    console.warn('ag-Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');\n  };\n\n  GridApi.prototype.addCellRange = function (params) {\n    if (!this.rangeController) {\n      console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n    }\n\n    this.rangeController.addCellRange(params);\n  };\n\n  GridApi.prototype.clearRangeSelection = function () {\n    if (!this.rangeController) {\n      console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n    }\n\n    this.rangeController.removeAllCellRanges();\n  };\n\n  GridApi.prototype.undoCellEditing = function () {\n    this.undoRedoService.undo();\n  };\n\n  GridApi.prototype.redoCellEditing = function () {\n    this.undoRedoService.redo();\n  };\n\n  GridApi.prototype.getChartModels = function () {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartModels') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartModels')) {\n      return this.chartService.getChartModels();\n    }\n  };\n\n  GridApi.prototype.createRangeChart = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createRangeChart') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createRangeChart')) {\n      return this.chartService.createRangeChart(params);\n    }\n  };\n\n  GridApi.prototype.createPivotChart = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createPivotChart') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createPivotChart')) {\n      return this.chartService.createPivotChart(params);\n    }\n  };\n\n  GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {\n    if (!this.clipboardService) {\n      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n    }\n\n    this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);\n  };\n\n  GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {\n    if (!this.clipboardService) {\n      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n    }\n\n    this.clipboardService.copySelectedRangeToClipboard(includeHeader);\n  };\n\n  GridApi.prototype.copySelectedRangeDown = function () {\n    if (!this.clipboardService) {\n      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n    }\n\n    this.clipboardService.copyRangeDown();\n  };\n\n  GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {\n    // use grid column so works with pivot mode\n    var column = this.columnController.getGridColumn(colKey);\n    this.menuFactory.showMenuAfterButtonClick(column, buttonElement);\n  };\n\n  GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {\n    // use grid column so works with pivot mode\n    var column = this.columnController.getGridColumn(colKey);\n\n    if (!column) {\n      column = this.columnController.getPrimaryColumn(colKey);\n    }\n\n    if (!column) {\n      console.error(\"ag-Grid: column '\" + colKey + \"' not found\");\n      return;\n    }\n\n    this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n  };\n\n  GridApi.prototype.hidePopupMenu = function () {\n    // hide the context menu if in enterprise\n    if (this.contextMenuFactory) {\n      this.contextMenuFactory.hideActiveMenu();\n    } // and hide the column menu always\n\n\n    this.menuFactory.hideActiveMenu();\n  };\n\n  GridApi.prototype.setPopupParent = function (ePopupParent) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);\n  };\n\n  GridApi.prototype.tabToNextCell = function () {\n    return this.rowRenderer.tabToNextCell(false);\n  };\n\n  GridApi.prototype.tabToPreviousCell = function () {\n    return this.rowRenderer.tabToNextCell(true);\n  };\n\n  GridApi.prototype.getCellRendererInstances = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return this.rowRenderer.getCellRendererInstances(params);\n  };\n\n  GridApi.prototype.getCellEditorInstances = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return this.rowRenderer.getCellEditorInstances(params);\n  };\n\n  GridApi.prototype.getEditingCells = function () {\n    return this.rowRenderer.getEditingCells();\n  };\n\n  GridApi.prototype.stopEditing = function (cancel) {\n    if (cancel === void 0) {\n      cancel = false;\n    }\n\n    this.rowRenderer.stopEditing(cancel);\n  };\n\n  GridApi.prototype.startEditingCell = function (params) {\n    var column = this.columnController.getGridColumn(params.colKey);\n\n    if (!column) {\n      console.warn(\"ag-Grid: no column found for \" + params.colKey);\n      return;\n    }\n\n    var cellPosition = {\n      rowIndex: params.rowIndex,\n      rowPinned: params.rowPinned,\n      column: column\n    };\n\n    var notPinned = _.missing(params.rowPinned);\n\n    if (notPinned) {\n      this.gridPanel.ensureIndexVisible(params.rowIndex);\n    }\n\n    this.rowRenderer.startEditingCell(cellPosition, params.keyPress, params.charPress);\n  };\n\n  GridApi.prototype.addAggFunc = function (key, aggFunc) {\n    if (this.aggFuncService) {\n      this.aggFuncService.addAggFunc(key, aggFunc);\n    }\n  };\n\n  GridApi.prototype.addAggFuncs = function (aggFuncs) {\n    if (this.aggFuncService) {\n      this.aggFuncService.addAggFuncs(aggFuncs);\n    }\n  };\n\n  GridApi.prototype.clearAggFuncs = function () {\n    if (this.aggFuncService) {\n      this.aggFuncService.clear();\n    }\n  };\n\n  GridApi.prototype.applyTransaction = function (rowDataTransaction) {\n    var res = null;\n\n    if (this.clientSideRowModel) {\n      if (rowDataTransaction && rowDataTransaction.addIndex != null) {\n        var message_1 = 'ag-Grid: as of v23.1, transaction.addIndex is deprecated. If you want precision control of adding data, use immutableData instead';\n\n        _.doOnce(function () {\n          return console.warn(message_1);\n        }, 'transaction.addIndex deprecated');\n      }\n\n      res = this.clientSideRowModel.updateRowData(rowDataTransaction);\n    } else if (this.infiniteRowModel) {\n      var message_2 = 'ag-Grid: as of v23.1, transactions for Infinite Row Model are deprecated. If you want to make updates to data in Infinite Row Models, then refresh the data.';\n\n      _.doOnce(function () {\n        return console.warn(message_2);\n      }, 'applyTransaction infiniteRowModel deprecated');\n\n      this.infiniteRowModel.updateRowData(rowDataTransaction);\n    } else {\n      console.error('ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel.');\n    } // refresh all the full width rows\n\n\n    this.rowRenderer.refreshFullWidthRows(); // do change detection for all present cells\n\n    if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {\n      this.rowRenderer.refreshCells();\n    }\n\n    return res;\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.updateRowData = function (rowDataTransaction) {\n    var message = 'ag-Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.';\n\n    _.doOnce(function () {\n      return console.warn(message);\n    }, 'updateRowData deprecated');\n\n    return this.applyTransaction(rowDataTransaction);\n  };\n\n  GridApi.prototype.applyTransactionAsync = function (rowDataTransaction, callback) {\n    if (!this.clientSideRowModel) {\n      console.error('ag-Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');\n      return;\n    }\n\n    this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n    var message = 'ag-Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.';\n\n    _.doOnce(function () {\n      return console.warn(message);\n    }, 'batchUpdateRowData deprecated');\n\n    this.applyTransactionAsync(rowDataTransaction, callback);\n  };\n\n  GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');\n    this.updateRowData({\n      add: items,\n      addIndex: index,\n      update: null,\n      remove: null\n    });\n  };\n\n  GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');\n    var dataToRemove = rowNodes.map(function (rowNode) {\n      return rowNode.data;\n    });\n    this.updateRowData({\n      add: null,\n      addIndex: null,\n      update: null,\n      remove: dataToRemove\n    });\n  };\n\n  GridApi.prototype.addItems = function (items, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');\n    this.updateRowData({\n      add: items,\n      addIndex: null,\n      update: null,\n      remove: null\n    });\n  };\n\n  GridApi.prototype.refreshVirtualPageCache = function () {\n    console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n    this.refreshInfiniteCache();\n  };\n\n  GridApi.prototype.refreshInfinitePageCache = function () {\n    console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n    this.refreshInfiniteCache();\n  };\n\n  GridApi.prototype.refreshInfiniteCache = function () {\n    if (this.infiniteRowModel) {\n      this.infiniteRowModel.refreshCache();\n    } else {\n      console.warn(\"ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.\");\n    }\n  };\n\n  GridApi.prototype.purgeVirtualPageCache = function () {\n    console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n    this.purgeInfinitePageCache();\n  };\n\n  GridApi.prototype.purgeInfinitePageCache = function () {\n    console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n    this.purgeInfiniteCache();\n  };\n\n  GridApi.prototype.purgeInfiniteCache = function () {\n    if (this.infiniteRowModel) {\n      this.infiniteRowModel.purgeCache();\n    } else {\n      console.warn(\"ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.\");\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.purgeEnterpriseCache = function (route) {\n    console.warn(\"ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()\");\n    this.purgeServerSideCache(route);\n  };\n\n  GridApi.prototype.purgeServerSideCache = function (route) {\n    if (this.serverSideRowModel) {\n      this.serverSideRowModel.purgeCache(route);\n    } else {\n      console.warn(\"ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.\");\n    }\n  };\n\n  GridApi.prototype.getVirtualRowCount = function () {\n    console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');\n    return this.getInfiniteRowCount();\n  };\n\n  GridApi.prototype.getInfiniteRowCount = function () {\n    if (this.infiniteRowModel) {\n      return this.infiniteRowModel.getVirtualRowCount();\n    } else {\n      console.warn(\"ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.\");\n    }\n  };\n\n  GridApi.prototype.isMaxRowFound = function () {\n    if (this.infiniteRowModel) {\n      return this.infiniteRowModel.isMaxRowFound();\n    } else {\n      console.warn(\"ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.\");\n    }\n  };\n\n  GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n    console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');\n    this.setInfiniteRowCount(rowCount, maxRowFound);\n  };\n\n  GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {\n    if (this.infiniteRowModel) {\n      this.infiniteRowModel.setVirtualRowCount(rowCount, maxRowFound);\n    } else {\n      console.warn(\"ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.\");\n    }\n  };\n\n  GridApi.prototype.getVirtualPageState = function () {\n    console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n    return this.getCacheBlockState();\n  };\n\n  GridApi.prototype.getInfinitePageState = function () {\n    console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n    return this.getCacheBlockState();\n  };\n\n  GridApi.prototype.getCacheBlockState = function () {\n    if (this.infiniteRowModel) {\n      return this.infiniteRowModel.getBlockState();\n    } else if (this.serverSideRowModel) {\n      return this.serverSideRowModel.getBlockState();\n    } else {\n      console.warn(\"ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.\");\n    }\n  };\n\n  GridApi.prototype.checkGridSize = function () {\n    this.gridPanel.setHeaderAndFloatingHeights();\n  };\n\n  GridApi.prototype.getFirstRenderedRow = function () {\n    console.warn('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');\n    return this.getFirstDisplayedRow();\n  };\n\n  GridApi.prototype.getFirstDisplayedRow = function () {\n    return this.rowRenderer.getFirstVirtualRenderedRow();\n  };\n\n  GridApi.prototype.getLastRenderedRow = function () {\n    console.warn('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');\n    return this.getLastDisplayedRow();\n  };\n\n  GridApi.prototype.getLastDisplayedRow = function () {\n    return this.rowRenderer.getLastVirtualRenderedRow();\n  };\n\n  GridApi.prototype.getDisplayedRowAtIndex = function (index) {\n    return this.rowModel.getRow(index);\n  };\n\n  GridApi.prototype.getDisplayedRowCount = function () {\n    return this.rowModel.getRowCount();\n  };\n\n  GridApi.prototype.paginationIsLastPageFound = function () {\n    return this.paginationProxy.isLastPageFound();\n  };\n\n  GridApi.prototype.paginationGetPageSize = function () {\n    return this.paginationProxy.getPageSize();\n  };\n\n  GridApi.prototype.paginationSetPageSize = function (size) {\n    this.gridOptionsWrapper.setProperty('paginationPageSize', size);\n  };\n\n  GridApi.prototype.paginationGetCurrentPage = function () {\n    return this.paginationProxy.getCurrentPage();\n  };\n\n  GridApi.prototype.paginationGetTotalPages = function () {\n    return this.paginationProxy.getTotalPages();\n  };\n\n  GridApi.prototype.paginationGetRowCount = function () {\n    return this.paginationProxy.getMasterRowCount();\n  };\n\n  GridApi.prototype.paginationGoToNextPage = function () {\n    this.paginationProxy.goToNextPage();\n  };\n\n  GridApi.prototype.paginationGoToPreviousPage = function () {\n    this.paginationProxy.goToPreviousPage();\n  };\n\n  GridApi.prototype.paginationGoToFirstPage = function () {\n    this.paginationProxy.goToFirstPage();\n  };\n\n  GridApi.prototype.paginationGoToLastPage = function () {\n    this.paginationProxy.goToLastPage();\n  };\n\n  GridApi.prototype.paginationGoToPage = function (page) {\n    this.paginationProxy.goToPage(page);\n  };\n\n  __decorate([Optional('immutableService')], GridApi.prototype, \"immutableService\", void 0);\n\n  __decorate([Optional('csvCreator')], GridApi.prototype, \"csvCreator\", void 0);\n\n  __decorate([Optional('excelCreator')], GridApi.prototype, \"excelCreator\", void 0);\n\n  __decorate([Autowired('rowRenderer')], GridApi.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('filterManager')], GridApi.prototype, \"filterManager\", void 0);\n\n  __decorate([Autowired('columnController')], GridApi.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('selectionController')], GridApi.prototype, \"selectionController\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], GridApi.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('valueService')], GridApi.prototype, \"valueService\", void 0);\n\n  __decorate([Autowired('alignedGridsService')], GridApi.prototype, \"alignedGridsService\", void 0);\n\n  __decorate([Autowired('eventService')], GridApi.prototype, \"eventService\", void 0);\n\n  __decorate([Autowired('pinnedRowModel')], GridApi.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([Autowired('context')], GridApi.prototype, \"context\", void 0);\n\n  __decorate([Autowired('rowModel')], GridApi.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('sortController')], GridApi.prototype, \"sortController\", void 0);\n\n  __decorate([Autowired('paginationProxy')], GridApi.prototype, \"paginationProxy\", void 0);\n\n  __decorate([Autowired('focusController')], GridApi.prototype, \"focusController\", void 0);\n\n  __decorate([Autowired('dragAndDropService')], GridApi.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Optional('rangeController')], GridApi.prototype, \"rangeController\", void 0);\n\n  __decorate([Optional('clipboardService')], GridApi.prototype, \"clipboardService\", void 0);\n\n  __decorate([Optional('aggFuncService')], GridApi.prototype, \"aggFuncService\", void 0);\n\n  __decorate([Autowired('menuFactory')], GridApi.prototype, \"menuFactory\", void 0);\n\n  __decorate([Optional('contextMenuFactory')], GridApi.prototype, \"contextMenuFactory\", void 0);\n\n  __decorate([Autowired('cellRendererFactory')], GridApi.prototype, \"cellRendererFactory\", void 0);\n\n  __decorate([Autowired('valueCache')], GridApi.prototype, \"valueCache\", void 0);\n\n  __decorate([Autowired('animationFrameService')], GridApi.prototype, \"animationFrameService\", void 0);\n\n  __decorate([Optional('statusBarService')], GridApi.prototype, \"statusBarService\", void 0);\n\n  __decorate([Optional('chartService')], GridApi.prototype, \"chartService\", void 0);\n\n  __decorate([Optional('undoRedoService')], GridApi.prototype, \"undoRedoService\", void 0);\n\n  __decorate([PostConstruct], GridApi.prototype, \"init\", null);\n\n  GridApi = __decorate([Bean('gridApi')], GridApi);\n  return GridApi;\n}();\n\nexport { GridApi };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/gridApi.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","GridOptionsWrapper","Constants","Autowired","Bean","Optional","PostConstruct","ModuleNames","ModuleRegistry","_","GridApi","detailGridInfoMap","destroyCalled","prototype","registerGridComp","gridPanel","registerGridCore","gridCore","registerHeaderRootComp","headerRootComp","init","rowModel","getType","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","ROW_MODEL_TYPE_INFINITE","infiniteRowModel","ROW_MODEL_TYPE_SERVER_SIDE","serverSideRowModel","__getAlignedGridService","alignedGridsService","addDetailGridInfo","id","gridInfo","removeDetailGridInfo","undefined","getDetailGridInfo","forEachDetailGridInfo","callback","index","iterateObject","exists","getDataAsCsv","params","assertRegistered","CsvExportModule","csvCreator","exportDataAsCsv","getDataAsExcel","ExcelExportModule","excelCreator","getDataAsExcelXml","exportDataAsExcel","setEnterpriseDatasource","datasource","console","warn","setServerSideDatasource","gridOptionsWrapper","isRowModelServerSide","setDatasource","isRowModelInfinite","setViewportDatasource","viewportDatasource","isRowModelViewport","ROW_MODEL_TYPE_VIEWPORT","setRowData","rowData","isRowModelDefault","isImmutableData","res","immutableService","createTransactionForRowData","transaction","orderIdMap","updateRowData","rowRenderer","refreshFullWidthRows","selectionController","reset","setFloatingTopRowData","rows","setPinnedTopRowData","setFloatingBottomRowData","setPinnedBottomRowData","getFloatingTopRowCount","getPinnedTopRowCount","getFloatingBottomRowCount","getPinnedBottomRowCount","getFloatingTopRow","getPinnedTopRow","getFloatingBottomRow","getPinnedBottomRow","pinnedRowModel","setColumnDefs","colDefs","source","columnController","setAutoGroupColumnDef","colDef","setProperty","expireValueCache","valueCache","expire","getVerticalPixelRange","getVScrollPosition","getHorizontalPixelRange","getHScrollPosition","setAlwaysShowVerticalScroll","show","refreshToolPanel","refreshSideBar","refreshCells","Array","isArray","flashCells","redrawRows","rowNodes","redrawAfterModelUpdate","timeFullRedraw","count","iterationCount","totalProcessing","totalReflow","that","doOneIteration","start","Date","getTime","endProcessing","window","setTimeout","endReflow","durationProcessing","durationReflow","log","finish","refreshView","refreshRows","rowDataChanged","softRefreshView","error","refreshGroupRows","setFunctionsReadOnly","readOnly","refreshHeader","setHeaderAndFloatingHeights","isAnyFilterPresent","filterManager","isAdvancedFilterPresent","isColumnFilterPresent","isQuickFilterPresent","getModel","setRowNodeExpanded","rowNode","expanded","setExpanded","onGroupExpandedOrCollapsed","deprecated_refreshFromIndex","missing","refreshModel","step","STEP_MAP","refreshInMemoryRowModel","refreshClientSideRowModel","paramsStep","STEP_EVERYTHING","stepsMapped","group","filter","STEP_FILTER","map","aggregate","STEP_AGGREGATE","sort","STEP_SORT","pivot","STEP_PIVOT","keys","join","modelParams","keepRenderedRows","animate","keepEditingRows","isAnimationFrameQueueEmpty","animationFrameService","isQueueEmpty","getRowNode","getSizesForCurrentTheme","rowHeight","getRowHeightAsNumber","headerHeight","getHeaderHeight","expandAll","expandOrCollapseAll","collapseAll","getToolPanelInstance","addVirtualRowListener","eventName","rowIndex","addRenderedRowListener","setQuickFilter","newFilter","selectIndex","tryMulti","suppressEvents","deselectIndex","selectNode","node","setSelectedParams","newValue","clearSelection","deselectNode","selectAll","selectAllRowNodes","deselectAll","deselectAllRowNodes","selectAllFiltered","deselectAllFiltered","recomputeAggregates","sizeColumnsToFit","showLoadingOverlay","showNoRowsOverlay","hideOverlay","isNodeSelected","isSelected","getSelectedNodesById","getSelectedNodes","getSelectedRows","getBestCostNodeSelection","getRenderedNodes","ensureColIndexVisible","ensureColumnVisible","ensureIndexVisible","position","ensureNodeVisible","comparator","forEachLeafNode","forEachNode","forEachNodeAfterFilter","forEachNodeAfterFilterAndSort","getFilterApiForColDef","getFilterInstance","column","getPrimaryColumn","filterPromise","getFilterComponent","currentValue","resolveNow","filterComp","then","getFilterApi","destroyFilter","getStatusPanel","statusBarService","getColumnDef","getColDef","onFilterChanged","onSortChanged","sortController","setSortModel","sortModel","getSortModel","setFilterModel","model","getFilterModel","getFocusedCell","focusController","clearFocusedCell","setFocusedCell","colKey","floating","setSuppressRowDrag","value","PROP_SUPPRESS_ROW_DRAG","setSuppressMoveWhenRowDragging","PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG","setSuppressRowClickSelection","PROP_SUPPRESS_ROW_CLICK_SELECTION","addRowDropZone","getRowDragFeature","removeRowDropZone","activeDropTarget","dragAndDropService","findExternalZone","removeDropTarget","getRowDropZoneParams","events","getRowDropZone","setHeaderHeight","PROP_HEADER_HEIGHT","doLayout","setGridAutoHeight","gridAutoHeight","setDomLayout","domLayout","PROP_DOM_LAYOUT","setEnableCellTextSelection","selectable","setCellTextSelection","setGroupHeaderHeight","PROP_GROUP_HEADER_HEIGHT","setFloatingFiltersHeight","PROP_FLOATING_FILTERS_HEIGHT","setPivotGroupHeaderHeight","PROP_PIVOT_GROUP_HEADER_HEIGHT","setPivotHeaderHeight","PROP_PIVOT_HEADER_HEIGHT","isSideBarVisible","setSideBarVisible","setSideBarPosition","showToolPanel","openToolPanel","closeToolPanel","getOpenedToolPanel","getSideBar","setSideBar","def","setSuppressClipboardPaste","PROP_SUPPRESS_CLIPBOARD_PASTE","isToolPanelShowing","checkViewportAndScrolls","resetRowHeights","setGroupRemoveSingleChildren","PROP_GROUP_REMOVE_SINGLE_CHILDREN","setGroupRemoveLowestSingleChildren","PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN","onRowHeightChanged","getValue","getGridColumn","valueService","addEventListener","eventType","listener","async","useAsyncEvents","eventService","addGlobalListener","removeEventListener","removeGlobalListener","dispatchEvent","event","destroy","context","destroyBean","resetQuickFilter","quickFilterAggregateText","getRangeSelections","getCellRanges","rangeController","camelCaseToHumanReadable","camelCase","camelCaseToHumanText","addRangeSelection","deprecatedNoLongerUsed","addCellRange","clearRangeSelection","removeAllCellRanges","undoCellEditing","undoRedoService","undo","redoCellEditing","redo","getChartModels","RangeSelectionModule","GridChartsModule","chartService","createRangeChart","createPivotChart","copySelectedRowsToClipboard","includeHeader","columnKeys","clipboardService","copySelectedRangeToClipboard","copySelectedRangeDown","copyRangeDown","showColumnMenuAfterButtonClick","buttonElement","menuFactory","showMenuAfterButtonClick","showColumnMenuAfterMouseClick","mouseEvent","showMenuAfterMouseEvent","hidePopupMenu","contextMenuFactory","hideActiveMenu","setPopupParent","ePopupParent","PROP_POPUP_PARENT","tabToNextCell","tabToPreviousCell","getCellRendererInstances","getCellEditorInstances","getEditingCells","stopEditing","cancel","startEditingCell","cellPosition","rowPinned","notPinned","keyPress","charPress","addAggFunc","aggFunc","aggFuncService","addAggFuncs","aggFuncs","clearAggFuncs","clear","applyTransaction","rowDataTransaction","addIndex","message_1","doOnce","message_2","isSuppressChangeDetection","message","applyTransactionAsync","batchUpdateRowData","insertItemsAtIndex","items","skipRefresh","add","update","remove","removeItems","dataToRemove","data","addItems","refreshVirtualPageCache","refreshInfiniteCache","refreshInfinitePageCache","refreshCache","purgeVirtualPageCache","purgeInfinitePageCache","purgeInfiniteCache","purgeCache","purgeEnterpriseCache","route","purgeServerSideCache","getVirtualRowCount","getInfiniteRowCount","isMaxRowFound","setVirtualRowCount","rowCount","maxRowFound","setInfiniteRowCount","getVirtualPageState","getCacheBlockState","getInfinitePageState","getBlockState","checkGridSize","getFirstRenderedRow","getFirstDisplayedRow","getFirstVirtualRenderedRow","getLastRenderedRow","getLastDisplayedRow","getLastVirtualRenderedRow","getDisplayedRowAtIndex","getRow","getDisplayedRowCount","getRowCount","paginationIsLastPageFound","paginationProxy","isLastPageFound","paginationGetPageSize","getPageSize","paginationSetPageSize","size","paginationGetCurrentPage","getCurrentPage","paginationGetTotalPages","getTotalPages","paginationGetRowCount","getMasterRowCount","paginationGoToNextPage","goToNextPage","paginationGoToPreviousPage","goToPreviousPage","paginationGoToFirstPage","goToFirstPage","paginationGoToLastPage","goToLastPage","paginationGoToPage","page","goToPage"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { Constants } from \"./constants\";\nimport { Autowired, Bean, Optional, PostConstruct } from \"./context/context\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { _ } from \"./utils\";\nvar GridApi = /** @class */ (function () {\n    function GridApi() {\n        this.detailGridInfoMap = {};\n        this.destroyCalled = false;\n    }\n    GridApi.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    GridApi.prototype.registerGridCore = function (gridCore) {\n        this.gridCore = gridCore;\n    };\n    GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {\n        this.headerRootComp = headerRootComp;\n    };\n    GridApi.prototype.init = function () {\n        switch (this.rowModel.getType()) {\n            case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:\n                this.clientSideRowModel = this.rowModel;\n                break;\n            case Constants.ROW_MODEL_TYPE_INFINITE:\n                this.infiniteRowModel = this.rowModel;\n                break;\n            case Constants.ROW_MODEL_TYPE_SERVER_SIDE:\n                this.serverSideRowModel = this.rowModel;\n                break;\n        }\n    };\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    GridApi.prototype.__getAlignedGridService = function () {\n        return this.alignedGridsService;\n    };\n    GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {\n        this.detailGridInfoMap[id] = gridInfo;\n    };\n    GridApi.prototype.removeDetailGridInfo = function (id) {\n        this.detailGridInfoMap[id] = undefined;\n    };\n    GridApi.prototype.getDetailGridInfo = function (id) {\n        return this.detailGridInfoMap[id];\n    };\n    GridApi.prototype.forEachDetailGridInfo = function (callback) {\n        var index = 0;\n        _.iterateObject(this.detailGridInfoMap, function (id, gridInfo) {\n            // check for undefined, as old references will still be lying around\n            if (_.exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    };\n    GridApi.prototype.getDataAsCsv = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.getDataAsCsv')) {\n            return this.csvCreator.getDataAsCsv(params);\n        }\n    };\n    GridApi.prototype.exportDataAsCsv = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.exportDataAsCSv')) {\n            this.csvCreator.exportDataAsCsv(params);\n        }\n    };\n    GridApi.prototype.getDataAsExcel = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getDataAsExcel')) {\n            return this.excelCreator.getDataAsExcelXml(params);\n        }\n    };\n    GridApi.prototype.exportDataAsExcel = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportDataAsExcel')) {\n            this.excelCreator.exportDataAsExcel(params);\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.setEnterpriseDatasource = function (datasource) {\n        console.warn(\"ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()\");\n        this.setServerSideDatasource(datasource);\n    };\n    GridApi.prototype.setServerSideDatasource = function (datasource) {\n        if (this.gridOptionsWrapper.isRowModelServerSide()) {\n            // should really have an IEnterpriseRowModel interface, so we are not casting to any\n            this.rowModel.setDatasource(datasource);\n        }\n        else {\n            console.warn(\"ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + \"'\");\n        }\n    };\n    GridApi.prototype.setDatasource = function (datasource) {\n        if (this.gridOptionsWrapper.isRowModelInfinite()) {\n            this.rowModel.setDatasource(datasource);\n        }\n        else {\n            console.warn(\"ag-Grid: you can only use a datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_INFINITE + \"'\");\n        }\n    };\n    GridApi.prototype.setViewportDatasource = function (viewportDatasource) {\n        if (this.gridOptionsWrapper.isRowModelViewport()) {\n            // this is bad coding, because it's using an interface that's exposed in the enterprise.\n            // really we should create an interface in the core for viewportDatasource and let\n            // the enterprise implement it, rather than casting to 'any' here\n            this.rowModel.setViewportDatasource(viewportDatasource);\n        }\n        else {\n            console.warn(\"ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_VIEWPORT + \"'\");\n        }\n    };\n    GridApi.prototype.setRowData = function (rowData) {\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            if (this.gridOptionsWrapper.isImmutableData()) {\n                var res = this.immutableService.createTransactionForRowData(rowData);\n                if (!res) {\n                    return;\n                }\n                var transaction = res[0], orderIdMap = res[1];\n                this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n                // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened\n                // to the data change event on the row node and refreshed itself.\n                this.rowRenderer.refreshFullWidthRows();\n            }\n            else {\n                this.selectionController.reset();\n                this.clientSideRowModel.setRowData(rowData);\n            }\n        }\n        else {\n            console.warn('cannot call setRowData unless using normal row model');\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.setFloatingTopRowData = function (rows) {\n        console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');\n        this.setPinnedTopRowData(rows);\n    };\n    /** @deprecated */\n    GridApi.prototype.setFloatingBottomRowData = function (rows) {\n        console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');\n        this.setPinnedBottomRowData(rows);\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingTopRowCount = function () {\n        console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');\n        return this.getPinnedTopRowCount();\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingBottomRowCount = function () {\n        console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');\n        return this.getPinnedBottomRowCount();\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingTopRow = function (index) {\n        console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');\n        return this.getPinnedTopRow(index);\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingBottomRow = function (index) {\n        console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');\n        return this.getPinnedBottomRow(index);\n    };\n    GridApi.prototype.setPinnedTopRowData = function (rows) {\n        this.pinnedRowModel.setPinnedTopRowData(rows);\n    };\n    GridApi.prototype.setPinnedBottomRowData = function (rows) {\n        this.pinnedRowModel.setPinnedBottomRowData(rows);\n    };\n    GridApi.prototype.getPinnedTopRowCount = function () {\n        return this.pinnedRowModel.getPinnedTopRowCount();\n    };\n    GridApi.prototype.getPinnedBottomRowCount = function () {\n        return this.pinnedRowModel.getPinnedBottomRowCount();\n    };\n    GridApi.prototype.getPinnedTopRow = function (index) {\n        return this.pinnedRowModel.getPinnedTopRow(index);\n    };\n    GridApi.prototype.getPinnedBottomRow = function (index) {\n        return this.pinnedRowModel.getPinnedBottomRow(index);\n    };\n    GridApi.prototype.setColumnDefs = function (colDefs, source) {\n        if (source === void 0) { source = \"api\"; }\n        this.columnController.setColumnDefs(colDefs, source);\n    };\n    GridApi.prototype.setAutoGroupColumnDef = function (colDef, source) {\n        if (source === void 0) { source = \"api\"; }\n        this.gridOptionsWrapper.setProperty('autoGroupColumnDef', colDef, true);\n    };\n    GridApi.prototype.expireValueCache = function () {\n        this.valueCache.expire();\n    };\n    GridApi.prototype.getVerticalPixelRange = function () {\n        return this.gridPanel.getVScrollPosition();\n    };\n    GridApi.prototype.getHorizontalPixelRange = function () {\n        return this.gridPanel.getHScrollPosition();\n    };\n    GridApi.prototype.setAlwaysShowVerticalScroll = function (show) {\n        this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);\n    };\n    GridApi.prototype.refreshToolPanel = function () {\n        this.gridCore.refreshSideBar();\n    };\n    GridApi.prototype.refreshCells = function (params) {\n        if (params === void 0) { params = {}; }\n        if (Array.isArray(params)) {\n            // the old version of refreshCells() took an array of rowNodes for the first argument\n            console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');\n            return;\n        }\n        this.rowRenderer.refreshCells(params);\n    };\n    GridApi.prototype.flashCells = function (params) {\n        if (params === void 0) { params = {}; }\n        this.rowRenderer.flashCells(params);\n    };\n    GridApi.prototype.redrawRows = function (params) {\n        if (params === void 0) { params = {}; }\n        if (params && params.rowNodes) {\n            this.rowRenderer.redrawRows(params.rowNodes);\n        }\n        else {\n            this.rowRenderer.redrawAfterModelUpdate();\n        }\n    };\n    GridApi.prototype.timeFullRedraw = function (count) {\n        if (count === void 0) { count = 1; }\n        var iterationCount = 0;\n        var totalProcessing = 0;\n        var totalReflow = 0;\n        var that = this;\n        doOneIteration();\n        function doOneIteration() {\n            var start = (new Date()).getTime();\n            that.rowRenderer.redrawAfterModelUpdate();\n            var endProcessing = (new Date()).getTime();\n            window.setTimeout(function () {\n                var endReflow = (new Date()).getTime();\n                var durationProcessing = endProcessing - start;\n                var durationReflow = endReflow - endProcessing;\n                // tslint:disable-next-line\n                console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');\n                iterationCount++;\n                totalProcessing += durationProcessing;\n                totalReflow += durationReflow;\n                if (iterationCount < count) {\n                    // wait for 1s between tests\n                    window.setTimeout(doOneIteration, 1000);\n                }\n                else {\n                    finish();\n                }\n            }, 0);\n        }\n        function finish() {\n            // tslint:disable-next-line\n            console.log('tests complete. iteration count = ' + iterationCount);\n            // tslint:disable-next-line\n            console.log('average processing = ' + (totalProcessing / iterationCount) + 'ms');\n            // tslint:disable-next-line\n            console.log('average reflow = ' + (totalReflow / iterationCount) + 'ms');\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.refreshView = function () {\n        console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');\n        this.redrawRows();\n    };\n    /** @deprecated */\n    GridApi.prototype.refreshRows = function (rowNodes) {\n        console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');\n        this.refreshCells({ rowNodes: rowNodes });\n    };\n    /** @deprecated */\n    GridApi.prototype.rowDataChanged = function (rows) {\n        console.warn('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');\n        this.redrawRows();\n    };\n    /** @deprecated */\n    GridApi.prototype.softRefreshView = function () {\n        console.error('ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');\n    };\n    /** @deprecated */\n    GridApi.prototype.refreshGroupRows = function () {\n        console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' +\n            'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' +\n            'not be necessary to only refresh the group rows.');\n        this.refreshCells();\n    };\n    GridApi.prototype.setFunctionsReadOnly = function (readOnly) {\n        this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);\n    };\n    GridApi.prototype.refreshHeader = function () {\n        this.headerRootComp.refreshHeader();\n        this.gridPanel.setHeaderAndFloatingHeights();\n    };\n    GridApi.prototype.isAnyFilterPresent = function () {\n        return this.filterManager.isAnyFilterPresent();\n    };\n    /** @deprecated */\n    GridApi.prototype.isAdvancedFilterPresent = function () {\n        console.warn('ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');\n        return this.isColumnFilterPresent();\n    };\n    GridApi.prototype.isColumnFilterPresent = function () {\n        return this.filterManager.isAdvancedFilterPresent();\n    };\n    GridApi.prototype.isQuickFilterPresent = function () {\n        return this.filterManager.isQuickFilterPresent();\n    };\n    GridApi.prototype.getModel = function () {\n        return this.rowModel;\n    };\n    GridApi.prototype.setRowNodeExpanded = function (rowNode, expanded) {\n        if (rowNode) {\n            rowNode.setExpanded(expanded);\n        }\n    };\n    GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');\n        }\n        if (_.exists(deprecated_refreshFromIndex)) {\n            console.warn('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');\n        }\n        // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n        this.clientSideRowModel.refreshModel({ step: Constants.STEP_MAP });\n    };\n    GridApi.prototype.refreshInMemoryRowModel = function (step) {\n        console.warn(\"ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()\");\n        this.refreshClientSideRowModel(step);\n    };\n    GridApi.prototype.refreshClientSideRowModel = function (step) {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('cannot call refreshClientSideRowModel unless using normal row model');\n        }\n        var paramsStep = Constants.STEP_EVERYTHING;\n        var stepsMapped = {\n            group: Constants.STEP_EVERYTHING,\n            filter: Constants.STEP_FILTER,\n            map: Constants.STEP_MAP,\n            aggregate: Constants.STEP_AGGREGATE,\n            sort: Constants.STEP_SORT,\n            pivot: Constants.STEP_PIVOT\n        };\n        if (_.exists(step)) {\n            paramsStep = stepsMapped[step];\n        }\n        if (_.missing(paramsStep)) {\n            console.error(\"ag-Grid: invalid step \" + step + \", available steps are \" + Object.keys(stepsMapped).join(', '));\n            return;\n        }\n        var modelParams = {\n            step: paramsStep,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        };\n        this.clientSideRowModel.refreshModel(modelParams);\n    };\n    GridApi.prototype.isAnimationFrameQueueEmpty = function () {\n        return this.animationFrameService.isQueueEmpty();\n    };\n    GridApi.prototype.getRowNode = function (id) {\n        return this.rowModel.getRowNode(id);\n    };\n    GridApi.prototype.getSizesForCurrentTheme = function () {\n        return {\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            headerHeight: this.gridOptionsWrapper.getHeaderHeight()\n        };\n    };\n    GridApi.prototype.expandAll = function () {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('ag-Grid: cannot call expandAll unless using normal row model');\n            return;\n        }\n        this.clientSideRowModel.expandOrCollapseAll(true);\n    };\n    GridApi.prototype.collapseAll = function () {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('ag-Grid: cannot call collapseAll unless using normal row model');\n            return;\n        }\n        this.clientSideRowModel.expandOrCollapseAll(false);\n    };\n    GridApi.prototype.getToolPanelInstance = function (id) {\n        return this.gridCore.getToolPanelInstance(id);\n    };\n    GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {\n        if (typeof eventName !== 'string') {\n            console.warn('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');\n        }\n        this.addRenderedRowListener(eventName, rowIndex, callback);\n    };\n    GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {\n        if (eventName === 'virtualRowSelected') {\n            console.warn(\"ag-Grid: event virtualRowSelected is deprecated, to register for individual row\\n                selection events, add a listener directly to the row node.\");\n        }\n        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n    };\n    GridApi.prototype.setQuickFilter = function (newFilter) {\n        this.filterManager.setQuickFilter(newFilter);\n    };\n    GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {\n        console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionController.selectIndex(index, tryMulti);\n    };\n    GridApi.prototype.deselectIndex = function (index, suppressEvents) {\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionController.deselectIndex(index);\n    };\n    GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {\n        if (tryMulti === void 0) { tryMulti = false; }\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n    };\n    GridApi.prototype.deselectNode = function (node, suppressEvents) {\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: false });\n    };\n    GridApi.prototype.selectAll = function () {\n        this.selectionController.selectAllRowNodes();\n    };\n    GridApi.prototype.deselectAll = function () {\n        this.selectionController.deselectAllRowNodes();\n    };\n    GridApi.prototype.selectAllFiltered = function () {\n        this.selectionController.selectAllRowNodes(true);\n    };\n    GridApi.prototype.deselectAllFiltered = function () {\n        this.selectionController.deselectAllRowNodes(true);\n    };\n    GridApi.prototype.recomputeAggregates = function () {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('cannot call recomputeAggregates unless using normal row model');\n        }\n        console.warn(\"recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead\");\n        this.clientSideRowModel.refreshModel({ step: Constants.STEP_AGGREGATE });\n    };\n    GridApi.prototype.sizeColumnsToFit = function () {\n        this.gridPanel.sizeColumnsToFit();\n    };\n    GridApi.prototype.showLoadingOverlay = function () {\n        this.gridPanel.showLoadingOverlay();\n    };\n    GridApi.prototype.showNoRowsOverlay = function () {\n        this.gridPanel.showNoRowsOverlay();\n    };\n    GridApi.prototype.hideOverlay = function () {\n        this.gridPanel.hideOverlay();\n    };\n    GridApi.prototype.isNodeSelected = function (node) {\n        console.warn('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');\n        return node.isSelected();\n    };\n    GridApi.prototype.getSelectedNodesById = function () {\n        console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');\n        return null;\n    };\n    GridApi.prototype.getSelectedNodes = function () {\n        return this.selectionController.getSelectedNodes();\n    };\n    GridApi.prototype.getSelectedRows = function () {\n        return this.selectionController.getSelectedRows();\n    };\n    GridApi.prototype.getBestCostNodeSelection = function () {\n        return this.selectionController.getBestCostNodeSelection();\n    };\n    GridApi.prototype.getRenderedNodes = function () {\n        return this.rowRenderer.getRenderedNodes();\n    };\n    GridApi.prototype.ensureColIndexVisible = function (index) {\n        console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');\n    };\n    GridApi.prototype.ensureColumnVisible = function (key) {\n        this.gridPanel.ensureColumnVisible(key);\n    };\n    // Valid values for position are bottom, middle and top\n    GridApi.prototype.ensureIndexVisible = function (index, position) {\n        this.gridPanel.ensureIndexVisible(index, position);\n    };\n    // Valid values for position are bottom, middle and top\n    GridApi.prototype.ensureNodeVisible = function (comparator, position) {\n        this.gridCore.ensureNodeVisible(comparator, position);\n    };\n    GridApi.prototype.forEachLeafNode = function (callback) {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNode unless using normal row model');\n        }\n        this.clientSideRowModel.forEachLeafNode(callback);\n    };\n    GridApi.prototype.forEachNode = function (callback) {\n        this.rowModel.forEachNode(callback);\n    };\n    GridApi.prototype.forEachNodeAfterFilter = function (callback) {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNodeAfterFilter unless using normal row model');\n        }\n        this.clientSideRowModel.forEachNodeAfterFilter(callback);\n    };\n    GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model');\n        }\n        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n    };\n    GridApi.prototype.getFilterApiForColDef = function (colDef) {\n        console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterInstance instead');\n        return this.getFilterInstance(colDef);\n    };\n    GridApi.prototype.getFilterInstance = function (key, callback) {\n        var column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            var filterPromise = this.filterManager.getFilterComponent(column, 'NO_UI');\n            var currentValue = filterPromise.resolveNow(null, function (filterComp) { return filterComp; });\n            if (callback) {\n                if (currentValue) {\n                    setTimeout(callback, 0, currentValue);\n                }\n                else {\n                    filterPromise.then(callback);\n                }\n            }\n            return currentValue;\n        }\n    };\n    GridApi.prototype.getFilterApi = function (key) {\n        console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');\n        return this.getFilterInstance(key);\n    };\n    GridApi.prototype.destroyFilter = function (key) {\n        var column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.destroyFilter(column, \"filterDestroyed\");\n        }\n    };\n    GridApi.prototype.getStatusPanel = function (key) {\n        if (this.statusBarService) {\n            return this.statusBarService.getStatusPanel(key);\n        }\n    };\n    GridApi.prototype.getColumnDef = function (key) {\n        var column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            return column.getColDef();\n        }\n        return null;\n    };\n    GridApi.prototype.onFilterChanged = function () {\n        this.filterManager.onFilterChanged();\n    };\n    GridApi.prototype.onSortChanged = function () {\n        this.sortController.onSortChanged();\n    };\n    GridApi.prototype.setSortModel = function (sortModel, source) {\n        if (source === void 0) { source = \"api\"; }\n        this.sortController.setSortModel(sortModel, source);\n    };\n    GridApi.prototype.getSortModel = function () {\n        return this.sortController.getSortModel();\n    };\n    GridApi.prototype.setFilterModel = function (model) {\n        this.filterManager.setFilterModel(model);\n    };\n    GridApi.prototype.getFilterModel = function () {\n        return this.filterManager.getFilterModel();\n    };\n    GridApi.prototype.getFocusedCell = function () {\n        return this.focusController.getFocusedCell();\n    };\n    GridApi.prototype.clearFocusedCell = function () {\n        return this.focusController.clearFocusedCell();\n    };\n    GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {\n        this.focusController.setFocusedCell(rowIndex, colKey, floating, true);\n    };\n    GridApi.prototype.setSuppressRowDrag = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);\n    };\n    GridApi.prototype.setSuppressMoveWhenRowDragging = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);\n    };\n    GridApi.prototype.setSuppressRowClickSelection = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);\n    };\n    GridApi.prototype.addRowDropZone = function (params) {\n        this.gridPanel.getRowDragFeature().addRowDropZone(params);\n    };\n    GridApi.prototype.removeRowDropZone = function (params) {\n        var activeDropTarget = this.dragAndDropService.findExternalZone(params);\n        if (activeDropTarget) {\n            this.dragAndDropService.removeDropTarget(activeDropTarget);\n        }\n    };\n    GridApi.prototype.getRowDropZoneParams = function (events) {\n        return this.gridPanel.getRowDragFeature().getRowDropZone(events);\n    };\n    GridApi.prototype.setHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.setGridAutoHeight = function (gridAutoHeight) {\n        console.warn('api.setGridAutoHeight(boolean) is deprecated, please use api.setDomLayout() instead');\n        this.setDomLayout(gridAutoHeight ? 'autoHeight' : 'normal');\n    };\n    GridApi.prototype.setDomLayout = function (domLayout) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);\n    };\n    GridApi.prototype.setEnableCellTextSelection = function (selectable) {\n        this.gridPanel.setCellTextSelection(selectable);\n    };\n    GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    };\n    GridApi.prototype.isSideBarVisible = function () {\n        return this.gridCore.isSideBarVisible();\n    };\n    GridApi.prototype.setSideBarVisible = function (show) {\n        this.gridCore.setSideBarVisible(show);\n    };\n    GridApi.prototype.setSideBarPosition = function (position) {\n        this.gridCore.setSideBarPosition(position);\n    };\n    GridApi.prototype.showToolPanel = function (show) {\n        console.warn(\"ag-grid: from v19 api.showToolPanel has been deprecated in favour of api.setSideBarVisible\");\n        this.setSideBarVisible(show);\n    };\n    GridApi.prototype.openToolPanel = function (key) {\n        this.gridCore.openToolPanel(key);\n    };\n    GridApi.prototype.closeToolPanel = function () {\n        this.gridCore.closeToolPanel();\n    };\n    GridApi.prototype.getOpenedToolPanel = function () {\n        return this.gridCore.getOpenedToolPanel();\n    };\n    GridApi.prototype.getSideBar = function () {\n        return this.gridCore.getSideBar();\n    };\n    GridApi.prototype.setSideBar = function (def) {\n        return this.gridCore.setSideBar(def);\n    };\n    GridApi.prototype.setSuppressClipboardPaste = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);\n    };\n    GridApi.prototype.isToolPanelShowing = function () {\n        return this.gridCore.isToolPanelShowing();\n    };\n    GridApi.prototype.doLayout = function () {\n        this.gridPanel.checkViewportAndScrolls();\n    };\n    GridApi.prototype.resetRowHeights = function () {\n        if (_.exists(this.clientSideRowModel)) {\n            this.clientSideRowModel.resetRowHeights();\n        }\n    };\n    GridApi.prototype.setGroupRemoveSingleChildren = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);\n    };\n    GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);\n    };\n    GridApi.prototype.onRowHeightChanged = function () {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.onRowHeightChanged();\n        }\n        else if (this.serverSideRowModel) {\n            this.serverSideRowModel.onRowHeightChanged();\n        }\n    };\n    GridApi.prototype.getValue = function (colKey, rowNode) {\n        var column = this.columnController.getPrimaryColumn(colKey);\n        if (_.missing(column)) {\n            column = this.columnController.getGridColumn(colKey);\n        }\n        if (_.missing(column)) {\n            return null;\n        }\n        return this.valueService.getValue(column, rowNode);\n    };\n    GridApi.prototype.addEventListener = function (eventType, listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addEventListener(eventType, listener, async);\n    };\n    GridApi.prototype.addGlobalListener = function (listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addGlobalListener(listener, async);\n    };\n    GridApi.prototype.removeEventListener = function (eventType, listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeEventListener(eventType, listener, async);\n    };\n    GridApi.prototype.removeGlobalListener = function (listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeGlobalListener(listener, async);\n    };\n    GridApi.prototype.dispatchEvent = function (event) {\n        this.eventService.dispatchEvent(event);\n    };\n    GridApi.prototype.destroy = function () {\n        // this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part\n        // of context.destroy(). so we need to stop the infinite loop.\n        if (this.destroyCalled) {\n            return;\n        }\n        this.destroyCalled = true;\n        // destroy the UI first (as they use the services)\n        this.context.destroyBean(this.gridCore);\n        // destroy the services\n        this.context.destroy();\n    };\n    GridApi.prototype.resetQuickFilter = function () {\n        this.rowModel.forEachNode(function (node) { return node.quickFilterAggregateText = null; });\n    };\n    GridApi.prototype.getRangeSelections = function () {\n        console.warn(\"ag-Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\\n        getCellRanges() is a bit different, please check the ag-Grid documentation.\");\n        return null;\n    };\n    GridApi.prototype.getCellRanges = function () {\n        if (this.rangeController) {\n            return this.rangeController.getCellRanges();\n        }\n        console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n        return null;\n    };\n    GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {\n        return _.camelCaseToHumanText(camelCase);\n    };\n    GridApi.prototype.addRangeSelection = function (deprecatedNoLongerUsed) {\n        console.warn('ag-Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');\n    };\n    GridApi.prototype.addCellRange = function (params) {\n        if (!this.rangeController) {\n            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n        }\n        this.rangeController.addCellRange(params);\n    };\n    GridApi.prototype.clearRangeSelection = function () {\n        if (!this.rangeController) {\n            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n        }\n        this.rangeController.removeAllCellRanges();\n    };\n    GridApi.prototype.undoCellEditing = function () {\n        this.undoRedoService.undo();\n    };\n    GridApi.prototype.redoCellEditing = function () {\n        this.undoRedoService.redo();\n    };\n    GridApi.prototype.getChartModels = function () {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartModels') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartModels')) {\n            return this.chartService.getChartModels();\n        }\n    };\n    GridApi.prototype.createRangeChart = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createRangeChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createRangeChart')) {\n            return this.chartService.createRangeChart(params);\n        }\n    };\n    GridApi.prototype.createPivotChart = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createPivotChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createPivotChart')) {\n            return this.chartService.createPivotChart(params);\n        }\n    };\n    GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {\n        if (!this.clipboardService) {\n            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n        }\n        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);\n    };\n    GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {\n        if (!this.clipboardService) {\n            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n        }\n        this.clipboardService.copySelectedRangeToClipboard(includeHeader);\n    };\n    GridApi.prototype.copySelectedRangeDown = function () {\n        if (!this.clipboardService) {\n            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');\n        }\n        this.clipboardService.copyRangeDown();\n    };\n    GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {\n        // use grid column so works with pivot mode\n        var column = this.columnController.getGridColumn(colKey);\n        this.menuFactory.showMenuAfterButtonClick(column, buttonElement);\n    };\n    GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {\n        // use grid column so works with pivot mode\n        var column = this.columnController.getGridColumn(colKey);\n        if (!column) {\n            column = this.columnController.getPrimaryColumn(colKey);\n        }\n        if (!column) {\n            console.error(\"ag-Grid: column '\" + colKey + \"' not found\");\n            return;\n        }\n        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n    };\n    GridApi.prototype.hidePopupMenu = function () {\n        // hide the context menu if in enterprise\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.hideActiveMenu();\n        }\n        // and hide the column menu always\n        this.menuFactory.hideActiveMenu();\n    };\n    GridApi.prototype.setPopupParent = function (ePopupParent) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);\n    };\n    GridApi.prototype.tabToNextCell = function () {\n        return this.rowRenderer.tabToNextCell(false);\n    };\n    GridApi.prototype.tabToPreviousCell = function () {\n        return this.rowRenderer.tabToNextCell(true);\n    };\n    GridApi.prototype.getCellRendererInstances = function (params) {\n        if (params === void 0) { params = {}; }\n        return this.rowRenderer.getCellRendererInstances(params);\n    };\n    GridApi.prototype.getCellEditorInstances = function (params) {\n        if (params === void 0) { params = {}; }\n        return this.rowRenderer.getCellEditorInstances(params);\n    };\n    GridApi.prototype.getEditingCells = function () {\n        return this.rowRenderer.getEditingCells();\n    };\n    GridApi.prototype.stopEditing = function (cancel) {\n        if (cancel === void 0) { cancel = false; }\n        this.rowRenderer.stopEditing(cancel);\n    };\n    GridApi.prototype.startEditingCell = function (params) {\n        var column = this.columnController.getGridColumn(params.colKey);\n        if (!column) {\n            console.warn(\"ag-Grid: no column found for \" + params.colKey);\n            return;\n        }\n        var cellPosition = {\n            rowIndex: params.rowIndex,\n            rowPinned: params.rowPinned,\n            column: column\n        };\n        var notPinned = _.missing(params.rowPinned);\n        if (notPinned) {\n            this.gridPanel.ensureIndexVisible(params.rowIndex);\n        }\n        this.rowRenderer.startEditingCell(cellPosition, params.keyPress, params.charPress);\n    };\n    GridApi.prototype.addAggFunc = function (key, aggFunc) {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFunc(key, aggFunc);\n        }\n    };\n    GridApi.prototype.addAggFuncs = function (aggFuncs) {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFuncs(aggFuncs);\n        }\n    };\n    GridApi.prototype.clearAggFuncs = function () {\n        if (this.aggFuncService) {\n            this.aggFuncService.clear();\n        }\n    };\n    GridApi.prototype.applyTransaction = function (rowDataTransaction) {\n        var res = null;\n        if (this.clientSideRowModel) {\n            if (rowDataTransaction && rowDataTransaction.addIndex != null) {\n                var message_1 = 'ag-Grid: as of v23.1, transaction.addIndex is deprecated. If you want precision control of adding data, use immutableData instead';\n                _.doOnce(function () { return console.warn(message_1); }, 'transaction.addIndex deprecated');\n            }\n            res = this.clientSideRowModel.updateRowData(rowDataTransaction);\n        }\n        else if (this.infiniteRowModel) {\n            var message_2 = 'ag-Grid: as of v23.1, transactions for Infinite Row Model are deprecated. If you want to make updates to data in Infinite Row Models, then refresh the data.';\n            _.doOnce(function () { return console.warn(message_2); }, 'applyTransaction infiniteRowModel deprecated');\n            this.infiniteRowModel.updateRowData(rowDataTransaction);\n        }\n        else {\n            console.error('ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel.');\n        }\n        // refresh all the full width rows\n        this.rowRenderer.refreshFullWidthRows();\n        // do change detection for all present cells\n        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {\n            this.rowRenderer.refreshCells();\n        }\n        return res;\n    };\n    /** @deprecated */\n    GridApi.prototype.updateRowData = function (rowDataTransaction) {\n        var message = 'ag-Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.';\n        _.doOnce(function () { return console.warn(message); }, 'updateRowData deprecated');\n        return this.applyTransaction(rowDataTransaction);\n    };\n    GridApi.prototype.applyTransactionAsync = function (rowDataTransaction, callback) {\n        if (!this.clientSideRowModel) {\n            console.error('ag-Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');\n            return;\n        }\n        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n    };\n    /** @deprecated */\n    GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n        var message = 'ag-Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.';\n        _.doOnce(function () { return console.warn(message); }, 'batchUpdateRowData deprecated');\n        this.applyTransactionAsync(rowDataTransaction, callback);\n    };\n    GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });\n    };\n    GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');\n        var dataToRemove = rowNodes.map(function (rowNode) { return rowNode.data; });\n        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });\n    };\n    GridApi.prototype.addItems = function (items, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });\n    };\n    GridApi.prototype.refreshVirtualPageCache = function () {\n        console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    };\n    GridApi.prototype.refreshInfinitePageCache = function () {\n        console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    };\n    GridApi.prototype.refreshInfiniteCache = function () {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.refreshCache();\n        }\n        else {\n            console.warn(\"ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.\");\n        }\n    };\n    GridApi.prototype.purgeVirtualPageCache = function () {\n        console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfinitePageCache();\n    };\n    GridApi.prototype.purgeInfinitePageCache = function () {\n        console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfiniteCache();\n    };\n    GridApi.prototype.purgeInfiniteCache = function () {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.purgeCache();\n        }\n        else {\n            console.warn(\"ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.\");\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.purgeEnterpriseCache = function (route) {\n        console.warn(\"ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()\");\n        this.purgeServerSideCache(route);\n    };\n    GridApi.prototype.purgeServerSideCache = function (route) {\n        if (this.serverSideRowModel) {\n            this.serverSideRowModel.purgeCache(route);\n        }\n        else {\n            console.warn(\"ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.\");\n        }\n    };\n    GridApi.prototype.getVirtualRowCount = function () {\n        console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');\n        return this.getInfiniteRowCount();\n    };\n    GridApi.prototype.getInfiniteRowCount = function () {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.getVirtualRowCount();\n        }\n        else {\n            console.warn(\"ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.\");\n        }\n    };\n    GridApi.prototype.isMaxRowFound = function () {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.isMaxRowFound();\n        }\n        else {\n            console.warn(\"ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.\");\n        }\n    };\n    GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n        console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');\n        this.setInfiniteRowCount(rowCount, maxRowFound);\n    };\n    GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.setVirtualRowCount(rowCount, maxRowFound);\n        }\n        else {\n            console.warn(\"ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.\");\n        }\n    };\n    GridApi.prototype.getVirtualPageState = function () {\n        console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    };\n    GridApi.prototype.getInfinitePageState = function () {\n        console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    };\n    GridApi.prototype.getCacheBlockState = function () {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.getBlockState();\n        }\n        else if (this.serverSideRowModel) {\n            return this.serverSideRowModel.getBlockState();\n        }\n        else {\n            console.warn(\"ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.\");\n        }\n    };\n    GridApi.prototype.checkGridSize = function () {\n        this.gridPanel.setHeaderAndFloatingHeights();\n    };\n    GridApi.prototype.getFirstRenderedRow = function () {\n        console.warn('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');\n        return this.getFirstDisplayedRow();\n    };\n    GridApi.prototype.getFirstDisplayedRow = function () {\n        return this.rowRenderer.getFirstVirtualRenderedRow();\n    };\n    GridApi.prototype.getLastRenderedRow = function () {\n        console.warn('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');\n        return this.getLastDisplayedRow();\n    };\n    GridApi.prototype.getLastDisplayedRow = function () {\n        return this.rowRenderer.getLastVirtualRenderedRow();\n    };\n    GridApi.prototype.getDisplayedRowAtIndex = function (index) {\n        return this.rowModel.getRow(index);\n    };\n    GridApi.prototype.getDisplayedRowCount = function () {\n        return this.rowModel.getRowCount();\n    };\n    GridApi.prototype.paginationIsLastPageFound = function () {\n        return this.paginationProxy.isLastPageFound();\n    };\n    GridApi.prototype.paginationGetPageSize = function () {\n        return this.paginationProxy.getPageSize();\n    };\n    GridApi.prototype.paginationSetPageSize = function (size) {\n        this.gridOptionsWrapper.setProperty('paginationPageSize', size);\n    };\n    GridApi.prototype.paginationGetCurrentPage = function () {\n        return this.paginationProxy.getCurrentPage();\n    };\n    GridApi.prototype.paginationGetTotalPages = function () {\n        return this.paginationProxy.getTotalPages();\n    };\n    GridApi.prototype.paginationGetRowCount = function () {\n        return this.paginationProxy.getMasterRowCount();\n    };\n    GridApi.prototype.paginationGoToNextPage = function () {\n        this.paginationProxy.goToNextPage();\n    };\n    GridApi.prototype.paginationGoToPreviousPage = function () {\n        this.paginationProxy.goToPreviousPage();\n    };\n    GridApi.prototype.paginationGoToFirstPage = function () {\n        this.paginationProxy.goToFirstPage();\n    };\n    GridApi.prototype.paginationGoToLastPage = function () {\n        this.paginationProxy.goToLastPage();\n    };\n    GridApi.prototype.paginationGoToPage = function (page) {\n        this.paginationProxy.goToPage(page);\n    };\n    __decorate([\n        Optional('immutableService')\n    ], GridApi.prototype, \"immutableService\", void 0);\n    __decorate([\n        Optional('csvCreator')\n    ], GridApi.prototype, \"csvCreator\", void 0);\n    __decorate([\n        Optional('excelCreator')\n    ], GridApi.prototype, \"excelCreator\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], GridApi.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('filterManager')\n    ], GridApi.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], GridApi.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], GridApi.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], GridApi.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], GridApi.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('alignedGridsService')\n    ], GridApi.prototype, \"alignedGridsService\", void 0);\n    __decorate([\n        Autowired('eventService')\n    ], GridApi.prototype, \"eventService\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], GridApi.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('context')\n    ], GridApi.prototype, \"context\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], GridApi.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], GridApi.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('paginationProxy')\n    ], GridApi.prototype, \"paginationProxy\", void 0);\n    __decorate([\n        Autowired('focusController')\n    ], GridApi.prototype, \"focusController\", void 0);\n    __decorate([\n        Autowired('dragAndDropService')\n    ], GridApi.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        Optional('rangeController')\n    ], GridApi.prototype, \"rangeController\", void 0);\n    __decorate([\n        Optional('clipboardService')\n    ], GridApi.prototype, \"clipboardService\", void 0);\n    __decorate([\n        Optional('aggFuncService')\n    ], GridApi.prototype, \"aggFuncService\", void 0);\n    __decorate([\n        Autowired('menuFactory')\n    ], GridApi.prototype, \"menuFactory\", void 0);\n    __decorate([\n        Optional('contextMenuFactory')\n    ], GridApi.prototype, \"contextMenuFactory\", void 0);\n    __decorate([\n        Autowired('cellRendererFactory')\n    ], GridApi.prototype, \"cellRendererFactory\", void 0);\n    __decorate([\n        Autowired('valueCache')\n    ], GridApi.prototype, \"valueCache\", void 0);\n    __decorate([\n        Autowired('animationFrameService')\n    ], GridApi.prototype, \"animationFrameService\", void 0);\n    __decorate([\n        Optional('statusBarService')\n    ], GridApi.prototype, \"statusBarService\", void 0);\n    __decorate([\n        Optional('chartService')\n    ], GridApi.prototype, \"chartService\", void 0);\n    __decorate([\n        Optional('undoRedoService')\n    ], GridApi.prototype, \"undoRedoService\", void 0);\n    __decorate([\n        PostConstruct\n    ], GridApi.prototype, \"init\", null);\n    GridApi = __decorate([\n        Bean('gridApi')\n    ], GridApi);\n    return GridApi;\n}());\nexport { GridApi };\n"]},"metadata":{},"sourceType":"module"}