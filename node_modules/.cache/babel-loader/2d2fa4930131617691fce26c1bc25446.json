{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Events, OriginalColumnGroup, ManagedFocusComponent, Constants } from \"@ag-grid-community/core\";\nimport { ToolPanelColumnGroupComp } from \"./toolPanelColumnGroupComp\";\nimport { ToolPanelColumnComp } from \"./toolPanelColumnComp\";\nimport { EXPAND_STATE } from \"./primaryColsHeaderPanel\";\n\nvar PrimaryColsListPanel =\n/** @class */\nfunction (_super) {\n  __extends(PrimaryColsListPanel, _super);\n\n  function PrimaryColsListPanel() {\n    var _this = _super.call(this, PrimaryColsListPanel.TEMPLATE) || this;\n\n    _this.selectAllChecked = true;\n    _this.columnComps = new Map();\n\n    _this.getColumnCompId = function (columnGroupChild) {\n      if (columnGroupChild instanceof OriginalColumnGroup) {\n        // group comps are stored using a custom key (groupId + child colIds concatenated) as we need\n        // to distinguish individual column groups after they have been split by user\n        var childIds = columnGroupChild.getLeafColumns().map(function (child) {\n          return child.getId();\n        }).join('-');\n        return columnGroupChild.getId() + '-' + childIds;\n      }\n\n      return columnGroupChild.getId();\n    };\n\n    return _this;\n  }\n\n  PrimaryColsListPanel.prototype.init = function (params, allowDragging) {\n    var _this = this;\n\n    this.params = params;\n    this.allowDragging = allowDragging;\n\n    if (!this.params.suppressSyncLayoutWithGrid) {\n      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.onColumnsChanged.bind(this));\n    }\n\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnsChanged.bind(this));\n    var eventsImpactingCheckedState = [Events.EVENT_COLUMN_EVERYTHING_CHANGED, Events.EVENT_COLUMN_PIVOT_CHANGED, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, Events.EVENT_COLUMN_VALUE_CHANGED, Events.EVENT_COLUMN_VISIBLE, Events.EVENT_NEW_COLUMNS_LOADED];\n    eventsImpactingCheckedState.forEach(function (event) {\n      // update header select all checkbox with current selection state\n      _this.addManagedListener(_this.eventService, event, _this.fireSelectionChangedEvent.bind(_this));\n    });\n    this.expandGroupsByDefault = !this.params.contractColumnSelection;\n\n    if (this.columnController.isReady()) {\n      this.onColumnsChanged();\n    }\n  };\n\n  PrimaryColsListPanel.prototype.handleKeyDown = function (e) {\n    switch (e.keyCode) {\n      case Constants.KEY_UP:\n      case Constants.KEY_DOWN:\n        e.preventDefault();\n        this.nagivateToNextItem(e.keyCode === Constants.KEY_UP);\n        break;\n    }\n  };\n\n  PrimaryColsListPanel.prototype.nagivateToNextItem = function (up) {\n    var nextEl = this.focusController.findNextFocusableElement(this.getFocusableElement(), true, up);\n\n    if (nextEl) {\n      nextEl.focus();\n    }\n  };\n\n  PrimaryColsListPanel.prototype.onColumnsChanged = function () {\n    var pivotModeActive = this.columnController.isPivotMode();\n    var shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n    shouldSyncColumnLayoutWithGrid ? this.syncColumnLayout() : this.buildTreeFromProvidedColumnDefs();\n    this.setFilterText(this.filterText);\n  };\n\n  PrimaryColsListPanel.prototype.syncColumnLayout = function () {\n    this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));\n  };\n\n  PrimaryColsListPanel.prototype.setColumnLayout = function (colDefs) {\n    this.destroyColumnComps(); // create column tree using supplied colDef's\n\n    this.columnTree = this.colDefService.createColumnTree(colDefs); // using col defs to check if groups exist as it could be a custom layout\n\n    var groupsExist = colDefs.some(function (colDef) {\n      return colDef && typeof colDef.children !== 'undefined';\n    });\n    this.recursivelyAddComps(this.columnTree, 0, groupsExist);\n    this.recursivelySetVisibility(this.columnTree, true); // notify header\n\n    this.notifyListeners();\n  };\n\n  PrimaryColsListPanel.prototype.buildTreeFromProvidedColumnDefs = function () {\n    this.destroyColumnComps(); // add column / group comps to tool panel\n\n    this.columnTree = this.columnController.getPrimaryColumnTree();\n    var groupsExist = this.columnController.isPrimaryColumnGroupsPresent();\n    this.recursivelyAddComps(this.columnTree, 0, groupsExist);\n    this.recursivelySetVisibility(this.columnTree, true); // notify header\n\n    this.notifyListeners();\n  };\n\n  PrimaryColsListPanel.prototype.recursivelyAddComps = function (tree, dept, groupsExist) {\n    var _this = this;\n\n    tree.forEach(function (child) {\n      if (child instanceof OriginalColumnGroup) {\n        _this.recursivelyAddGroupComps(child, dept, groupsExist);\n      } else {\n        _this.addColumnComps(child, dept, groupsExist);\n      }\n    });\n  };\n\n  PrimaryColsListPanel.prototype.recursivelyAddGroupComps = function (columnGroup, dept, groupsExist) {\n    var _this = this; // only render group if user provided the definition\n\n\n    var newDept;\n\n    if (columnGroup.getColGroupDef() && columnGroup.getColGroupDef().suppressColumnsToolPanel) {\n      return;\n    }\n\n    if (!columnGroup.isPadding()) {\n      var renderedGroup = new ToolPanelColumnGroupComp(columnGroup, dept, this.allowDragging, this.expandGroupsByDefault, this.onGroupExpanded.bind(this), function () {\n        return _this.filterResults;\n      });\n      this.getContext().createBean(renderedGroup);\n      var renderedGroupGui = renderedGroup.getGui();\n      this.appendChild(renderedGroupGui); // we want to indent on the gui for the children\n\n      newDept = dept + 1; // group comps are stored using a custom key (groupId + child colIds concatenated) as we need\n      // to distinguish individual column groups after they have been split by user\n\n      var key = this.getColumnCompId(columnGroup);\n      this.columnComps.set(key, renderedGroup);\n    } else {\n      // no children, so no indent\n      newDept = dept;\n    }\n\n    this.recursivelyAddComps(columnGroup.getChildren(), newDept, groupsExist);\n  };\n\n  PrimaryColsListPanel.prototype.addColumnComps = function (column, dept, groupsExist) {\n    if (column.getColDef() && column.getColDef().suppressColumnsToolPanel) {\n      return;\n    }\n\n    var columnComp = new ToolPanelColumnComp(column, dept, this.allowDragging, groupsExist);\n    this.getContext().createBean(columnComp);\n    var columnCompGui = columnComp.getGui();\n    this.appendChild(columnCompGui);\n    this.columnComps.set(column.getId(), columnComp);\n  };\n\n  PrimaryColsListPanel.prototype.onGroupExpanded = function () {\n    this.recursivelySetVisibility(this.columnTree, true);\n    this.fireGroupExpandedEvent();\n  };\n\n  PrimaryColsListPanel.prototype.doSetExpandedAll = function (value) {\n    this.columnComps.forEach(function (renderedItem) {\n      if (renderedItem.isExpandable()) {\n        renderedItem.setExpanded(value);\n      }\n    });\n  };\n\n  PrimaryColsListPanel.prototype.setGroupsExpanded = function (expand, groupIds) {\n    var _this = this;\n\n    var expandedGroupIds = [];\n\n    if (!groupIds) {\n      this.doSetExpandedAll(expand);\n      return;\n    }\n\n    groupIds.forEach(function (suppliedGroupId) {\n      // we need to search through all comps to handle the case when groups are split\n      _this.columnComps.forEach(function (comp, key) {\n        // check if group comp starts with supplied group id as the tool panel keys contain\n        // groupId + childIds concatenated\n        var foundMatchingGroupComp = key.indexOf(suppliedGroupId) === 0;\n\n        if (foundMatchingGroupComp) {\n          comp.setExpanded(expand);\n          expandedGroupIds.push(suppliedGroupId);\n        }\n      });\n    });\n    var unrecognisedGroupIds = groupIds.filter(function (groupId) {\n      return !_.includes(expandedGroupIds, groupId);\n    });\n\n    if (unrecognisedGroupIds.length > 0) {\n      console.warn('ag-Grid: unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);\n    }\n  };\n\n  PrimaryColsListPanel.prototype.getExpandState = function () {\n    var _this = this;\n\n    var expandedCount = 0;\n    var notExpandedCount = 0;\n\n    var recursiveFunc = function (items) {\n      items.forEach(function (item) {\n        // only interested in groups\n        if (item instanceof OriginalColumnGroup) {\n          var compId = _this.getColumnCompId(item);\n\n          var comp = _this.columnComps.get(compId);\n\n          if (comp) {\n            if (comp.isExpanded()) {\n              expandedCount++;\n            } else {\n              notExpandedCount++;\n            }\n          }\n\n          var columnGroup = item;\n          var groupChildren = columnGroup.getChildren();\n          recursiveFunc(groupChildren);\n        }\n      });\n    };\n\n    recursiveFunc(this.columnTree);\n\n    if (expandedCount > 0 && notExpandedCount > 0) {\n      return EXPAND_STATE.INDETERMINATE;\n    }\n\n    if (notExpandedCount > 0) {\n      return EXPAND_STATE.COLLAPSED;\n    }\n\n    return EXPAND_STATE.EXPANDED;\n  };\n\n  PrimaryColsListPanel.prototype.doSetSelectedAll = function (selectAllChecked) {\n    this.selectAllChecked = selectAllChecked;\n    this.updateSelections();\n  };\n\n  PrimaryColsListPanel.prototype.updateSelections = function () {\n    var _this = this;\n\n    if (this.columnApi.isPivotMode()) {\n      // if pivot mode is on, then selecting columns has special meaning (eg group, aggregate, pivot etc),\n      // so there is no bulk operation we can do.\n      this.columnComps.forEach(function (column) {\n        return column.onSelectAllChanged(_this.selectAllChecked);\n      });\n    } else {\n      // we don't want to change visibility on lock visible columns\n      var primaryCols = this.columnApi.getPrimaryColumns();\n      var colsToChange = primaryCols.filter(function (col) {\n        return !col.getColDef().lockVisible;\n      }); // however if pivot mode is off, then it's all about column visibility so we can do a bulk\n      // operation directly with the column controller. we could column.onSelectAllChanged(checked)\n      // as above, however this would work on each column independently and take longer.\n\n      if (!_.exists(this.filterText)) {\n        this.columnController.setColumnsVisible(colsToChange, this.selectAllChecked, 'columnMenu');\n        return;\n      } // obtain list of columns currently filtered\n\n\n      var filteredCols_1 = [];\n\n      _.iterateObject(this.filterResults, function (key, passesFilter) {\n        if (passesFilter) filteredCols_1.push(key);\n      });\n\n      if (filteredCols_1.length > 0) {\n        var filteredColsToChange = colsToChange.filter(function (col) {\n          return _.includes(filteredCols_1, col.getColId());\n        }); // update visibility of columns currently filtered\n\n        this.columnController.setColumnsVisible(filteredColsToChange, this.selectAllChecked, 'columnMenu'); // update select all header with new state\n\n        var selectionState = this.selectAllChecked ? true : false;\n        this.dispatchEvent({\n          type: 'selectionChanged',\n          state: selectionState\n        });\n      }\n    }\n  };\n\n  PrimaryColsListPanel.prototype.getSelectionState = function () {\n    var _this = this;\n\n    var allPrimaryColumns = this.columnController.getAllPrimaryColumns();\n    var columns = [];\n\n    if (allPrimaryColumns !== null) {\n      columns = allPrimaryColumns.filter(function (col) {\n        return !col.getColDef().lockVisible;\n      });\n    }\n\n    var pivotMode = this.columnController.isPivotMode();\n    var checkedCount = 0;\n    var uncheckedCount = 0;\n    columns.forEach(function (col) {\n      // ignore lock visible columns\n      if (col.getColDef().lockVisible) {\n        return;\n      } // not not count columns not in tool panel\n\n\n      var colDef = col.getColDef();\n\n      if (colDef && colDef.suppressColumnsToolPanel) {\n        return;\n      } // ignore columns that have been removed from panel by filter\n\n\n      if (_this.filterResults && !_this.filterResults[col.getColId()]) return;\n      var checked;\n\n      if (pivotMode) {\n        var noPivotModeOptionsAllowed = !col.isAllowPivot() && !col.isAllowRowGroup() && !col.isAllowValue();\n\n        if (noPivotModeOptionsAllowed) {\n          return;\n        }\n\n        checked = col.isValueActive() || col.isPivotActive() || col.isRowGroupActive();\n      } else {\n        checked = col.isVisible();\n      }\n\n      if (checked) {\n        checkedCount++;\n      } else {\n        uncheckedCount++;\n      }\n    });\n\n    if (checkedCount > 0 && uncheckedCount > 0) {\n      return undefined;\n    }\n\n    if (checkedCount === 0 || uncheckedCount > 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  PrimaryColsListPanel.prototype.setFilterText = function (filterText) {\n    this.filterText = _.exists(filterText) ? filterText.toLowerCase() : null;\n    this.filterColumns();\n    this.recursivelySetVisibility(this.columnTree, true); // groups selection state may need to be updated when filter is present\n\n    this.columnComps.forEach(function (columnComp) {\n      if (columnComp instanceof ToolPanelColumnGroupComp) {\n        columnComp.onColumnStateChanged();\n      }\n    }); // update header panel with current selection and expanded state\n\n    this.fireSelectionChangedEvent();\n    this.fireGroupExpandedEvent();\n  };\n\n  PrimaryColsListPanel.prototype.filterColumns = function () {\n    var _this = this;\n\n    var filterResults = {};\n\n    var passesFilter = function (item) {\n      if (!_.exists(_this.filterText)) return true;\n\n      var columnCompId = _this.getColumnCompId(item);\n\n      var comp = _this.columnComps.get(columnCompId);\n\n      if (!comp) return false;\n      var isPaddingGroup = item instanceof OriginalColumnGroup && item.isPadding();\n      if (isPaddingGroup) return false;\n      var displayName = comp.getDisplayName();\n      return displayName !== null ? displayName.toLowerCase().indexOf(_this.filterText) >= 0 : true;\n    };\n\n    var recursivelyCheckFilter = function (item, parentPasses) {\n      var atLeastOneChildPassed = false;\n\n      if (item instanceof OriginalColumnGroup) {\n        var groupPasses_1 = passesFilter(item);\n        item.getChildren().forEach(function (child) {\n          var childPasses = recursivelyCheckFilter(child, groupPasses_1 || parentPasses);\n\n          if (childPasses) {\n            atLeastOneChildPassed = childPasses;\n          }\n        });\n      }\n\n      var filterPasses = parentPasses || atLeastOneChildPassed ? true : passesFilter(item);\n\n      var columnCompId = _this.getColumnCompId(item);\n\n      filterResults[columnCompId] = filterPasses;\n      return filterPasses;\n    };\n\n    this.columnTree.forEach(function (item) {\n      return recursivelyCheckFilter(item, false);\n    });\n    this.filterResults = filterResults;\n  };\n\n  PrimaryColsListPanel.prototype.recursivelySetVisibility = function (columnTree, parentGroupsOpen) {\n    var _this = this;\n\n    columnTree.forEach(function (child) {\n      var compId = _this.getColumnCompId(child);\n\n      var comp = _this.columnComps.get(compId);\n\n      if (comp) {\n        var filterResultExists = _this.filterResults && _.exists(_this.filterResults[compId]);\n\n        var passesFilter = filterResultExists ? _this.filterResults[compId] : true;\n        comp.setDisplayed(parentGroupsOpen && passesFilter);\n      }\n\n      if (child instanceof OriginalColumnGroup) {\n        var columnGroup = child;\n        var childrenOpen = void 0;\n\n        if (comp) {\n          var expanded = comp.isExpanded();\n          childrenOpen = parentGroupsOpen ? expanded : false;\n        } else {\n          childrenOpen = parentGroupsOpen;\n        }\n\n        var children = columnGroup.getChildren();\n\n        _this.recursivelySetVisibility(children, childrenOpen);\n      }\n    });\n  };\n\n  PrimaryColsListPanel.prototype.notifyListeners = function () {\n    this.fireGroupExpandedEvent();\n    this.fireSelectionChangedEvent();\n  };\n\n  PrimaryColsListPanel.prototype.fireGroupExpandedEvent = function () {\n    var expandState = this.getExpandState();\n    this.dispatchEvent({\n      type: 'groupExpanded',\n      state: expandState\n    });\n  };\n\n  PrimaryColsListPanel.prototype.fireSelectionChangedEvent = function () {\n    var selectionState = this.getSelectionState();\n    this.dispatchEvent({\n      type: 'selectionChanged',\n      state: selectionState\n    });\n  };\n\n  PrimaryColsListPanel.prototype.destroyColumnComps = function () {\n    var _this = this;\n\n    var eGui = this.getGui();\n\n    if (this.columnComps) {\n      this.columnComps.forEach(function (renderedItem) {\n        eGui.removeChild(renderedItem.getGui());\n\n        _this.destroyBean(renderedItem);\n      });\n    }\n\n    this.columnComps = new Map();\n  };\n\n  PrimaryColsListPanel.prototype.destroy = function () {\n    this.destroyColumnComps();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  PrimaryColsListPanel.TEMPLATE = \"<div class=\\\"ag-column-select-list\\\"></div>\";\n\n  __decorate([Autowired('columnController')], PrimaryColsListPanel.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('toolPanelColDefService')], PrimaryColsListPanel.prototype, \"colDefService\", void 0);\n\n  __decorate([Autowired('columnApi')], PrimaryColsListPanel.prototype, \"columnApi\", void 0);\n\n  return PrimaryColsListPanel;\n}(ManagedFocusComponent);\n\nexport { PrimaryColsListPanel };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/primaryColsListPanel.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","Events","OriginalColumnGroup","ManagedFocusComponent","Constants","ToolPanelColumnGroupComp","ToolPanelColumnComp","EXPAND_STATE","PrimaryColsListPanel","_super","_this","call","TEMPLATE","selectAllChecked","columnComps","Map","getColumnCompId","columnGroupChild","childIds","getLeafColumns","map","child","getId","join","init","params","allowDragging","suppressSyncLayoutWithGrid","addManagedListener","eventService","EVENT_COLUMN_MOVED","onColumnsChanged","bind","EVENT_COLUMN_EVERYTHING_CHANGED","eventsImpactingCheckedState","EVENT_COLUMN_PIVOT_CHANGED","EVENT_COLUMN_PIVOT_MODE_CHANGED","EVENT_COLUMN_ROW_GROUP_CHANGED","EVENT_COLUMN_VALUE_CHANGED","EVENT_COLUMN_VISIBLE","EVENT_NEW_COLUMNS_LOADED","forEach","event","fireSelectionChangedEvent","expandGroupsByDefault","contractColumnSelection","columnController","isReady","handleKeyDown","e","keyCode","KEY_UP","KEY_DOWN","preventDefault","nagivateToNextItem","up","nextEl","focusController","findNextFocusableElement","getFocusableElement","focus","pivotModeActive","isPivotMode","shouldSyncColumnLayoutWithGrid","syncColumnLayout","buildTreeFromProvidedColumnDefs","setFilterText","filterText","colDefService","syncLayoutWithGrid","setColumnLayout","colDefs","destroyColumnComps","columnTree","createColumnTree","groupsExist","some","colDef","children","recursivelyAddComps","recursivelySetVisibility","notifyListeners","getPrimaryColumnTree","isPrimaryColumnGroupsPresent","tree","dept","recursivelyAddGroupComps","addColumnComps","columnGroup","newDept","getColGroupDef","suppressColumnsToolPanel","isPadding","renderedGroup","onGroupExpanded","filterResults","getContext","createBean","renderedGroupGui","getGui","appendChild","set","getChildren","column","getColDef","columnComp","columnCompGui","fireGroupExpandedEvent","doSetExpandedAll","value","renderedItem","isExpandable","setExpanded","setGroupsExpanded","expand","groupIds","expandedGroupIds","suppliedGroupId","comp","foundMatchingGroupComp","indexOf","push","unrecognisedGroupIds","filter","groupId","includes","console","warn","getExpandState","expandedCount","notExpandedCount","recursiveFunc","items","item","compId","get","isExpanded","groupChildren","INDETERMINATE","COLLAPSED","EXPANDED","doSetSelectedAll","updateSelections","columnApi","onSelectAllChanged","primaryCols","getPrimaryColumns","colsToChange","col","lockVisible","exists","setColumnsVisible","filteredCols_1","iterateObject","passesFilter","filteredColsToChange","getColId","selectionState","dispatchEvent","type","state","getSelectionState","allPrimaryColumns","getAllPrimaryColumns","columns","pivotMode","checkedCount","uncheckedCount","checked","noPivotModeOptionsAllowed","isAllowPivot","isAllowRowGroup","isAllowValue","isValueActive","isPivotActive","isRowGroupActive","isVisible","undefined","toLowerCase","filterColumns","onColumnStateChanged","columnCompId","isPaddingGroup","displayName","getDisplayName","recursivelyCheckFilter","parentPasses","atLeastOneChildPassed","groupPasses_1","childPasses","filterPasses","parentGroupsOpen","filterResultExists","setDisplayed","childrenOpen","expanded","expandState","eGui","removeChild","destroyBean","destroy"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGd,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HhB,CAA3H;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACoB,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACc,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BpB,CAAC,CAACc,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAclB,MAAM,CAACuB,cAAP,CAAsBX,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASM,CAAT,EAAYC,SAAZ,EAAuBC,MAAvB,EAA+BC,mBAA/B,EAAoDC,qBAApD,EAA2EC,SAA3E,QAA4F,yBAA5F;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AACA,IAAIC,oBAAoB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACxDtC,EAAAA,SAAS,CAACqC,oBAAD,EAAuBC,MAAvB,CAAT;;AACA,WAASD,oBAAT,GAAgC;AAC5B,QAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBH,oBAAoB,CAACI,QAAvC,KAAoD,IAAhE;;AACAF,IAAAA,KAAK,CAACG,gBAAN,GAAyB,IAAzB;AACAH,IAAAA,KAAK,CAACI,WAAN,GAAoB,IAAIC,GAAJ,EAApB;;AACAL,IAAAA,KAAK,CAACM,eAAN,GAAwB,UAAUC,gBAAV,EAA4B;AAChD,UAAIA,gBAAgB,YAAYf,mBAAhC,EAAqD;AACjD;AACA;AACA,YAAIgB,QAAQ,GAAGD,gBAAgB,CAACE,cAAjB,GAAkCC,GAAlC,CAAsC,UAAUC,KAAV,EAAiB;AAAE,iBAAOA,KAAK,CAACC,KAAN,EAAP;AAAuB,SAAhF,EAAkFC,IAAlF,CAAuF,GAAvF,CAAf;AACA,eAAON,gBAAgB,CAACK,KAAjB,KAA2B,GAA3B,GAAiCJ,QAAxC;AACH;;AACD,aAAOD,gBAAgB,CAACK,KAAjB,EAAP;AACH,KARD;;AASA,WAAOZ,KAAP;AACH;;AACDF,EAAAA,oBAAoB,CAACzB,SAArB,CAA+ByC,IAA/B,GAAsC,UAAUC,MAAV,EAAkBC,aAAlB,EAAiC;AACnE,QAAIhB,KAAK,GAAG,IAAZ;;AACA,SAAKe,MAAL,GAAcA,MAAd;AACA,SAAKC,aAAL,GAAqBA,aAArB;;AACA,QAAI,CAAC,KAAKD,MAAL,CAAYE,0BAAjB,EAA6C;AACzC,WAAKC,kBAAL,CAAwB,KAAKC,YAA7B,EAA2C5B,MAAM,CAAC6B,kBAAlD,EAAsE,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAtE;AACH;;AACD,SAAKJ,kBAAL,CAAwB,KAAKC,YAA7B,EAA2C5B,MAAM,CAACgC,+BAAlD,EAAmF,KAAKF,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAnF;AACA,QAAIE,2BAA2B,GAAG,CAC9BjC,MAAM,CAACgC,+BADuB,EAE9BhC,MAAM,CAACkC,0BAFuB,EAG9BlC,MAAM,CAACmC,+BAHuB,EAI9BnC,MAAM,CAACoC,8BAJuB,EAK9BpC,MAAM,CAACqC,0BALuB,EAM9BrC,MAAM,CAACsC,oBANuB,EAO9BtC,MAAM,CAACuC,wBAPuB,CAAlC;AASAN,IAAAA,2BAA2B,CAACO,OAA5B,CAAoC,UAAUC,KAAV,EAAiB;AACjD;AACAhC,MAAAA,KAAK,CAACkB,kBAAN,CAAyBlB,KAAK,CAACmB,YAA/B,EAA6Ca,KAA7C,EAAoDhC,KAAK,CAACiC,yBAAN,CAAgCX,IAAhC,CAAqCtB,KAArC,CAApD;AACH,KAHD;AAIA,SAAKkC,qBAAL,GAA6B,CAAC,KAAKnB,MAAL,CAAYoB,uBAA1C;;AACA,QAAI,KAAKC,gBAAL,CAAsBC,OAAtB,EAAJ,EAAqC;AACjC,WAAKhB,gBAAL;AACH;AACJ,GAzBD;;AA0BAvB,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BiE,aAA/B,GAA+C,UAAUC,CAAV,EAAa;AACxD,YAAQA,CAAC,CAACC,OAAV;AACI,WAAK9C,SAAS,CAAC+C,MAAf;AACA,WAAK/C,SAAS,CAACgD,QAAf;AACIH,QAAAA,CAAC,CAACI,cAAF;AACA,aAAKC,kBAAL,CAAwBL,CAAC,CAACC,OAAF,KAAc9C,SAAS,CAAC+C,MAAhD;AACA;AALR;AAOH,GARD;;AASA3C,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BuE,kBAA/B,GAAoD,UAAUC,EAAV,EAAc;AAC9D,QAAIC,MAAM,GAAG,KAAKC,eAAL,CAAqBC,wBAArB,CAA8C,KAAKC,mBAAL,EAA9C,EAA0E,IAA1E,EAAgFJ,EAAhF,CAAb;;AACA,QAAIC,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACI,KAAP;AACH;AACJ,GALD;;AAMApD,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BgD,gBAA/B,GAAkD,YAAY;AAC1D,QAAI8B,eAAe,GAAG,KAAKf,gBAAL,CAAsBgB,WAAtB,EAAtB;AACA,QAAIC,8BAA8B,GAAG,CAAC,KAAKtC,MAAL,CAAYE,0BAAb,IAA2C,CAACkC,eAAjF;AACAE,IAAAA,8BAA8B,GAAG,KAAKC,gBAAL,EAAH,GAA6B,KAAKC,+BAAL,EAA3D;AACA,SAAKC,aAAL,CAAmB,KAAKC,UAAxB;AACH,GALD;;AAMA3D,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BiF,gBAA/B,GAAkD,YAAY;AAC1D,SAAKI,aAAL,CAAmBC,kBAAnB,CAAsC,KAAKC,eAAL,CAAqBtC,IAArB,CAA0B,IAA1B,CAAtC;AACH,GAFD;;AAGAxB,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BuF,eAA/B,GAAiD,UAAUC,OAAV,EAAmB;AAChE,SAAKC,kBAAL,GADgE,CAEhE;;AACA,SAAKC,UAAL,GAAkB,KAAKL,aAAL,CAAmBM,gBAAnB,CAAoCH,OAApC,CAAlB,CAHgE,CAIhE;;AACA,QAAII,WAAW,GAAGJ,OAAO,CAACK,IAAR,CAAa,UAAUC,MAAV,EAAkB;AAC7C,aAAOA,MAAM,IAAI,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAA5C;AACH,KAFiB,CAAlB;AAGA,SAAKC,mBAAL,CAAyB,KAAKN,UAA9B,EAA0C,CAA1C,EAA6CE,WAA7C;AACA,SAAKK,wBAAL,CAA8B,KAAKP,UAAnC,EAA+C,IAA/C,EATgE,CAUhE;;AACA,SAAKQ,eAAL;AACH,GAZD;;AAaAzE,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BkF,+BAA/B,GAAiE,YAAY;AACzE,SAAKO,kBAAL,GADyE,CAEzE;;AACA,SAAKC,UAAL,GAAkB,KAAK3B,gBAAL,CAAsBoC,oBAAtB,EAAlB;AACA,QAAIP,WAAW,GAAG,KAAK7B,gBAAL,CAAsBqC,4BAAtB,EAAlB;AACA,SAAKJ,mBAAL,CAAyB,KAAKN,UAA9B,EAA0C,CAA1C,EAA6CE,WAA7C;AACA,SAAKK,wBAAL,CAA8B,KAAKP,UAAnC,EAA+C,IAA/C,EANyE,CAOzE;;AACA,SAAKQ,eAAL;AACH,GATD;;AAUAzE,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BgG,mBAA/B,GAAqD,UAAUK,IAAV,EAAgBC,IAAhB,EAAsBV,WAAtB,EAAmC;AACpF,QAAIjE,KAAK,GAAG,IAAZ;;AACA0E,IAAAA,IAAI,CAAC3C,OAAL,CAAa,UAAUpB,KAAV,EAAiB;AAC1B,UAAIA,KAAK,YAAYnB,mBAArB,EAA0C;AACtCQ,QAAAA,KAAK,CAAC4E,wBAAN,CAA+BjE,KAA/B,EAAsCgE,IAAtC,EAA4CV,WAA5C;AACH,OAFD,MAGK;AACDjE,QAAAA,KAAK,CAAC6E,cAAN,CAAqBlE,KAArB,EAA4BgE,IAA5B,EAAkCV,WAAlC;AACH;AACJ,KAPD;AAQH,GAVD;;AAWAnE,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BuG,wBAA/B,GAA0D,UAAUE,WAAV,EAAuBH,IAAvB,EAA6BV,WAA7B,EAA0C;AAChG,QAAIjE,KAAK,GAAG,IAAZ,CADgG,CAEhG;;;AACA,QAAI+E,OAAJ;;AACA,QAAID,WAAW,CAACE,cAAZ,MAAgCF,WAAW,CAACE,cAAZ,GAA6BC,wBAAjE,EAA2F;AACvF;AACH;;AACD,QAAI,CAACH,WAAW,CAACI,SAAZ,EAAL,EAA8B;AAC1B,UAAIC,aAAa,GAAG,IAAIxF,wBAAJ,CAA6BmF,WAA7B,EAA0CH,IAA1C,EAAgD,KAAK3D,aAArD,EAAoE,KAAKkB,qBAAzE,EAAgG,KAAKkD,eAAL,CAAqB9D,IAArB,CAA0B,IAA1B,CAAhG,EAAiI,YAAY;AAAE,eAAOtB,KAAK,CAACqF,aAAb;AAA6B,OAA5K,CAApB;AACA,WAAKC,UAAL,GAAkBC,UAAlB,CAA6BJ,aAA7B;AACA,UAAIK,gBAAgB,GAAGL,aAAa,CAACM,MAAd,EAAvB;AACA,WAAKC,WAAL,CAAiBF,gBAAjB,EAJ0B,CAK1B;;AACAT,MAAAA,OAAO,GAAGJ,IAAI,GAAG,CAAjB,CAN0B,CAO1B;AACA;;AACA,UAAIjG,GAAG,GAAG,KAAK4B,eAAL,CAAqBwE,WAArB,CAAV;AACA,WAAK1E,WAAL,CAAiBuF,GAAjB,CAAqBjH,GAArB,EAA0ByG,aAA1B;AACH,KAXD,MAYK;AACD;AACAJ,MAAAA,OAAO,GAAGJ,IAAV;AACH;;AACD,SAAKN,mBAAL,CAAyBS,WAAW,CAACc,WAAZ,EAAzB,EAAoDb,OAApD,EAA6Dd,WAA7D;AACH,GAxBD;;AAyBAnE,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BwG,cAA/B,GAAgD,UAAUgB,MAAV,EAAkBlB,IAAlB,EAAwBV,WAAxB,EAAqC;AACjF,QAAI4B,MAAM,CAACC,SAAP,MAAsBD,MAAM,CAACC,SAAP,GAAmBb,wBAA7C,EAAuE;AACnE;AACH;;AACD,QAAIc,UAAU,GAAG,IAAInG,mBAAJ,CAAwBiG,MAAxB,EAAgClB,IAAhC,EAAsC,KAAK3D,aAA3C,EAA0DiD,WAA1D,CAAjB;AACA,SAAKqB,UAAL,GAAkBC,UAAlB,CAA6BQ,UAA7B;AACA,QAAIC,aAAa,GAAGD,UAAU,CAACN,MAAX,EAApB;AACA,SAAKC,WAAL,CAAiBM,aAAjB;AACA,SAAK5F,WAAL,CAAiBuF,GAAjB,CAAqBE,MAAM,CAACjF,KAAP,EAArB,EAAqCmF,UAArC;AACH,GATD;;AAUAjG,EAAAA,oBAAoB,CAACzB,SAArB,CAA+B+G,eAA/B,GAAiD,YAAY;AACzD,SAAKd,wBAAL,CAA8B,KAAKP,UAAnC,EAA+C,IAA/C;AACA,SAAKkC,sBAAL;AACH,GAHD;;AAIAnG,EAAAA,oBAAoB,CAACzB,SAArB,CAA+B6H,gBAA/B,GAAkD,UAAUC,KAAV,EAAiB;AAC/D,SAAK/F,WAAL,CAAiB2B,OAAjB,CAAyB,UAAUqE,YAAV,EAAwB;AAC7C,UAAIA,YAAY,CAACC,YAAb,EAAJ,EAAiC;AAC7BD,QAAAA,YAAY,CAACE,WAAb,CAAyBH,KAAzB;AACH;AACJ,KAJD;AAKH,GAND;;AAOArG,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BkI,iBAA/B,GAAmD,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC3E,QAAIzG,KAAK,GAAG,IAAZ;;AACA,QAAI0G,gBAAgB,GAAG,EAAvB;;AACA,QAAI,CAACD,QAAL,EAAe;AACX,WAAKP,gBAAL,CAAsBM,MAAtB;AACA;AACH;;AACDC,IAAAA,QAAQ,CAAC1E,OAAT,CAAiB,UAAU4E,eAAV,EAA2B;AACxC;AACA3G,MAAAA,KAAK,CAACI,WAAN,CAAkB2B,OAAlB,CAA0B,UAAU6E,IAAV,EAAgBlI,GAAhB,EAAqB;AAC3C;AACA;AACA,YAAImI,sBAAsB,GAAGnI,GAAG,CAACoI,OAAJ,CAAYH,eAAZ,MAAiC,CAA9D;;AACA,YAAIE,sBAAJ,EAA4B;AACxBD,UAAAA,IAAI,CAACN,WAAL,CAAiBE,MAAjB;AACAE,UAAAA,gBAAgB,CAACK,IAAjB,CAAsBJ,eAAtB;AACH;AACJ,OARD;AASH,KAXD;AAYA,QAAIK,oBAAoB,GAAGP,QAAQ,CAACQ,MAAT,CAAgB,UAAUC,OAAV,EAAmB;AAAE,aAAO,CAAC7H,CAAC,CAAC8H,QAAF,CAAWT,gBAAX,EAA6BQ,OAA7B,CAAR;AAAgD,KAArF,CAA3B;;AACA,QAAIF,oBAAoB,CAAClI,MAArB,GAA8B,CAAlC,EAAqC;AACjCsI,MAAAA,OAAO,CAACC,IAAR,CAAa,yDAAb,EAAwEL,oBAAxE;AACH;AACJ,GAvBD;;AAwBAlH,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BiJ,cAA/B,GAAgD,YAAY;AACxD,QAAItH,KAAK,GAAG,IAAZ;;AACA,QAAIuH,aAAa,GAAG,CAApB;AACA,QAAIC,gBAAgB,GAAG,CAAvB;;AACA,QAAIC,aAAa,GAAG,UAAUC,KAAV,EAAiB;AACjCA,MAAAA,KAAK,CAAC3F,OAAN,CAAc,UAAU4F,IAAV,EAAgB;AAC1B;AACA,YAAIA,IAAI,YAAYnI,mBAApB,EAAyC;AACrC,cAAIoI,MAAM,GAAG5H,KAAK,CAACM,eAAN,CAAsBqH,IAAtB,CAAb;;AACA,cAAIf,IAAI,GAAG5G,KAAK,CAACI,WAAN,CAAkByH,GAAlB,CAAsBD,MAAtB,CAAX;;AACA,cAAIhB,IAAJ,EAAU;AACN,gBAAIA,IAAI,CAACkB,UAAL,EAAJ,EAAuB;AACnBP,cAAAA,aAAa;AAChB,aAFD,MAGK;AACDC,cAAAA,gBAAgB;AACnB;AACJ;;AACD,cAAI1C,WAAW,GAAG6C,IAAlB;AACA,cAAII,aAAa,GAAGjD,WAAW,CAACc,WAAZ,EAApB;AACA6B,UAAAA,aAAa,CAACM,aAAD,CAAb;AACH;AACJ,OAjBD;AAkBH,KAnBD;;AAoBAN,IAAAA,aAAa,CAAC,KAAK1D,UAAN,CAAb;;AACA,QAAIwD,aAAa,GAAG,CAAhB,IAAqBC,gBAAgB,GAAG,CAA5C,EAA+C;AAC3C,aAAO3H,YAAY,CAACmI,aAApB;AACH;;AACD,QAAIR,gBAAgB,GAAG,CAAvB,EAA0B;AACtB,aAAO3H,YAAY,CAACoI,SAApB;AACH;;AACD,WAAOpI,YAAY,CAACqI,QAApB;AACH,GAhCD;;AAiCApI,EAAAA,oBAAoB,CAACzB,SAArB,CAA+B8J,gBAA/B,GAAkD,UAAUhI,gBAAV,EAA4B;AAC1E,SAAKA,gBAAL,GAAwBA,gBAAxB;AACA,SAAKiI,gBAAL;AACH,GAHD;;AAIAtI,EAAAA,oBAAoB,CAACzB,SAArB,CAA+B+J,gBAA/B,GAAkD,YAAY;AAC1D,QAAIpI,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKqI,SAAL,CAAejF,WAAf,EAAJ,EAAkC;AAC9B;AACA;AACA,WAAKhD,WAAL,CAAiB2B,OAAjB,CAAyB,UAAU8D,MAAV,EAAkB;AAAE,eAAOA,MAAM,CAACyC,kBAAP,CAA0BtI,KAAK,CAACG,gBAAhC,CAAP;AAA2D,OAAxG;AACH,KAJD,MAKK;AACD;AACA,UAAIoI,WAAW,GAAG,KAAKF,SAAL,CAAeG,iBAAf,EAAlB;AACA,UAAIC,YAAY,GAAGF,WAAW,CAACtB,MAAZ,CAAmB,UAAUyB,GAAV,EAAe;AAAE,eAAO,CAACA,GAAG,CAAC5C,SAAJ,GAAgB6C,WAAxB;AAAsC,OAA1E,CAAnB,CAHC,CAID;AACA;AACA;;AACA,UAAI,CAACtJ,CAAC,CAACuJ,MAAF,CAAS,KAAKnF,UAAd,CAAL,EAAgC;AAC5B,aAAKrB,gBAAL,CAAsByG,iBAAtB,CAAwCJ,YAAxC,EAAsD,KAAKtI,gBAA3D,EAA6E,YAA7E;AACA;AACH,OAVA,CAWD;;;AACA,UAAI2I,cAAc,GAAG,EAArB;;AACAzJ,MAAAA,CAAC,CAAC0J,aAAF,CAAgB,KAAK1D,aAArB,EAAoC,UAAU3G,GAAV,EAAesK,YAAf,EAA6B;AAC7D,YAAIA,YAAJ,EACIF,cAAc,CAAC/B,IAAf,CAAoBrI,GAApB;AACP,OAHD;;AAIA,UAAIoK,cAAc,CAAChK,MAAf,GAAwB,CAA5B,EAA+B;AAC3B,YAAImK,oBAAoB,GAAGR,YAAY,CAACxB,MAAb,CAAoB,UAAUyB,GAAV,EAAe;AAAE,iBAAOrJ,CAAC,CAAC8H,QAAF,CAAW2B,cAAX,EAA2BJ,GAAG,CAACQ,QAAJ,EAA3B,CAAP;AAAoD,SAAzF,CAA3B,CAD2B,CAE3B;;AACA,aAAK9G,gBAAL,CAAsByG,iBAAtB,CAAwCI,oBAAxC,EAA8D,KAAK9I,gBAAnE,EAAqF,YAArF,EAH2B,CAI3B;;AACA,YAAIgJ,cAAc,GAAG,KAAKhJ,gBAAL,GAAwB,IAAxB,GAA+B,KAApD;AACA,aAAKiJ,aAAL,CAAmB;AAAEC,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,KAAK,EAAEH;AAAnC,SAAnB;AACH;AACJ;AACJ,GAjCD;;AAkCArJ,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BkL,iBAA/B,GAAmD,YAAY;AAC3D,QAAIvJ,KAAK,GAAG,IAAZ;;AACA,QAAIwJ,iBAAiB,GAAG,KAAKpH,gBAAL,CAAsBqH,oBAAtB,EAAxB;AACA,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAIF,iBAAiB,KAAK,IAA1B,EAAgC;AAC5BE,MAAAA,OAAO,GAAGF,iBAAiB,CAACvC,MAAlB,CAAyB,UAAUyB,GAAV,EAAe;AAAE,eAAO,CAACA,GAAG,CAAC5C,SAAJ,GAAgB6C,WAAxB;AAAsC,OAAhF,CAAV;AACH;;AACD,QAAIgB,SAAS,GAAG,KAAKvH,gBAAL,CAAsBgB,WAAtB,EAAhB;AACA,QAAIwG,YAAY,GAAG,CAAnB;AACA,QAAIC,cAAc,GAAG,CAArB;AACAH,IAAAA,OAAO,CAAC3H,OAAR,CAAgB,UAAU2G,GAAV,EAAe;AAC3B;AACA,UAAIA,GAAG,CAAC5C,SAAJ,GAAgB6C,WAApB,EAAiC;AAC7B;AACH,OAJ0B,CAK3B;;;AACA,UAAIxE,MAAM,GAAGuE,GAAG,CAAC5C,SAAJ,EAAb;;AACA,UAAI3B,MAAM,IAAIA,MAAM,CAACc,wBAArB,EAA+C;AAC3C;AACH,OAT0B,CAU3B;;;AACA,UAAIjF,KAAK,CAACqF,aAAN,IAAuB,CAACrF,KAAK,CAACqF,aAAN,CAAoBqD,GAAG,CAACQ,QAAJ,EAApB,CAA5B,EACI;AACJ,UAAIY,OAAJ;;AACA,UAAIH,SAAJ,EAAe;AACX,YAAII,yBAAyB,GAAG,CAACrB,GAAG,CAACsB,YAAJ,EAAD,IAAuB,CAACtB,GAAG,CAACuB,eAAJ,EAAxB,IAAiD,CAACvB,GAAG,CAACwB,YAAJ,EAAlF;;AACA,YAAIH,yBAAJ,EAA+B;AAC3B;AACH;;AACDD,QAAAA,OAAO,GAAGpB,GAAG,CAACyB,aAAJ,MAAuBzB,GAAG,CAAC0B,aAAJ,EAAvB,IAA8C1B,GAAG,CAAC2B,gBAAJ,EAAxD;AACH,OAND,MAOK;AACDP,QAAAA,OAAO,GAAGpB,GAAG,CAAC4B,SAAJ,EAAV;AACH;;AACD,UAAIR,OAAJ,EAAa;AACTF,QAAAA,YAAY;AACf,OAFD,MAGK;AACDC,QAAAA,cAAc;AACjB;AACJ,KA9BD;;AA+BA,QAAID,YAAY,GAAG,CAAf,IAAoBC,cAAc,GAAG,CAAzC,EAA4C;AACxC,aAAOU,SAAP;AACH;;AACD,QAAIX,YAAY,KAAK,CAAjB,IAAsBC,cAAc,GAAG,CAA3C,EAA8C;AAC1C,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GAhDD;;AAiDA/J,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BmF,aAA/B,GAA+C,UAAUC,UAAV,EAAsB;AACjE,SAAKA,UAAL,GAAkBpE,CAAC,CAACuJ,MAAF,CAASnF,UAAT,IAAuBA,UAAU,CAAC+G,WAAX,EAAvB,GAAkD,IAApE;AACA,SAAKC,aAAL;AACA,SAAKnG,wBAAL,CAA8B,KAAKP,UAAnC,EAA+C,IAA/C,EAHiE,CAIjE;;AACA,SAAK3D,WAAL,CAAiB2B,OAAjB,CAAyB,UAAUgE,UAAV,EAAsB;AAC3C,UAAIA,UAAU,YAAYpG,wBAA1B,EAAoD;AAChDoG,QAAAA,UAAU,CAAC2E,oBAAX;AACH;AACJ,KAJD,EALiE,CAUjE;;AACA,SAAKzI,yBAAL;AACA,SAAKgE,sBAAL;AACH,GAbD;;AAcAnG,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BoM,aAA/B,GAA+C,YAAY;AACvD,QAAIzK,KAAK,GAAG,IAAZ;;AACA,QAAIqF,aAAa,GAAG,EAApB;;AACA,QAAI2D,YAAY,GAAG,UAAUrB,IAAV,EAAgB;AAC/B,UAAI,CAACtI,CAAC,CAACuJ,MAAF,CAAS5I,KAAK,CAACyD,UAAf,CAAL,EACI,OAAO,IAAP;;AACJ,UAAIkH,YAAY,GAAG3K,KAAK,CAACM,eAAN,CAAsBqH,IAAtB,CAAnB;;AACA,UAAIf,IAAI,GAAG5G,KAAK,CAACI,WAAN,CAAkByH,GAAlB,CAAsB8C,YAAtB,CAAX;;AACA,UAAI,CAAC/D,IAAL,EACI,OAAO,KAAP;AACJ,UAAIgE,cAAc,GAAGjD,IAAI,YAAYnI,mBAAhB,IAAuCmI,IAAI,CAACzC,SAAL,EAA5D;AACA,UAAI0F,cAAJ,EACI,OAAO,KAAP;AACJ,UAAIC,WAAW,GAAGjE,IAAI,CAACkE,cAAL,EAAlB;AACA,aAAOD,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACL,WAAZ,GAA0B1D,OAA1B,CAAkC9G,KAAK,CAACyD,UAAxC,KAAuD,CAA9E,GAAkF,IAAzF;AACH,KAZD;;AAaA,QAAIsH,sBAAsB,GAAG,UAAUpD,IAAV,EAAgBqD,YAAhB,EAA8B;AACvD,UAAIC,qBAAqB,GAAG,KAA5B;;AACA,UAAItD,IAAI,YAAYnI,mBAApB,EAAyC;AACrC,YAAI0L,aAAa,GAAGlC,YAAY,CAACrB,IAAD,CAAhC;AACAA,QAAAA,IAAI,CAAC/B,WAAL,GAAmB7D,OAAnB,CAA2B,UAAUpB,KAAV,EAAiB;AACxC,cAAIwK,WAAW,GAAGJ,sBAAsB,CAACpK,KAAD,EAAQuK,aAAa,IAAIF,YAAzB,CAAxC;;AACA,cAAIG,WAAJ,EAAiB;AACbF,YAAAA,qBAAqB,GAAGE,WAAxB;AACH;AACJ,SALD;AAMH;;AACD,UAAIC,YAAY,GAAIJ,YAAY,IAAIC,qBAAjB,GAA0C,IAA1C,GAAiDjC,YAAY,CAACrB,IAAD,CAAhF;;AACA,UAAIgD,YAAY,GAAG3K,KAAK,CAACM,eAAN,CAAsBqH,IAAtB,CAAnB;;AACAtC,MAAAA,aAAa,CAACsF,YAAD,CAAb,GAA8BS,YAA9B;AACA,aAAOA,YAAP;AACH,KAfD;;AAgBA,SAAKrH,UAAL,CAAgBhC,OAAhB,CAAwB,UAAU4F,IAAV,EAAgB;AAAE,aAAOoD,sBAAsB,CAACpD,IAAD,EAAO,KAAP,CAA7B;AAA6C,KAAvF;AACA,SAAKtC,aAAL,GAAqBA,aAArB;AACH,GAlCD;;AAmCAvF,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BiG,wBAA/B,GAA0D,UAAUP,UAAV,EAAsBsH,gBAAtB,EAAwC;AAC9F,QAAIrL,KAAK,GAAG,IAAZ;;AACA+D,IAAAA,UAAU,CAAChC,OAAX,CAAmB,UAAUpB,KAAV,EAAiB;AAChC,UAAIiH,MAAM,GAAG5H,KAAK,CAACM,eAAN,CAAsBK,KAAtB,CAAb;;AACA,UAAIiG,IAAI,GAAG5G,KAAK,CAACI,WAAN,CAAkByH,GAAlB,CAAsBD,MAAtB,CAAX;;AACA,UAAIhB,IAAJ,EAAU;AACN,YAAI0E,kBAAkB,GAAGtL,KAAK,CAACqF,aAAN,IAAuBhG,CAAC,CAACuJ,MAAF,CAAS5I,KAAK,CAACqF,aAAN,CAAoBuC,MAApB,CAAT,CAAhD;;AACA,YAAIoB,YAAY,GAAGsC,kBAAkB,GAAGtL,KAAK,CAACqF,aAAN,CAAoBuC,MAApB,CAAH,GAAiC,IAAtE;AACAhB,QAAAA,IAAI,CAAC2E,YAAL,CAAkBF,gBAAgB,IAAIrC,YAAtC;AACH;;AACD,UAAIrI,KAAK,YAAYnB,mBAArB,EAA0C;AACtC,YAAIsF,WAAW,GAAGnE,KAAlB;AACA,YAAI6K,YAAY,GAAG,KAAK,CAAxB;;AACA,YAAI5E,IAAJ,EAAU;AACN,cAAI6E,QAAQ,GAAG7E,IAAI,CAACkB,UAAL,EAAf;AACA0D,UAAAA,YAAY,GAAGH,gBAAgB,GAAGI,QAAH,GAAc,KAA7C;AACH,SAHD,MAIK;AACDD,UAAAA,YAAY,GAAGH,gBAAf;AACH;;AACD,YAAIjH,QAAQ,GAAGU,WAAW,CAACc,WAAZ,EAAf;;AACA5F,QAAAA,KAAK,CAACsE,wBAAN,CAA+BF,QAA/B,EAAyCoH,YAAzC;AACH;AACJ,KArBD;AAsBH,GAxBD;;AAyBA1L,EAAAA,oBAAoB,CAACzB,SAArB,CAA+BkG,eAA/B,GAAiD,YAAY;AACzD,SAAK0B,sBAAL;AACA,SAAKhE,yBAAL;AACH,GAHD;;AAIAnC,EAAAA,oBAAoB,CAACzB,SAArB,CAA+B4H,sBAA/B,GAAwD,YAAY;AAChE,QAAIyF,WAAW,GAAG,KAAKpE,cAAL,EAAlB;AACA,SAAK8B,aAAL,CAAmB;AAAEC,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,KAAK,EAAEoC;AAAhC,KAAnB;AACH,GAHD;;AAIA5L,EAAAA,oBAAoB,CAACzB,SAArB,CAA+B4D,yBAA/B,GAA2D,YAAY;AACnE,QAAIkH,cAAc,GAAG,KAAKI,iBAAL,EAArB;AACA,SAAKH,aAAL,CAAmB;AAAEC,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,KAAK,EAAEH;AAAnC,KAAnB;AACH,GAHD;;AAIArJ,EAAAA,oBAAoB,CAACzB,SAArB,CAA+ByF,kBAA/B,GAAoD,YAAY;AAC5D,QAAI9D,KAAK,GAAG,IAAZ;;AACA,QAAI2L,IAAI,GAAG,KAAKlG,MAAL,EAAX;;AACA,QAAI,KAAKrF,WAAT,EAAsB;AAClB,WAAKA,WAAL,CAAiB2B,OAAjB,CAAyB,UAAUqE,YAAV,EAAwB;AAC7CuF,QAAAA,IAAI,CAACC,WAAL,CAAiBxF,YAAY,CAACX,MAAb,EAAjB;;AACAzF,QAAAA,KAAK,CAAC6L,WAAN,CAAkBzF,YAAlB;AACH,OAHD;AAIH;;AACD,SAAKhG,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACH,GAVD;;AAWAP,EAAAA,oBAAoB,CAACzB,SAArB,CAA+ByN,OAA/B,GAAyC,YAAY;AACjD,SAAKhI,kBAAL;;AACA/D,IAAAA,MAAM,CAAC1B,SAAP,CAAiByN,OAAjB,CAAyB7L,IAAzB,CAA8B,IAA9B;AACH,GAHD;;AAIAH,EAAAA,oBAAoB,CAACI,QAArB,GAAgC,6CAAhC;;AACA3B,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,kBAAD,CADF,CAAD,EAEPQ,oBAAoB,CAACzB,SAFd,EAEyB,kBAFzB,EAE6C,KAAK,CAFlD,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,wBAAD,CADF,CAAD,EAEPQ,oBAAoB,CAACzB,SAFd,EAEyB,eAFzB,EAE0C,KAAK,CAF/C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,WAAD,CADF,CAAD,EAEPQ,oBAAoB,CAACzB,SAFd,EAEyB,WAFzB,EAEsC,KAAK,CAF3C,CAAV;;AAGA,SAAOyB,oBAAP;AACH,CAnZyC,CAmZxCL,qBAnZwC,CAA1C;;AAoZA,SAASK,oBAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Events, OriginalColumnGroup, ManagedFocusComponent, Constants } from \"@ag-grid-community/core\";\nimport { ToolPanelColumnGroupComp } from \"./toolPanelColumnGroupComp\";\nimport { ToolPanelColumnComp } from \"./toolPanelColumnComp\";\nimport { EXPAND_STATE } from \"./primaryColsHeaderPanel\";\nvar PrimaryColsListPanel = /** @class */ (function (_super) {\n    __extends(PrimaryColsListPanel, _super);\n    function PrimaryColsListPanel() {\n        var _this = _super.call(this, PrimaryColsListPanel.TEMPLATE) || this;\n        _this.selectAllChecked = true;\n        _this.columnComps = new Map();\n        _this.getColumnCompId = function (columnGroupChild) {\n            if (columnGroupChild instanceof OriginalColumnGroup) {\n                // group comps are stored using a custom key (groupId + child colIds concatenated) as we need\n                // to distinguish individual column groups after they have been split by user\n                var childIds = columnGroupChild.getLeafColumns().map(function (child) { return child.getId(); }).join('-');\n                return columnGroupChild.getId() + '-' + childIds;\n            }\n            return columnGroupChild.getId();\n        };\n        return _this;\n    }\n    PrimaryColsListPanel.prototype.init = function (params, allowDragging) {\n        var _this = this;\n        this.params = params;\n        this.allowDragging = allowDragging;\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.onColumnsChanged.bind(this));\n        }\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnsChanged.bind(this));\n        var eventsImpactingCheckedState = [\n            Events.EVENT_COLUMN_EVERYTHING_CHANGED,\n            Events.EVENT_COLUMN_PIVOT_CHANGED,\n            Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            Events.EVENT_COLUMN_VISIBLE,\n            Events.EVENT_NEW_COLUMNS_LOADED\n        ];\n        eventsImpactingCheckedState.forEach(function (event) {\n            // update header select all checkbox with current selection state\n            _this.addManagedListener(_this.eventService, event, _this.fireSelectionChangedEvent.bind(_this));\n        });\n        this.expandGroupsByDefault = !this.params.contractColumnSelection;\n        if (this.columnController.isReady()) {\n            this.onColumnsChanged();\n        }\n    };\n    PrimaryColsListPanel.prototype.handleKeyDown = function (e) {\n        switch (e.keyCode) {\n            case Constants.KEY_UP:\n            case Constants.KEY_DOWN:\n                e.preventDefault();\n                this.nagivateToNextItem(e.keyCode === Constants.KEY_UP);\n                break;\n        }\n    };\n    PrimaryColsListPanel.prototype.nagivateToNextItem = function (up) {\n        var nextEl = this.focusController.findNextFocusableElement(this.getFocusableElement(), true, up);\n        if (nextEl) {\n            nextEl.focus();\n        }\n    };\n    PrimaryColsListPanel.prototype.onColumnsChanged = function () {\n        var pivotModeActive = this.columnController.isPivotMode();\n        var shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n        shouldSyncColumnLayoutWithGrid ? this.syncColumnLayout() : this.buildTreeFromProvidedColumnDefs();\n        this.setFilterText(this.filterText);\n    };\n    PrimaryColsListPanel.prototype.syncColumnLayout = function () {\n        this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));\n    };\n    PrimaryColsListPanel.prototype.setColumnLayout = function (colDefs) {\n        this.destroyColumnComps();\n        // create column tree using supplied colDef's\n        this.columnTree = this.colDefService.createColumnTree(colDefs);\n        // using col defs to check if groups exist as it could be a custom layout\n        var groupsExist = colDefs.some(function (colDef) {\n            return colDef && typeof colDef.children !== 'undefined';\n        });\n        this.recursivelyAddComps(this.columnTree, 0, groupsExist);\n        this.recursivelySetVisibility(this.columnTree, true);\n        // notify header\n        this.notifyListeners();\n    };\n    PrimaryColsListPanel.prototype.buildTreeFromProvidedColumnDefs = function () {\n        this.destroyColumnComps();\n        // add column / group comps to tool panel\n        this.columnTree = this.columnController.getPrimaryColumnTree();\n        var groupsExist = this.columnController.isPrimaryColumnGroupsPresent();\n        this.recursivelyAddComps(this.columnTree, 0, groupsExist);\n        this.recursivelySetVisibility(this.columnTree, true);\n        // notify header\n        this.notifyListeners();\n    };\n    PrimaryColsListPanel.prototype.recursivelyAddComps = function (tree, dept, groupsExist) {\n        var _this = this;\n        tree.forEach(function (child) {\n            if (child instanceof OriginalColumnGroup) {\n                _this.recursivelyAddGroupComps(child, dept, groupsExist);\n            }\n            else {\n                _this.addColumnComps(child, dept, groupsExist);\n            }\n        });\n    };\n    PrimaryColsListPanel.prototype.recursivelyAddGroupComps = function (columnGroup, dept, groupsExist) {\n        var _this = this;\n        // only render group if user provided the definition\n        var newDept;\n        if (columnGroup.getColGroupDef() && columnGroup.getColGroupDef().suppressColumnsToolPanel) {\n            return;\n        }\n        if (!columnGroup.isPadding()) {\n            var renderedGroup = new ToolPanelColumnGroupComp(columnGroup, dept, this.allowDragging, this.expandGroupsByDefault, this.onGroupExpanded.bind(this), function () { return _this.filterResults; });\n            this.getContext().createBean(renderedGroup);\n            var renderedGroupGui = renderedGroup.getGui();\n            this.appendChild(renderedGroupGui);\n            // we want to indent on the gui for the children\n            newDept = dept + 1;\n            // group comps are stored using a custom key (groupId + child colIds concatenated) as we need\n            // to distinguish individual column groups after they have been split by user\n            var key = this.getColumnCompId(columnGroup);\n            this.columnComps.set(key, renderedGroup);\n        }\n        else {\n            // no children, so no indent\n            newDept = dept;\n        }\n        this.recursivelyAddComps(columnGroup.getChildren(), newDept, groupsExist);\n    };\n    PrimaryColsListPanel.prototype.addColumnComps = function (column, dept, groupsExist) {\n        if (column.getColDef() && column.getColDef().suppressColumnsToolPanel) {\n            return;\n        }\n        var columnComp = new ToolPanelColumnComp(column, dept, this.allowDragging, groupsExist);\n        this.getContext().createBean(columnComp);\n        var columnCompGui = columnComp.getGui();\n        this.appendChild(columnCompGui);\n        this.columnComps.set(column.getId(), columnComp);\n    };\n    PrimaryColsListPanel.prototype.onGroupExpanded = function () {\n        this.recursivelySetVisibility(this.columnTree, true);\n        this.fireGroupExpandedEvent();\n    };\n    PrimaryColsListPanel.prototype.doSetExpandedAll = function (value) {\n        this.columnComps.forEach(function (renderedItem) {\n            if (renderedItem.isExpandable()) {\n                renderedItem.setExpanded(value);\n            }\n        });\n    };\n    PrimaryColsListPanel.prototype.setGroupsExpanded = function (expand, groupIds) {\n        var _this = this;\n        var expandedGroupIds = [];\n        if (!groupIds) {\n            this.doSetExpandedAll(expand);\n            return;\n        }\n        groupIds.forEach(function (suppliedGroupId) {\n            // we need to search through all comps to handle the case when groups are split\n            _this.columnComps.forEach(function (comp, key) {\n                // check if group comp starts with supplied group id as the tool panel keys contain\n                // groupId + childIds concatenated\n                var foundMatchingGroupComp = key.indexOf(suppliedGroupId) === 0;\n                if (foundMatchingGroupComp) {\n                    comp.setExpanded(expand);\n                    expandedGroupIds.push(suppliedGroupId);\n                }\n            });\n        });\n        var unrecognisedGroupIds = groupIds.filter(function (groupId) { return !_.includes(expandedGroupIds, groupId); });\n        if (unrecognisedGroupIds.length > 0) {\n            console.warn('ag-Grid: unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);\n        }\n    };\n    PrimaryColsListPanel.prototype.getExpandState = function () {\n        var _this = this;\n        var expandedCount = 0;\n        var notExpandedCount = 0;\n        var recursiveFunc = function (items) {\n            items.forEach(function (item) {\n                // only interested in groups\n                if (item instanceof OriginalColumnGroup) {\n                    var compId = _this.getColumnCompId(item);\n                    var comp = _this.columnComps.get(compId);\n                    if (comp) {\n                        if (comp.isExpanded()) {\n                            expandedCount++;\n                        }\n                        else {\n                            notExpandedCount++;\n                        }\n                    }\n                    var columnGroup = item;\n                    var groupChildren = columnGroup.getChildren();\n                    recursiveFunc(groupChildren);\n                }\n            });\n        };\n        recursiveFunc(this.columnTree);\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            return EXPAND_STATE.INDETERMINATE;\n        }\n        if (notExpandedCount > 0) {\n            return EXPAND_STATE.COLLAPSED;\n        }\n        return EXPAND_STATE.EXPANDED;\n    };\n    PrimaryColsListPanel.prototype.doSetSelectedAll = function (selectAllChecked) {\n        this.selectAllChecked = selectAllChecked;\n        this.updateSelections();\n    };\n    PrimaryColsListPanel.prototype.updateSelections = function () {\n        var _this = this;\n        if (this.columnApi.isPivotMode()) {\n            // if pivot mode is on, then selecting columns has special meaning (eg group, aggregate, pivot etc),\n            // so there is no bulk operation we can do.\n            this.columnComps.forEach(function (column) { return column.onSelectAllChanged(_this.selectAllChecked); });\n        }\n        else {\n            // we don't want to change visibility on lock visible columns\n            var primaryCols = this.columnApi.getPrimaryColumns();\n            var colsToChange = primaryCols.filter(function (col) { return !col.getColDef().lockVisible; });\n            // however if pivot mode is off, then it's all about column visibility so we can do a bulk\n            // operation directly with the column controller. we could column.onSelectAllChanged(checked)\n            // as above, however this would work on each column independently and take longer.\n            if (!_.exists(this.filterText)) {\n                this.columnController.setColumnsVisible(colsToChange, this.selectAllChecked, 'columnMenu');\n                return;\n            }\n            // obtain list of columns currently filtered\n            var filteredCols_1 = [];\n            _.iterateObject(this.filterResults, function (key, passesFilter) {\n                if (passesFilter)\n                    filteredCols_1.push(key);\n            });\n            if (filteredCols_1.length > 0) {\n                var filteredColsToChange = colsToChange.filter(function (col) { return _.includes(filteredCols_1, col.getColId()); });\n                // update visibility of columns currently filtered\n                this.columnController.setColumnsVisible(filteredColsToChange, this.selectAllChecked, 'columnMenu');\n                // update select all header with new state\n                var selectionState = this.selectAllChecked ? true : false;\n                this.dispatchEvent({ type: 'selectionChanged', state: selectionState });\n            }\n        }\n    };\n    PrimaryColsListPanel.prototype.getSelectionState = function () {\n        var _this = this;\n        var allPrimaryColumns = this.columnController.getAllPrimaryColumns();\n        var columns = [];\n        if (allPrimaryColumns !== null) {\n            columns = allPrimaryColumns.filter(function (col) { return !col.getColDef().lockVisible; });\n        }\n        var pivotMode = this.columnController.isPivotMode();\n        var checkedCount = 0;\n        var uncheckedCount = 0;\n        columns.forEach(function (col) {\n            // ignore lock visible columns\n            if (col.getColDef().lockVisible) {\n                return;\n            }\n            // not not count columns not in tool panel\n            var colDef = col.getColDef();\n            if (colDef && colDef.suppressColumnsToolPanel) {\n                return;\n            }\n            // ignore columns that have been removed from panel by filter\n            if (_this.filterResults && !_this.filterResults[col.getColId()])\n                return;\n            var checked;\n            if (pivotMode) {\n                var noPivotModeOptionsAllowed = !col.isAllowPivot() && !col.isAllowRowGroup() && !col.isAllowValue();\n                if (noPivotModeOptionsAllowed) {\n                    return;\n                }\n                checked = col.isValueActive() || col.isPivotActive() || col.isRowGroupActive();\n            }\n            else {\n                checked = col.isVisible();\n            }\n            if (checked) {\n                checkedCount++;\n            }\n            else {\n                uncheckedCount++;\n            }\n        });\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n        if (checkedCount === 0 || uncheckedCount > 0) {\n            return false;\n        }\n        return true;\n    };\n    PrimaryColsListPanel.prototype.setFilterText = function (filterText) {\n        this.filterText = _.exists(filterText) ? filterText.toLowerCase() : null;\n        this.filterColumns();\n        this.recursivelySetVisibility(this.columnTree, true);\n        // groups selection state may need to be updated when filter is present\n        this.columnComps.forEach(function (columnComp) {\n            if (columnComp instanceof ToolPanelColumnGroupComp) {\n                columnComp.onColumnStateChanged();\n            }\n        });\n        // update header panel with current selection and expanded state\n        this.fireSelectionChangedEvent();\n        this.fireGroupExpandedEvent();\n    };\n    PrimaryColsListPanel.prototype.filterColumns = function () {\n        var _this = this;\n        var filterResults = {};\n        var passesFilter = function (item) {\n            if (!_.exists(_this.filterText))\n                return true;\n            var columnCompId = _this.getColumnCompId(item);\n            var comp = _this.columnComps.get(columnCompId);\n            if (!comp)\n                return false;\n            var isPaddingGroup = item instanceof OriginalColumnGroup && item.isPadding();\n            if (isPaddingGroup)\n                return false;\n            var displayName = comp.getDisplayName();\n            return displayName !== null ? displayName.toLowerCase().indexOf(_this.filterText) >= 0 : true;\n        };\n        var recursivelyCheckFilter = function (item, parentPasses) {\n            var atLeastOneChildPassed = false;\n            if (item instanceof OriginalColumnGroup) {\n                var groupPasses_1 = passesFilter(item);\n                item.getChildren().forEach(function (child) {\n                    var childPasses = recursivelyCheckFilter(child, groupPasses_1 || parentPasses);\n                    if (childPasses) {\n                        atLeastOneChildPassed = childPasses;\n                    }\n                });\n            }\n            var filterPasses = (parentPasses || atLeastOneChildPassed) ? true : passesFilter(item);\n            var columnCompId = _this.getColumnCompId(item);\n            filterResults[columnCompId] = filterPasses;\n            return filterPasses;\n        };\n        this.columnTree.forEach(function (item) { return recursivelyCheckFilter(item, false); });\n        this.filterResults = filterResults;\n    };\n    PrimaryColsListPanel.prototype.recursivelySetVisibility = function (columnTree, parentGroupsOpen) {\n        var _this = this;\n        columnTree.forEach(function (child) {\n            var compId = _this.getColumnCompId(child);\n            var comp = _this.columnComps.get(compId);\n            if (comp) {\n                var filterResultExists = _this.filterResults && _.exists(_this.filterResults[compId]);\n                var passesFilter = filterResultExists ? _this.filterResults[compId] : true;\n                comp.setDisplayed(parentGroupsOpen && passesFilter);\n            }\n            if (child instanceof OriginalColumnGroup) {\n                var columnGroup = child;\n                var childrenOpen = void 0;\n                if (comp) {\n                    var expanded = comp.isExpanded();\n                    childrenOpen = parentGroupsOpen ? expanded : false;\n                }\n                else {\n                    childrenOpen = parentGroupsOpen;\n                }\n                var children = columnGroup.getChildren();\n                _this.recursivelySetVisibility(children, childrenOpen);\n            }\n        });\n    };\n    PrimaryColsListPanel.prototype.notifyListeners = function () {\n        this.fireGroupExpandedEvent();\n        this.fireSelectionChangedEvent();\n    };\n    PrimaryColsListPanel.prototype.fireGroupExpandedEvent = function () {\n        var expandState = this.getExpandState();\n        this.dispatchEvent({ type: 'groupExpanded', state: expandState });\n    };\n    PrimaryColsListPanel.prototype.fireSelectionChangedEvent = function () {\n        var selectionState = this.getSelectionState();\n        this.dispatchEvent({ type: 'selectionChanged', state: selectionState });\n    };\n    PrimaryColsListPanel.prototype.destroyColumnComps = function () {\n        var _this = this;\n        var eGui = this.getGui();\n        if (this.columnComps) {\n            this.columnComps.forEach(function (renderedItem) {\n                eGui.removeChild(renderedItem.getGui());\n                _this.destroyBean(renderedItem);\n            });\n        }\n        this.columnComps = new Map();\n    };\n    PrimaryColsListPanel.prototype.destroy = function () {\n        this.destroyColumnComps();\n        _super.prototype.destroy.call(this);\n    };\n    PrimaryColsListPanel.TEMPLATE = \"<div class=\\\"ag-column-select-list\\\"></div>\";\n    __decorate([\n        Autowired('columnController')\n    ], PrimaryColsListPanel.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('toolPanelColDefService')\n    ], PrimaryColsListPanel.prototype, \"colDefService\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], PrimaryColsListPanel.prototype, \"columnApi\", void 0);\n    return PrimaryColsListPanel;\n}(ManagedFocusComponent));\nexport { PrimaryColsListPanel };\n"]},"metadata":{},"sourceType":"module"}