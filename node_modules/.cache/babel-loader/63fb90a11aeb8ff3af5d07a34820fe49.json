{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nexport function padStart(value, totalStringSize) {\n  var asString = \"\" + value;\n\n  while (asString.length < totalStringSize) {\n    asString = \"0\" + asString;\n  }\n\n  return asString;\n}\nexport function createArrayOfNumbers(first, last) {\n  var result = [];\n\n  for (var i = first; i <= last; i++) {\n    result.push(i);\n  }\n\n  return result;\n}\n/**\n * Check if a value is numeric\n * from http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers\n * @param {any} value\n * @return {boolean}\n */\n\nexport function isNumeric(value) {\n  return value !== '' && !isNaN(parseFloat(value)) && isFinite(value);\n}\nexport function getMaxSafeInteger() {\n  // eslint-disable-next-line\n  return Number.MAX_SAFE_INTEGER || 9007199254740991;\n}\nexport function cleanNumber(value) {\n  if (typeof value === 'string') {\n    value = parseInt(value, 10);\n  }\n\n  if (typeof value === 'number') {\n    return Math.floor(value);\n  } else {\n    return null;\n  }\n}\nexport function decToHex(number, bytes) {\n  var hex = '';\n\n  for (var i = 0; i < bytes; i++) {\n    hex += String.fromCharCode(number & 0xff);\n    number >>>= 8;\n  }\n\n  return hex;\n}\nexport function formatNumberTwoDecimalPlacesAndCommas(value) {\n  if (typeof value !== 'number') {\n    return '';\n  }\n\n  return formatNumberCommas(Math.round(value * 100) / 100);\n}\n/**\n * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})\n * puts in decimal places in IE, so we use this method instead\n * from: http://blog.tompawlak.org/number-currency-formatting-javascript\n * @param {number} value\n * @returns {string}\n */\n\nexport function formatNumberCommas(value) {\n  if (typeof value !== 'number') {\n    return '';\n  }\n\n  return value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n}\nexport function sum(values) {\n  return values == null ? null : values.reduce(function (total, value) {\n    return total + value;\n  }, 0);\n}","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/utils/number.js"],"names":["padStart","value","totalStringSize","asString","length","createArrayOfNumbers","first","last","result","i","push","isNumeric","isNaN","parseFloat","isFinite","getMaxSafeInteger","Number","MAX_SAFE_INTEGER","cleanNumber","parseInt","Math","floor","decToHex","number","bytes","hex","String","fromCharCode","formatNumberTwoDecimalPlacesAndCommas","formatNumberCommas","round","toString","replace","sum","values","reduce","total"],"mappings":"AAAA;;;;;;AAMA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,eAAzB,EAA0C;AAC7C,MAAIC,QAAQ,GAAG,KAAKF,KAApB;;AACA,SAAOE,QAAQ,CAACC,MAAT,GAAkBF,eAAzB,EAA0C;AACtCC,IAAAA,QAAQ,GAAG,MAAMA,QAAjB;AACH;;AACD,SAAOA,QAAP;AACH;AACD,OAAO,SAASE,oBAAT,CAA8BC,KAA9B,EAAqCC,IAArC,EAA2C;AAC9C,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAGH,KAAb,EAAoBG,CAAC,IAAIF,IAAzB,EAA+BE,CAAC,EAAhC,EAAoC;AAChCD,IAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;;AACD,SAAOD,MAAP;AACH;AACD;;;;;;;AAMA,OAAO,SAASG,SAAT,CAAmBV,KAAnB,EAA0B;AAC7B,SAAOA,KAAK,KAAK,EAAV,IAAgB,CAACW,KAAK,CAACC,UAAU,CAACZ,KAAD,CAAX,CAAtB,IAA6Ca,QAAQ,CAACb,KAAD,CAA5D;AACH;AACD,OAAO,SAASc,iBAAT,GAA6B;AAChC;AACA,SAAOC,MAAM,CAACC,gBAAP,IAA2B,gBAAlC;AACH;AACD,OAAO,SAASC,WAAT,CAAqBjB,KAArB,EAA4B;AAC/B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,IAAAA,KAAK,GAAGkB,QAAQ,CAAClB,KAAD,EAAQ,EAAR,CAAhB;AACH;;AACD,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOmB,IAAI,CAACC,KAAL,CAAWpB,KAAX,CAAP;AACH,GAFD,MAGK;AACD,WAAO,IAAP;AACH;AACJ;AACD,OAAO,SAASqB,QAAT,CAAkBC,MAAlB,EAA0BC,KAA1B,EAAiC;AACpC,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,KAApB,EAA2Bf,CAAC,EAA5B,EAAgC;AAC5BgB,IAAAA,GAAG,IAAIC,MAAM,CAACC,YAAP,CAAoBJ,MAAM,GAAG,IAA7B,CAAP;AACAA,IAAAA,MAAM,MAAM,CAAZ;AACH;;AACD,SAAOE,GAAP;AACH;AACD,OAAO,SAASG,qCAAT,CAA+C3B,KAA/C,EAAsD;AACzD,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAO,EAAP;AACH;;AACD,SAAO4B,kBAAkB,CAACT,IAAI,CAACU,KAAL,CAAW7B,KAAK,GAAG,GAAnB,IAA0B,GAA3B,CAAzB;AACH;AACD;;;;;;;;AAOA,OAAO,SAAS4B,kBAAT,CAA4B5B,KAA5B,EAAmC;AACtC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAO,EAAP;AACH;;AACD,SAAOA,KAAK,CAAC8B,QAAN,GAAiBC,OAAjB,CAAyB,yBAAzB,EAAoD,KAApD,CAAP;AACH;AACD,OAAO,SAASC,GAAT,CAAaC,MAAb,EAAqB;AACxB,SAAOA,MAAM,IAAI,IAAV,GAAiB,IAAjB,GAAwBA,MAAM,CAACC,MAAP,CAAc,UAAUC,KAAV,EAAiBnC,KAAjB,EAAwB;AAAE,WAAOmC,KAAK,GAAGnC,KAAf;AAAuB,GAA/D,EAAiE,CAAjE,CAA/B;AACH","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nexport function padStart(value, totalStringSize) {\n    var asString = \"\" + value;\n    while (asString.length < totalStringSize) {\n        asString = \"0\" + asString;\n    }\n    return asString;\n}\nexport function createArrayOfNumbers(first, last) {\n    var result = [];\n    for (var i = first; i <= last; i++) {\n        result.push(i);\n    }\n    return result;\n}\n/**\n * Check if a value is numeric\n * from http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers\n * @param {any} value\n * @return {boolean}\n */\nexport function isNumeric(value) {\n    return value !== '' && !isNaN(parseFloat(value)) && isFinite(value);\n}\nexport function getMaxSafeInteger() {\n    // eslint-disable-next-line\n    return Number.MAX_SAFE_INTEGER || 9007199254740991;\n}\nexport function cleanNumber(value) {\n    if (typeof value === 'string') {\n        value = parseInt(value, 10);\n    }\n    if (typeof value === 'number') {\n        return Math.floor(value);\n    }\n    else {\n        return null;\n    }\n}\nexport function decToHex(number, bytes) {\n    var hex = '';\n    for (var i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(number & 0xff);\n        number >>>= 8;\n    }\n    return hex;\n}\nexport function formatNumberTwoDecimalPlacesAndCommas(value) {\n    if (typeof value !== 'number') {\n        return '';\n    }\n    return formatNumberCommas(Math.round(value * 100) / 100);\n}\n/**\n * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})\n * puts in decimal places in IE, so we use this method instead\n * from: http://blog.tompawlak.org/number-currency-formatting-javascript\n * @param {number} value\n * @returns {string}\n */\nexport function formatNumberCommas(value) {\n    if (typeof value !== 'number') {\n        return '';\n    }\n    return value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n}\nexport function sum(values) {\n    return values == null ? null : values.reduce(function (total, value) { return total + value; }, 0);\n}\n"]},"metadata":{},"sourceType":"module"}