{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { AgCheckbox, Autowired, Column, CssClassApplier, DragSourceType, Events, PostConstruct, RefSelector, ManagedFocusComponent, _, Constants } from \"@ag-grid-community/core\";\n\nvar ToolPanelColumnComp =\n/** @class */\nfunction (_super) {\n  __extends(ToolPanelColumnComp, _super);\n\n  function ToolPanelColumnComp(column, columnDept, allowDragging, groupsExist) {\n    var _this = _super.call(this) || this;\n\n    _this.processingColumnStateChange = false;\n    _this.column = column;\n    _this.columnDept = columnDept;\n    _this.allowDragging = allowDragging;\n    _this.groupsExist = groupsExist;\n    return _this;\n  }\n\n  ToolPanelColumnComp.prototype.init = function () {\n    this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n    this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsWrapper);\n\n    _.addCssClass(this.eDragHandle, 'ag-drag-handle');\n\n    _.addCssClass(this.eDragHandle, 'ag-column-select-column-drag-handle');\n\n    this.cbSelect.getGui().insertAdjacentElement('afterend', this.eDragHandle);\n    this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'toolPanel');\n\n    var displayNameSanitised = _.escape(this.displayName);\n\n    this.eLabel.innerHTML = displayNameSanitised;\n    this.cbSelect.setInputAriaLabel(this.displayName + \" Toggle Selection\"); // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n\n    var indent = this.columnDept;\n\n    if (this.groupsExist) {\n      this.addCssClass('ag-column-select-add-group-indent');\n    }\n\n    this.addCssClass(\"ag-column-select-indent-\" + indent);\n    this.setupDragging();\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.cbSelect, AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));\n    this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n    this.onColumnStateChanged();\n    CssClassApplier.addToolPanelClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);\n  };\n\n  ToolPanelColumnComp.prototype.handleKeyDown = function (e) {\n    switch (e.keyCode) {\n      case Constants.KEY_SPACE:\n        e.preventDefault();\n\n        if (this.isSelectable()) {\n          this.onSelectAllChanged(!this.isSelected());\n        }\n\n    }\n  };\n\n  ToolPanelColumnComp.prototype.onLabelClicked = function () {\n    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n      return;\n    }\n\n    var nextState = !this.cbSelect.getValue();\n    this.onChangeCommon(nextState);\n  };\n\n  ToolPanelColumnComp.prototype.onCheckboxChanged = function (event) {\n    this.onChangeCommon(event.selected);\n  };\n\n  ToolPanelColumnComp.prototype.onChangeCommon = function (nextState) {\n    // ignore lock visible columns\n    if (this.column.getColDef().lockVisible) {\n      return;\n    } // only want to action if the user clicked the checkbox, not is we are setting the checkbox because\n    // of a change in the model\n\n\n    if (this.processingColumnStateChange) {\n      return;\n    } // action in a timeout, as the action takes some time, we want to update the icons first\n    // so the user gets nice feedback when they click. otherwise there would be a lag and the\n    // user would think the checkboxes were clunky\n\n\n    if (this.columnController.isPivotMode()) {\n      if (nextState) {\n        this.actionCheckedPivotMode();\n      } else {\n        this.actionUnCheckedPivotMode();\n      }\n    } else {\n      this.columnController.setColumnVisible(this.column, nextState, \"columnMenu\");\n    }\n  };\n\n  ToolPanelColumnComp.prototype.actionUnCheckedPivotMode = function () {\n    var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();\n    var column = this.column;\n    var columnController = this.columnController; // remove pivot if column is pivoted\n\n    if (column.isPivotActive()) {\n      if (functionPassive) {\n        var copyOfPivotColumns = this.columnController.getPivotColumns().slice();\n        copyOfPivotColumns.push(column);\n        var event_1 = {\n          type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n          columns: copyOfPivotColumns,\n          api: this.gridApi,\n          columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event_1);\n      } else {\n        columnController.removePivotColumn(column, \"columnMenu\");\n      }\n    } // remove value if column is value\n\n\n    if (column.isValueActive()) {\n      if (functionPassive) {\n        var copyOfValueColumns = this.columnController.getValueColumns().slice();\n        copyOfValueColumns.push(column);\n        var event_2 = {\n          type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n          columns: copyOfValueColumns,\n          api: this.gridApi,\n          columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event_2);\n      } else {\n        columnController.removeValueColumn(column, \"columnMenu\");\n      }\n    } // remove group if column is grouped\n\n\n    if (column.isRowGroupActive()) {\n      if (functionPassive) {\n        var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();\n        copyOfRowGroupColumns.push(column);\n        var event_3 = {\n          type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n          columns: copyOfRowGroupColumns,\n          api: this.gridApi,\n          columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event_3);\n      } else {\n        columnController.removeRowGroupColumn(column, \"columnMenu\");\n      }\n    }\n  };\n\n  ToolPanelColumnComp.prototype.actionCheckedPivotMode = function () {\n    var column = this.column; // function already active, so do nothing\n\n    if (column.isValueActive() || column.isPivotActive() || column.isRowGroupActive()) {\n      return;\n    }\n\n    var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();\n\n    if (column.isAllowValue()) {\n      if (functionPassive) {\n        var copyOfValueColumns = this.columnController.getValueColumns().slice();\n\n        _.removeFromArray(copyOfValueColumns, column);\n\n        var event_4 = {\n          type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n          api: this.gridApi,\n          columnApi: this.columnApi,\n          columns: copyOfValueColumns\n        };\n        this.eventService.dispatchEvent(event_4);\n      } else {\n        this.columnController.addValueColumn(column, \"columnMenu\");\n      }\n    } else if (column.isAllowRowGroup()) {\n      if (functionPassive) {\n        var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();\n\n        _.removeFromArray(copyOfRowGroupColumns, column);\n\n        var event_5 = {\n          type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n          api: this.gridApi,\n          columnApi: this.columnApi,\n          columns: copyOfRowGroupColumns\n        };\n        this.eventService.dispatchEvent(event_5);\n      } else {\n        this.columnController.addRowGroupColumn(column, \"columnMenu\");\n      }\n    } else if (column.isAllowPivot()) {\n      if (functionPassive) {\n        var copyOfPivotColumns = this.columnController.getPivotColumns().slice();\n\n        _.removeFromArray(copyOfPivotColumns, column);\n\n        var event_6 = {\n          type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n          api: this.gridApi,\n          columnApi: this.columnApi,\n          columns: copyOfPivotColumns\n        };\n        this.eventService.dispatchEvent(event_6);\n      } else {\n        this.columnController.addPivotColumn(column, \"columnMenu\");\n      }\n    }\n  };\n\n  ToolPanelColumnComp.prototype.setupDragging = function () {\n    var _this = this;\n\n    if (!this.allowDragging) {\n      _.setDisplayed(this.eDragHandle, false);\n\n      return;\n    }\n\n    var dragSource = {\n      type: DragSourceType.ToolPanel,\n      eElement: this.eDragHandle,\n      dragItemName: this.displayName,\n      getDragItem: function () {\n        return _this.createDragItem();\n      }\n    };\n    this.dragAndDropService.addDragSource(dragSource, true);\n    this.addDestroyFunc(function () {\n      return _this.dragAndDropService.removeDragSource(dragSource);\n    });\n  };\n\n  ToolPanelColumnComp.prototype.createDragItem = function () {\n    var visibleState = {};\n    visibleState[this.column.getId()] = this.column.isVisible();\n    return {\n      columns: [this.column],\n      visibleState: visibleState\n    };\n  };\n\n  ToolPanelColumnComp.prototype.onColumnStateChanged = function () {\n    this.processingColumnStateChange = true;\n    var isPivotMode = this.columnController.isPivotMode();\n\n    if (isPivotMode) {\n      // if reducing, checkbox means column is one of pivot, value or group\n      var anyFunctionActive = this.column.isAnyFunctionActive();\n      this.cbSelect.setValue(anyFunctionActive);\n    } else {\n      // if not reducing, the checkbox tells us if column is visible or not\n      this.cbSelect.setValue(this.column.isVisible());\n    }\n\n    var checkboxReadOnly;\n\n    if (isPivotMode) {\n      // when in pivot mode, the item should be read only if:\n      //  a) gui is not allowed make any changes\n      var functionsReadOnly = this.gridOptionsWrapper.isFunctionsReadOnly(); //  b) column is not allow any functions on it\n\n      var noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n      checkboxReadOnly = functionsReadOnly || noFunctionsAllowed;\n    } else {\n      // when in normal mode, the checkbox is read only if visibility is locked\n      checkboxReadOnly = !!this.column.getColDef().lockVisible;\n    }\n\n    this.cbSelect.setReadOnly(checkboxReadOnly);\n\n    _.addOrRemoveCssClass(this.getGui(), 'ag-column-select-column-readonly', checkboxReadOnly);\n\n    var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();\n    this.cbSelect.setPassive(checkboxPassive);\n    this.processingColumnStateChange = false;\n  };\n\n  ToolPanelColumnComp.prototype.getDisplayName = function () {\n    return this.displayName;\n  };\n\n  ToolPanelColumnComp.prototype.onSelectAllChanged = function (value) {\n    if (value !== this.cbSelect.getValue()) {\n      if (!this.cbSelect.isReadOnly()) {\n        this.cbSelect.toggle();\n      }\n    }\n  };\n\n  ToolPanelColumnComp.prototype.isSelected = function () {\n    return this.cbSelect.getValue();\n  };\n\n  ToolPanelColumnComp.prototype.isSelectable = function () {\n    return !this.cbSelect.isReadOnly();\n  };\n\n  ToolPanelColumnComp.prototype.isExpandable = function () {\n    return false;\n  };\n\n  ToolPanelColumnComp.prototype.setExpanded = function (value) {\n    console.warn('ag-grid: can not expand a column item that does not represent a column group header');\n  };\n\n  ToolPanelColumnComp.TEMPLATE = \"<div class=\\\"ag-column-select-column\\\" tabindex=\\\"-1\\\">\\n            <ag-checkbox ref=\\\"cbSelect\\\" class=\\\"ag-column-select-checkbox\\\"></ag-checkbox>\\n            <span class=\\\"ag-column-select-column-label\\\" ref=\\\"eLabel\\\"></span>\\n        </div>\";\n\n  __decorate([Autowired('gridOptionsWrapper')], ToolPanelColumnComp.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnController')], ToolPanelColumnComp.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('dragAndDropService')], ToolPanelColumnComp.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Autowired('columnApi')], ToolPanelColumnComp.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], ToolPanelColumnComp.prototype, \"gridApi\", void 0);\n\n  __decorate([RefSelector('eLabel')], ToolPanelColumnComp.prototype, \"eLabel\", void 0);\n\n  __decorate([RefSelector('cbSelect')], ToolPanelColumnComp.prototype, \"cbSelect\", void 0);\n\n  __decorate([PostConstruct], ToolPanelColumnComp.prototype, \"init\", null);\n\n  return ToolPanelColumnComp;\n}(ManagedFocusComponent);\n\nexport { ToolPanelColumnComp };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/toolPanelColumnComp.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","AgCheckbox","Autowired","Column","CssClassApplier","DragSourceType","Events","PostConstruct","RefSelector","ManagedFocusComponent","_","Constants","ToolPanelColumnComp","_super","column","columnDept","allowDragging","groupsExist","_this","call","processingColumnStateChange","init","setTemplate","TEMPLATE","eDragHandle","createIconNoSpan","gridOptionsWrapper","addCssClass","cbSelect","getGui","insertAdjacentElement","displayName","columnController","getDisplayNameForColumn","displayNameSanitised","escape","eLabel","innerHTML","setInputAriaLabel","indent","setupDragging","addManagedListener","eventService","EVENT_COLUMN_PIVOT_MODE_CHANGED","onColumnStateChanged","bind","EVENT_VALUE_CHANGED","EVENT_PIVOT_CHANGED","EVENT_ROW_GROUP_CHANGED","EVENT_VISIBLE_CHANGED","EVENT_CHANGED","onCheckboxChanged","onLabelClicked","addToolPanelClassesFromColDef","getColDef","handleKeyDown","e","keyCode","KEY_SPACE","preventDefault","isSelectable","onSelectAllChanged","isSelected","isFunctionsReadOnly","nextState","getValue","onChangeCommon","event","selected","lockVisible","isPivotMode","actionCheckedPivotMode","actionUnCheckedPivotMode","setColumnVisible","functionPassive","isFunctionsPassive","isPivotActive","copyOfPivotColumns","getPivotColumns","slice","push","event_1","type","EVENT_COLUMN_PIVOT_CHANGE_REQUEST","columns","api","gridApi","columnApi","dispatchEvent","removePivotColumn","isValueActive","copyOfValueColumns","getValueColumns","event_2","EVENT_COLUMN_VALUE_CHANGE_REQUEST","removeValueColumn","isRowGroupActive","copyOfRowGroupColumns","getRowGroupColumns","event_3","EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST","removeRowGroupColumn","isAllowValue","removeFromArray","event_4","addValueColumn","isAllowRowGroup","event_5","addRowGroupColumn","isAllowPivot","event_6","addPivotColumn","setDisplayed","dragSource","ToolPanel","eElement","dragItemName","getDragItem","createDragItem","dragAndDropService","addDragSource","addDestroyFunc","removeDragSource","visibleState","getId","isVisible","anyFunctionActive","isAnyFunctionActive","setValue","checkboxReadOnly","functionsReadOnly","noFunctionsAllowed","isAnyFunctionAllowed","setReadOnly","addOrRemoveCssClass","checkboxPassive","setPassive","getDisplayName","value","isReadOnly","toggle","isExpandable","setExpanded","console","warn"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AgCheckbox, Autowired, Column, CssClassApplier, DragSourceType, Events, PostConstruct, RefSelector, ManagedFocusComponent, _, Constants } from \"@ag-grid-community/core\";\nvar ToolPanelColumnComp = /** @class */ (function (_super) {\n    __extends(ToolPanelColumnComp, _super);\n    function ToolPanelColumnComp(column, columnDept, allowDragging, groupsExist) {\n        var _this = _super.call(this) || this;\n        _this.processingColumnStateChange = false;\n        _this.column = column;\n        _this.columnDept = columnDept;\n        _this.allowDragging = allowDragging;\n        _this.groupsExist = groupsExist;\n        return _this;\n    }\n    ToolPanelColumnComp.prototype.init = function () {\n        this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n        this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsWrapper);\n        _.addCssClass(this.eDragHandle, 'ag-drag-handle');\n        _.addCssClass(this.eDragHandle, 'ag-column-select-column-drag-handle');\n        this.cbSelect.getGui().insertAdjacentElement('afterend', this.eDragHandle);\n        this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'toolPanel');\n        var displayNameSanitised = _.escape(this.displayName);\n        this.eLabel.innerHTML = displayNameSanitised;\n        this.cbSelect.setInputAriaLabel(this.displayName + \" Toggle Selection\");\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        var indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-column-select-add-group-indent');\n        }\n        this.addCssClass(\"ag-column-select-indent-\" + indent);\n        this.setupDragging();\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.cbSelect, AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n        this.onColumnStateChanged();\n        CssClassApplier.addToolPanelClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);\n    };\n    ToolPanelColumnComp.prototype.handleKeyDown = function (e) {\n        switch (e.keyCode) {\n            case Constants.KEY_SPACE:\n                e.preventDefault();\n                if (this.isSelectable()) {\n                    this.onSelectAllChanged(!this.isSelected());\n                }\n        }\n    };\n    ToolPanelColumnComp.prototype.onLabelClicked = function () {\n        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n            return;\n        }\n        var nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    };\n    ToolPanelColumnComp.prototype.onCheckboxChanged = function (event) {\n        this.onChangeCommon(event.selected);\n    };\n    ToolPanelColumnComp.prototype.onChangeCommon = function (nextState) {\n        // ignore lock visible columns\n        if (this.column.getColDef().lockVisible) {\n            return;\n        }\n        // only want to action if the user clicked the checkbox, not is we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n        // action in a timeout, as the action takes some time, we want to update the icons first\n        // so the user gets nice feedback when they click. otherwise there would be a lag and the\n        // user would think the checkboxes were clunky\n        if (this.columnController.isPivotMode()) {\n            if (nextState) {\n                this.actionCheckedPivotMode();\n            }\n            else {\n                this.actionUnCheckedPivotMode();\n            }\n        }\n        else {\n            this.columnController.setColumnVisible(this.column, nextState, \"columnMenu\");\n        }\n    };\n    ToolPanelColumnComp.prototype.actionUnCheckedPivotMode = function () {\n        var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();\n        var column = this.column;\n        var columnController = this.columnController;\n        // remove pivot if column is pivoted\n        if (column.isPivotActive()) {\n            if (functionPassive) {\n                var copyOfPivotColumns = this.columnController.getPivotColumns().slice();\n                copyOfPivotColumns.push(column);\n                var event_1 = {\n                    type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                    columns: copyOfPivotColumns,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.eventService.dispatchEvent(event_1);\n            }\n            else {\n                columnController.removePivotColumn(column, \"columnMenu\");\n            }\n        }\n        // remove value if column is value\n        if (column.isValueActive()) {\n            if (functionPassive) {\n                var copyOfValueColumns = this.columnController.getValueColumns().slice();\n                copyOfValueColumns.push(column);\n                var event_2 = {\n                    type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                    columns: copyOfValueColumns,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.eventService.dispatchEvent(event_2);\n            }\n            else {\n                columnController.removeValueColumn(column, \"columnMenu\");\n            }\n        }\n        // remove group if column is grouped\n        if (column.isRowGroupActive()) {\n            if (functionPassive) {\n                var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();\n                copyOfRowGroupColumns.push(column);\n                var event_3 = {\n                    type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                    columns: copyOfRowGroupColumns,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.eventService.dispatchEvent(event_3);\n            }\n            else {\n                columnController.removeRowGroupColumn(column, \"columnMenu\");\n            }\n        }\n    };\n    ToolPanelColumnComp.prototype.actionCheckedPivotMode = function () {\n        var column = this.column;\n        // function already active, so do nothing\n        if (column.isValueActive() || column.isPivotActive() || column.isRowGroupActive()) {\n            return;\n        }\n        var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();\n        if (column.isAllowValue()) {\n            if (functionPassive) {\n                var copyOfValueColumns = this.columnController.getValueColumns().slice();\n                _.removeFromArray(copyOfValueColumns, column);\n                var event_4 = {\n                    type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    columns: copyOfValueColumns\n                };\n                this.eventService.dispatchEvent(event_4);\n            }\n            else {\n                this.columnController.addValueColumn(column, \"columnMenu\");\n            }\n        }\n        else if (column.isAllowRowGroup()) {\n            if (functionPassive) {\n                var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();\n                _.removeFromArray(copyOfRowGroupColumns, column);\n                var event_5 = {\n                    type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    columns: copyOfRowGroupColumns\n                };\n                this.eventService.dispatchEvent(event_5);\n            }\n            else {\n                this.columnController.addRowGroupColumn(column, \"columnMenu\");\n            }\n        }\n        else if (column.isAllowPivot()) {\n            if (functionPassive) {\n                var copyOfPivotColumns = this.columnController.getPivotColumns().slice();\n                _.removeFromArray(copyOfPivotColumns, column);\n                var event_6 = {\n                    type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    columns: copyOfPivotColumns\n                };\n                this.eventService.dispatchEvent(event_6);\n            }\n            else {\n                this.columnController.addPivotColumn(column, \"columnMenu\");\n            }\n        }\n    };\n    ToolPanelColumnComp.prototype.setupDragging = function () {\n        var _this = this;\n        if (!this.allowDragging) {\n            _.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n        var dragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDragItem: function () { return _this.createDragItem(); }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });\n    };\n    ToolPanelColumnComp.prototype.createDragItem = function () {\n        var visibleState = {};\n        visibleState[this.column.getId()] = this.column.isVisible();\n        return {\n            columns: [this.column],\n            visibleState: visibleState\n        };\n    };\n    ToolPanelColumnComp.prototype.onColumnStateChanged = function () {\n        this.processingColumnStateChange = true;\n        var isPivotMode = this.columnController.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            var anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setValue(anyFunctionActive);\n        }\n        else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setValue(this.column.isVisible());\n        }\n        var checkboxReadOnly;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            var functionsReadOnly = this.gridOptionsWrapper.isFunctionsReadOnly();\n            //  b) column is not allow any functions on it\n            var noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            checkboxReadOnly = functionsReadOnly || noFunctionsAllowed;\n        }\n        else {\n            // when in normal mode, the checkbox is read only if visibility is locked\n            checkboxReadOnly = !!this.column.getColDef().lockVisible;\n        }\n        this.cbSelect.setReadOnly(checkboxReadOnly);\n        _.addOrRemoveCssClass(this.getGui(), 'ag-column-select-column-readonly', checkboxReadOnly);\n        var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();\n        this.cbSelect.setPassive(checkboxPassive);\n        this.processingColumnStateChange = false;\n    };\n    ToolPanelColumnComp.prototype.getDisplayName = function () {\n        return this.displayName;\n    };\n    ToolPanelColumnComp.prototype.onSelectAllChanged = function (value) {\n        if (value !== this.cbSelect.getValue()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    };\n    ToolPanelColumnComp.prototype.isSelected = function () {\n        return this.cbSelect.getValue();\n    };\n    ToolPanelColumnComp.prototype.isSelectable = function () {\n        return !this.cbSelect.isReadOnly();\n    };\n    ToolPanelColumnComp.prototype.isExpandable = function () {\n        return false;\n    };\n    ToolPanelColumnComp.prototype.setExpanded = function (value) {\n        console.warn('ag-grid: can not expand a column item that does not represent a column group header');\n    };\n    ToolPanelColumnComp.TEMPLATE = \"<div class=\\\"ag-column-select-column\\\" tabindex=\\\"-1\\\">\\n            <ag-checkbox ref=\\\"cbSelect\\\" class=\\\"ag-column-select-checkbox\\\"></ag-checkbox>\\n            <span class=\\\"ag-column-select-column-label\\\" ref=\\\"eLabel\\\"></span>\\n        </div>\";\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ToolPanelColumnComp.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], ToolPanelColumnComp.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('dragAndDropService')\n    ], ToolPanelColumnComp.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ToolPanelColumnComp.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ToolPanelColumnComp.prototype, \"gridApi\", void 0);\n    __decorate([\n        RefSelector('eLabel')\n    ], ToolPanelColumnComp.prototype, \"eLabel\", void 0);\n    __decorate([\n        RefSelector('cbSelect')\n    ], ToolPanelColumnComp.prototype, \"cbSelect\", void 0);\n    __decorate([\n        PostConstruct\n    ], ToolPanelColumnComp.prototype, \"init\", null);\n    return ToolPanelColumnComp;\n}(ManagedFocusComponent));\nexport { ToolPanelColumnComp };\n"]},"metadata":{},"sourceType":"module"}