{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, BeanStub, NumberSequence, _ } from \"@ag-grid-community/core\";\n\nvar PivotColDefService =\n/** @class */\nfunction (_super) {\n  __extends(PivotColDefService, _super);\n\n  function PivotColDefService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PivotColDefService.prototype.createPivotColumnDefs = function (uniqueValues) {\n    // this is passed to the columnController, to configure the columns and groups we show\n    var pivotColumnGroupDefs = []; // this is used by the aggregation stage, to do the aggregation based on the pivot columns\n\n    var pivotColumnDefs = [];\n    var pivotColumns = this.columnController.getPivotColumns();\n    var valueColumns = this.columnController.getValueColumns();\n    var levelsDeep = pivotColumns.length;\n    var columnIdSequence = new NumberSequence();\n    this.recursivelyAddGroup(pivotColumnGroupDefs, pivotColumnDefs, 1, uniqueValues, [], columnIdSequence, levelsDeep, pivotColumns);\n    this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs, valueColumns, pivotColumns, columnIdSequence);\n    this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence); // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that\n    // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,\n    // as these use the col defs also\n\n    var pivotColumnDefsClone = pivotColumnDefs.map(function (colDef) {\n      return _.cloneObject(colDef);\n    });\n    return {\n      pivotColumnGroupDefs: pivotColumnGroupDefs,\n      pivotColumnDefs: pivotColumnDefsClone\n    };\n  }; // parentChildren - the list of colDefs we are adding to\n  // @index - how far the column is from the top (also same as pivotKeys.length)\n  // @uniqueValues - the values for which we should create a col for\n  // @pivotKeys - the keys for the pivot, eg if pivoting on {Language,Country} then could be {English,Ireland}\n\n\n  PivotColDefService.prototype.recursivelyAddGroup = function (parentChildren, pivotColumnDefs, index, uniqueValues, pivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns) {\n    var _this = this;\n\n    _.iterateObject(uniqueValues, function (key, value) {\n      var newPivotKeys = pivotKeys.slice(0);\n      newPivotKeys.push(key);\n      var createGroup = index !== levelsDeep;\n\n      if (createGroup) {\n        var groupDef = {\n          children: [],\n          headerName: key,\n          pivotKeys: newPivotKeys,\n          columnGroupShow: 'open',\n          groupId: 'pivot' + columnIdSequence.next()\n        };\n        parentChildren.push(groupDef);\n\n        _this.recursivelyAddGroup(groupDef.children, pivotColumnDefs, index + 1, value, newPivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns);\n      } else {\n        var measureColumns = _this.columnController.getValueColumns();\n\n        var valueGroup_1 = {\n          children: [],\n          headerName: key,\n          pivotKeys: newPivotKeys,\n          columnGroupShow: 'open',\n          groupId: 'pivot' + columnIdSequence.next()\n        }; // if no value columns selected, then we insert one blank column, so the user at least sees columns\n        // rendered. otherwise the grid would render with no columns (just empty groups) which would give the\n        // impression that the grid is broken\n\n        if (measureColumns.length === 0) {\n          // this is the blank column, for when no value columns enabled.\n          var colDef_1 = _this.createColDef(null, '-', newPivotKeys, columnIdSequence);\n\n          valueGroup_1.children.push(colDef_1);\n          pivotColumnDefs.push(colDef_1);\n        } else {\n          measureColumns.forEach(function (measureColumn) {\n            var columnName = _this.columnController.getDisplayNameForColumn(measureColumn, 'header');\n\n            var colDef = _this.createColDef(measureColumn, columnName, newPivotKeys, columnIdSequence);\n\n            colDef.columnGroupShow = 'open';\n            valueGroup_1.children.push(colDef);\n            pivotColumnDefs.push(colDef);\n          });\n        }\n\n        parentChildren.push(valueGroup_1);\n      }\n    }); // sort by either user provided comparator, or our own one\n\n\n    var colDef = primaryPivotColumns[index - 1].getColDef();\n    var userComparator = colDef.pivotComparator;\n    var comparator = this.headerNameComparator.bind(this, userComparator);\n    parentChildren.sort(comparator);\n  };\n\n  PivotColDefService.prototype.addPivotTotalsToGroups = function (pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence) {\n    var _this = this;\n\n    if (!this.gridOptionsWrapper.getPivotColumnGroupTotals()) {\n      return;\n    }\n\n    var insertAfter = this.gridOptionsWrapper.getPivotColumnGroupTotals() === 'after';\n    var valueCols = this.columnController.getValueColumns();\n    var aggFuncs = valueCols.map(function (valueCol) {\n      return valueCol.getAggFunc();\n    }); // don't add pivot totals if there is less than 1 aggFunc or they are not all the same\n\n    if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {\n      // console.warn('ag-Grid: aborting adding pivot total columns - value columns require same aggFunc');\n      return;\n    } // arbitrarily select a value column to use as a template for pivot columns\n\n\n    var valueColumn = valueCols[0];\n    pivotColumnGroupDefs.forEach(function (groupDef) {\n      _this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter);\n    });\n  };\n\n  PivotColDefService.prototype.recursivelyAddPivotTotal = function (groupDef, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter) {\n    var _this = this;\n\n    var group = groupDef;\n\n    if (!group.children) {\n      var def = groupDef;\n      return def.colId ? [def.colId] : null;\n    }\n\n    var colIds = []; // need to recurse children first to obtain colIds used in the aggregation stage\n\n    group.children.forEach(function (grp) {\n      var childColIds = _this.recursivelyAddPivotTotal(grp, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter);\n\n      if (childColIds) {\n        colIds = colIds.concat(childColIds);\n      }\n    }); // only add total colDef if there is more than 1 child node\n\n    if (group.children.length > 1) {\n      //create total colDef using an arbitrary value column as a template\n      var totalColDef = this.createColDef(valueColumn, 'Total', groupDef.pivotKeys, columnIdSequence);\n      totalColDef.pivotTotalColumnIds = colIds;\n      totalColDef.aggFunc = valueColumn.getAggFunc(); // add total colDef to group and pivot colDefs array\n\n      var children = groupDef.children;\n      insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);\n      pivotColumnDefs.push(totalColDef);\n    }\n\n    return colIds;\n  };\n\n  PivotColDefService.prototype.addRowGroupTotals = function (pivotColumnGroupDefs, pivotColumnDefs, valueColumns, pivotColumns, columnIdSequence) {\n    var _this = this;\n\n    if (!this.gridOptionsWrapper.getPivotRowTotals()) {\n      return;\n    }\n\n    var insertAfter = this.gridOptionsWrapper.getPivotRowTotals() === 'after'; // order of row group totals depends on position\n\n    var valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();\n\n    var _loop_1 = function (i) {\n      var valueCol = valueCols[i];\n      var colIds = [];\n      pivotColumnGroupDefs.forEach(function (groupDef) {\n        colIds = colIds.concat(_this.extractColIdsForValueColumn(groupDef, valueCol));\n      });\n      var levelsDeep = pivotColumns.length;\n      this_1.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, 1, [], columnIdSequence, levelsDeep, pivotColumns, valueCol, colIds, insertAfter);\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < valueCols.length; i++) {\n      _loop_1(i);\n    }\n  };\n\n  PivotColDefService.prototype.extractColIdsForValueColumn = function (groupDef, valueColumn) {\n    var _this = this;\n\n    var group = groupDef;\n\n    if (!group.children) {\n      var colDef = group;\n      return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];\n    }\n\n    var colIds = [];\n    group.children.forEach(function (grp) {\n      _this.extractColIdsForValueColumn(grp, valueColumn);\n\n      var childColIds = _this.extractColIdsForValueColumn(grp, valueColumn);\n\n      colIds = colIds.concat(childColIds);\n    });\n    return colIds;\n  };\n\n  PivotColDefService.prototype.createRowGroupTotal = function (parentChildren, pivotColumnDefs, index, pivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns, valueColumn, colIds, insertAfter) {\n    var newPivotKeys = pivotKeys.slice(0);\n    var createGroup = index !== levelsDeep;\n\n    if (createGroup) {\n      var groupDef = {\n        children: [],\n        pivotKeys: newPivotKeys,\n        groupId: 'pivot' + columnIdSequence.next()\n      };\n      insertAfter ? parentChildren.push(groupDef) : parentChildren.unshift(groupDef);\n      this.createRowGroupTotal(groupDef.children, pivotColumnDefs, index + 1, newPivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns, valueColumn, colIds, insertAfter);\n    } else {\n      var measureColumns = this.columnController.getValueColumns();\n      var valueGroup = {\n        children: [],\n        pivotKeys: newPivotKeys,\n        groupId: 'pivot' + columnIdSequence.next()\n      };\n\n      if (measureColumns.length === 0) {\n        var colDef = this.createColDef(null, '-', newPivotKeys, columnIdSequence);\n        valueGroup.children.push(colDef);\n        pivotColumnDefs.push(colDef);\n      } else {\n        var columnName = this.columnController.getDisplayNameForColumn(valueColumn, 'header');\n        var colDef = this.createColDef(valueColumn, columnName, newPivotKeys, columnIdSequence);\n        colDef.pivotTotalColumnIds = colIds;\n        valueGroup.children.push(colDef);\n        pivotColumnDefs.push(colDef);\n      }\n\n      insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);\n    }\n  };\n\n  PivotColDefService.prototype.createColDef = function (valueColumn, headerName, pivotKeys, columnIdSequence) {\n    var colDef = {};\n\n    if (valueColumn) {\n      var colDefToCopy = valueColumn.getColDef();\n\n      _.assign(colDef, colDefToCopy); // even if original column was hidden, we always show the pivot value column, otherwise it would be\n      // very confusing for people thinking the pivot is broken\n\n\n      colDef.hide = false;\n    }\n\n    colDef.headerName = headerName;\n    colDef.colId = 'pivot_' + columnIdSequence.next(); // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to\n    // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.\n\n    colDef.field = colDef.colId;\n    colDef.pivotKeys = pivotKeys;\n    colDef.pivotValueColumn = valueColumn;\n    colDef.filter = false;\n    return colDef;\n  };\n\n  PivotColDefService.prototype.sameAggFuncs = function (aggFuncs) {\n    if (aggFuncs.length == 1) {\n      return true;\n    } //check if all aggFunc's match\n\n\n    for (var i = 1; i < aggFuncs.length; i++) {\n      if (aggFuncs[i] !== aggFuncs[0]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  PivotColDefService.prototype.headerNameComparator = function (userComparator, a, b) {\n    if (userComparator) {\n      return userComparator(a.headerName, b.headerName);\n    } else {\n      if (a.headerName && !b.headerName) {\n        return 1;\n      } else if (!a.headerName && b.headerName) {\n        return -1;\n      } // slightly naff here - just to satify typescript\n      // really should be &&, but if so ts complains\n      // the above if/else checks would deal with either being falsy, so at this stage if either are falsy, both are\n      // ..still naff though\n\n\n      if (!a.headerName || !b.headerName) {\n        return 0;\n      }\n\n      if (a.headerName < b.headerName) {\n        return -1;\n      } else if (a.headerName > b.headerName) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  };\n\n  __decorate([Autowired('columnController')], PivotColDefService.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], PivotColDefService.prototype, \"gridOptionsWrapper\", void 0);\n\n  PivotColDefService = __decorate([Bean('pivotColDefService')], PivotColDefService);\n  return PivotColDefService;\n}(BeanStub);\n\nexport { PivotColDefService };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/pivotColDefService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","BeanStub","NumberSequence","_","PivotColDefService","_super","apply","createPivotColumnDefs","uniqueValues","pivotColumnGroupDefs","pivotColumnDefs","pivotColumns","columnController","getPivotColumns","valueColumns","getValueColumns","levelsDeep","columnIdSequence","recursivelyAddGroup","addRowGroupTotals","addPivotTotalsToGroups","pivotColumnDefsClone","map","colDef","cloneObject","parentChildren","index","pivotKeys","primaryPivotColumns","_this","iterateObject","value","newPivotKeys","slice","push","createGroup","groupDef","children","headerName","columnGroupShow","groupId","next","measureColumns","valueGroup_1","colDef_1","createColDef","forEach","measureColumn","columnName","getDisplayNameForColumn","getColDef","userComparator","pivotComparator","comparator","headerNameComparator","bind","sort","gridOptionsWrapper","getPivotColumnGroupTotals","insertAfter","valueCols","aggFuncs","valueCol","getAggFunc","sameAggFuncs","valueColumn","recursivelyAddPivotTotal","group","def","colId","colIds","grp","childColIds","concat","totalColDef","pivotTotalColumnIds","aggFunc","unshift","getPivotRowTotals","reverse","_loop_1","extractColIdsForValueColumn","this_1","createRowGroupTotal","pivotValueColumn","valueGroup","colDefToCopy","assign","hide","field","filter","a"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, BeanStub, NumberSequence, _ } from \"@ag-grid-community/core\";\nvar PivotColDefService = /** @class */ (function (_super) {\n    __extends(PivotColDefService, _super);\n    function PivotColDefService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PivotColDefService.prototype.createPivotColumnDefs = function (uniqueValues) {\n        // this is passed to the columnController, to configure the columns and groups we show\n        var pivotColumnGroupDefs = [];\n        // this is used by the aggregation stage, to do the aggregation based on the pivot columns\n        var pivotColumnDefs = [];\n        var pivotColumns = this.columnController.getPivotColumns();\n        var valueColumns = this.columnController.getValueColumns();\n        var levelsDeep = pivotColumns.length;\n        var columnIdSequence = new NumberSequence();\n        this.recursivelyAddGroup(pivotColumnGroupDefs, pivotColumnDefs, 1, uniqueValues, [], columnIdSequence, levelsDeep, pivotColumns);\n        this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs, valueColumns, pivotColumns, columnIdSequence);\n        this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence);\n        // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that\n        // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,\n        // as these use the col defs also\n        var pivotColumnDefsClone = pivotColumnDefs.map(function (colDef) { return _.cloneObject(colDef); });\n        return {\n            pivotColumnGroupDefs: pivotColumnGroupDefs,\n            pivotColumnDefs: pivotColumnDefsClone\n        };\n    };\n    // parentChildren - the list of colDefs we are adding to\n    // @index - how far the column is from the top (also same as pivotKeys.length)\n    // @uniqueValues - the values for which we should create a col for\n    // @pivotKeys - the keys for the pivot, eg if pivoting on {Language,Country} then could be {English,Ireland}\n    PivotColDefService.prototype.recursivelyAddGroup = function (parentChildren, pivotColumnDefs, index, uniqueValues, pivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns) {\n        var _this = this;\n        _.iterateObject(uniqueValues, function (key, value) {\n            var newPivotKeys = pivotKeys.slice(0);\n            newPivotKeys.push(key);\n            var createGroup = index !== levelsDeep;\n            if (createGroup) {\n                var groupDef = {\n                    children: [],\n                    headerName: key,\n                    pivotKeys: newPivotKeys,\n                    columnGroupShow: 'open',\n                    groupId: 'pivot' + columnIdSequence.next()\n                };\n                parentChildren.push(groupDef);\n                _this.recursivelyAddGroup(groupDef.children, pivotColumnDefs, index + 1, value, newPivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns);\n            }\n            else {\n                var measureColumns = _this.columnController.getValueColumns();\n                var valueGroup_1 = {\n                    children: [],\n                    headerName: key,\n                    pivotKeys: newPivotKeys,\n                    columnGroupShow: 'open',\n                    groupId: 'pivot' + columnIdSequence.next()\n                };\n                // if no value columns selected, then we insert one blank column, so the user at least sees columns\n                // rendered. otherwise the grid would render with no columns (just empty groups) which would give the\n                // impression that the grid is broken\n                if (measureColumns.length === 0) {\n                    // this is the blank column, for when no value columns enabled.\n                    var colDef_1 = _this.createColDef(null, '-', newPivotKeys, columnIdSequence);\n                    valueGroup_1.children.push(colDef_1);\n                    pivotColumnDefs.push(colDef_1);\n                }\n                else {\n                    measureColumns.forEach(function (measureColumn) {\n                        var columnName = _this.columnController.getDisplayNameForColumn(measureColumn, 'header');\n                        var colDef = _this.createColDef(measureColumn, columnName, newPivotKeys, columnIdSequence);\n                        colDef.columnGroupShow = 'open';\n                        valueGroup_1.children.push(colDef);\n                        pivotColumnDefs.push(colDef);\n                    });\n                }\n                parentChildren.push(valueGroup_1);\n            }\n        });\n        // sort by either user provided comparator, or our own one\n        var colDef = primaryPivotColumns[index - 1].getColDef();\n        var userComparator = colDef.pivotComparator;\n        var comparator = this.headerNameComparator.bind(this, userComparator);\n        parentChildren.sort(comparator);\n    };\n    PivotColDefService.prototype.addPivotTotalsToGroups = function (pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.getPivotColumnGroupTotals()) {\n            return;\n        }\n        var insertAfter = this.gridOptionsWrapper.getPivotColumnGroupTotals() === 'after';\n        var valueCols = this.columnController.getValueColumns();\n        var aggFuncs = valueCols.map(function (valueCol) { return valueCol.getAggFunc(); });\n        // don't add pivot totals if there is less than 1 aggFunc or they are not all the same\n        if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {\n            // console.warn('ag-Grid: aborting adding pivot total columns - value columns require same aggFunc');\n            return;\n        }\n        // arbitrarily select a value column to use as a template for pivot columns\n        var valueColumn = valueCols[0];\n        pivotColumnGroupDefs.forEach(function (groupDef) {\n            _this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter);\n        });\n    };\n    PivotColDefService.prototype.recursivelyAddPivotTotal = function (groupDef, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter) {\n        var _this = this;\n        var group = groupDef;\n        if (!group.children) {\n            var def = groupDef;\n            return def.colId ? [def.colId] : null;\n        }\n        var colIds = [];\n        // need to recurse children first to obtain colIds used in the aggregation stage\n        group.children\n            .forEach(function (grp) {\n            var childColIds = _this.recursivelyAddPivotTotal(grp, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter);\n            if (childColIds) {\n                colIds = colIds.concat(childColIds);\n            }\n        });\n        // only add total colDef if there is more than 1 child node\n        if (group.children.length > 1) {\n            //create total colDef using an arbitrary value column as a template\n            var totalColDef = this.createColDef(valueColumn, 'Total', groupDef.pivotKeys, columnIdSequence);\n            totalColDef.pivotTotalColumnIds = colIds;\n            totalColDef.aggFunc = valueColumn.getAggFunc();\n            // add total colDef to group and pivot colDefs array\n            var children = groupDef.children;\n            insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);\n            pivotColumnDefs.push(totalColDef);\n        }\n        return colIds;\n    };\n    PivotColDefService.prototype.addRowGroupTotals = function (pivotColumnGroupDefs, pivotColumnDefs, valueColumns, pivotColumns, columnIdSequence) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.getPivotRowTotals()) {\n            return;\n        }\n        var insertAfter = this.gridOptionsWrapper.getPivotRowTotals() === 'after';\n        // order of row group totals depends on position\n        var valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();\n        var _loop_1 = function (i) {\n            var valueCol = valueCols[i];\n            var colIds = [];\n            pivotColumnGroupDefs.forEach(function (groupDef) {\n                colIds = colIds.concat(_this.extractColIdsForValueColumn(groupDef, valueCol));\n            });\n            var levelsDeep = pivotColumns.length;\n            this_1.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, 1, [], columnIdSequence, levelsDeep, pivotColumns, valueCol, colIds, insertAfter);\n        };\n        var this_1 = this;\n        for (var i = 0; i < valueCols.length; i++) {\n            _loop_1(i);\n        }\n    };\n    PivotColDefService.prototype.extractColIdsForValueColumn = function (groupDef, valueColumn) {\n        var _this = this;\n        var group = groupDef;\n        if (!group.children) {\n            var colDef = group;\n            return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];\n        }\n        var colIds = [];\n        group.children\n            .forEach(function (grp) {\n            _this.extractColIdsForValueColumn(grp, valueColumn);\n            var childColIds = _this.extractColIdsForValueColumn(grp, valueColumn);\n            colIds = colIds.concat(childColIds);\n        });\n        return colIds;\n    };\n    PivotColDefService.prototype.createRowGroupTotal = function (parentChildren, pivotColumnDefs, index, pivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns, valueColumn, colIds, insertAfter) {\n        var newPivotKeys = pivotKeys.slice(0);\n        var createGroup = index !== levelsDeep;\n        if (createGroup) {\n            var groupDef = {\n                children: [],\n                pivotKeys: newPivotKeys,\n                groupId: 'pivot' + columnIdSequence.next()\n            };\n            insertAfter ? parentChildren.push(groupDef) : parentChildren.unshift(groupDef);\n            this.createRowGroupTotal(groupDef.children, pivotColumnDefs, index + 1, newPivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns, valueColumn, colIds, insertAfter);\n        }\n        else {\n            var measureColumns = this.columnController.getValueColumns();\n            var valueGroup = {\n                children: [],\n                pivotKeys: newPivotKeys,\n                groupId: 'pivot' + columnIdSequence.next()\n            };\n            if (measureColumns.length === 0) {\n                var colDef = this.createColDef(null, '-', newPivotKeys, columnIdSequence);\n                valueGroup.children.push(colDef);\n                pivotColumnDefs.push(colDef);\n            }\n            else {\n                var columnName = this.columnController.getDisplayNameForColumn(valueColumn, 'header');\n                var colDef = this.createColDef(valueColumn, columnName, newPivotKeys, columnIdSequence);\n                colDef.pivotTotalColumnIds = colIds;\n                valueGroup.children.push(colDef);\n                pivotColumnDefs.push(colDef);\n            }\n            insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);\n        }\n    };\n    PivotColDefService.prototype.createColDef = function (valueColumn, headerName, pivotKeys, columnIdSequence) {\n        var colDef = {};\n        if (valueColumn) {\n            var colDefToCopy = valueColumn.getColDef();\n            _.assign(colDef, colDefToCopy);\n            // even if original column was hidden, we always show the pivot value column, otherwise it would be\n            // very confusing for people thinking the pivot is broken\n            colDef.hide = false;\n        }\n        colDef.headerName = headerName;\n        colDef.colId = 'pivot_' + columnIdSequence.next();\n        // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to\n        // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.\n        colDef.field = colDef.colId;\n        colDef.pivotKeys = pivotKeys;\n        colDef.pivotValueColumn = valueColumn;\n        colDef.filter = false;\n        return colDef;\n    };\n    PivotColDefService.prototype.sameAggFuncs = function (aggFuncs) {\n        if (aggFuncs.length == 1) {\n            return true;\n        }\n        //check if all aggFunc's match\n        for (var i = 1; i < aggFuncs.length; i++) {\n            if (aggFuncs[i] !== aggFuncs[0]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    PivotColDefService.prototype.headerNameComparator = function (userComparator, a, b) {\n        if (userComparator) {\n            return userComparator(a.headerName, b.headerName);\n        }\n        else {\n            if (a.headerName && !b.headerName) {\n                return 1;\n            }\n            else if (!a.headerName && b.headerName) {\n                return -1;\n            }\n            // slightly naff here - just to satify typescript\n            // really should be &&, but if so ts complains\n            // the above if/else checks would deal with either being falsy, so at this stage if either are falsy, both are\n            // ..still naff though\n            if (!a.headerName || !b.headerName) {\n                return 0;\n            }\n            if (a.headerName < b.headerName) {\n                return -1;\n            }\n            else if (a.headerName > b.headerName) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        }\n    };\n    __decorate([\n        Autowired('columnController')\n    ], PivotColDefService.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], PivotColDefService.prototype, \"gridOptionsWrapper\", void 0);\n    PivotColDefService = __decorate([\n        Bean('pivotColDefService')\n    ], PivotColDefService);\n    return PivotColDefService;\n}(BeanStub));\nexport { PivotColDefService };\n"]},"metadata":{},"sourceType":"module"}