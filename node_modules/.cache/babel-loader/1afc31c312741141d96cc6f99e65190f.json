{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component } from \"../widgets/component\";\nimport { PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { DragSourceType } from \"../dragAndDrop/dragAndDropService\";\nimport { Events } from \"../eventKeys\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { _ } from \"../utils\";\n\nvar RowDragComp =\n/** @class */\nfunction (_super) {\n  __extends(RowDragComp, _super);\n\n  function RowDragComp(rowNode, column, cellValue, beans) {\n    var _this = _super.call(this, \"<div class=\\\"ag-drag-handle ag-row-drag\\\" role=\\\"presentation\\\"></div>\") || this;\n\n    _this.rowNode = rowNode;\n    _this.column = column;\n    _this.cellValue = cellValue;\n    _this.beans = beans;\n    return _this;\n  }\n\n  RowDragComp.prototype.postConstruct = function () {\n    var eGui = this.getGui();\n    eGui.appendChild(_.createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null));\n    this.addDragSource();\n    this.checkCompatibility();\n    var strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ? new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) : new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n    this.createManagedBean(strategy, this.beans.context);\n  };\n\n  RowDragComp.prototype.getSelectedCount = function () {\n    var multiRowEnabled = this.beans.gridOptionsWrapper.isEnableMultiRowDragging();\n\n    if (!multiRowEnabled) {\n      return 1;\n    }\n\n    var selection = this.beans.selectionController.getSelectedNodes();\n    return selection.indexOf(this.rowNode) !== -1 ? selection.length : 1;\n  }; // returns true if all compatibility items work out\n\n\n  RowDragComp.prototype.checkCompatibility = function () {\n    var managed = this.beans.gridOptionsWrapper.isRowDragManaged();\n    var treeData = this.beans.gridOptionsWrapper.isTreeData();\n\n    if (treeData && managed) {\n      _.doOnce(function () {\n        return console.warn('ag-Grid: If using row drag with tree data, you cannot have rowDragManaged=true');\n      }, 'RowDragComp.managedAndTreeData');\n    }\n  };\n\n  RowDragComp.prototype.addDragSource = function () {\n    var _this = this;\n\n    var dragItem = {\n      rowNode: this.rowNode,\n      columns: [this.column],\n      defaultTextValue: this.cellValue\n    };\n    var rowDragText = this.column.getColDef().rowDragText;\n    var dragSource = {\n      type: DragSourceType.RowDrag,\n      eElement: this.getGui(),\n      dragItemName: function dragItemName() {\n        var dragItemCount = _this.getSelectedCount();\n\n        if (rowDragText) {\n          return rowDragText(dragItem, dragItemCount);\n        }\n\n        return dragItemCount === 1 ? _this.cellValue : dragItemCount + \" rows\";\n      },\n      getDragItem: function getDragItem() {\n        return dragItem;\n      },\n      dragStartPixels: 0\n    };\n    this.beans.dragAndDropService.addDragSource(dragSource, true);\n    this.addDestroyFunc(function () {\n      return _this.beans.dragAndDropService.removeDragSource(dragSource);\n    });\n  };\n\n  __decorate([PostConstruct], RowDragComp.prototype, \"postConstruct\", null);\n\n  return RowDragComp;\n}(Component);\n\nexport { RowDragComp };\n\nvar VisibilityStrategy =\n/** @class */\nfunction (_super) {\n  __extends(VisibilityStrategy, _super);\n\n  function VisibilityStrategy(parent, rowNode, column) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    _this.column = column;\n    _this.rowNode = rowNode;\n    return _this;\n  }\n\n  VisibilityStrategy.prototype.setDisplayedOrVisible = function (neverDisplayed) {\n    if (neverDisplayed) {\n      this.parent.setDisplayed(false);\n    } else {\n      var shown = this.column.isRowDrag(this.rowNode);\n\n      var isShownSometimes = _.isFunction(this.column.getColDef().rowDrag); // if shown sometimes, them some rows can have drag handle while other don't,\n      // so we use setVisible to keep the handles horizontally aligned (as setVisible\n      // keeps the empty space, whereas setDisplayed looses the space)\n\n\n      if (isShownSometimes) {\n        this.parent.setDisplayed(true);\n        this.parent.setVisible(shown);\n      } else {\n        this.parent.setDisplayed(shown);\n      }\n    }\n  };\n\n  return VisibilityStrategy;\n}(BeanStub); // when non managed, the visibility depends on suppressRowDrag property only\n\n\nvar NonManagedVisibilityStrategy =\n/** @class */\nfunction (_super) {\n  __extends(NonManagedVisibilityStrategy, _super);\n\n  function NonManagedVisibilityStrategy(parent, beans, rowNode, column) {\n    var _this = _super.call(this, parent, rowNode, column) || this;\n\n    _this.beans = beans;\n    return _this;\n  }\n\n  NonManagedVisibilityStrategy.prototype.postConstruct = function () {\n    this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this)); // in case data changes, then we need to update visibility of drag item\n\n    this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n    this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n    this.workOutVisibility();\n  };\n\n  NonManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {\n    this.workOutVisibility();\n  };\n\n  NonManagedVisibilityStrategy.prototype.workOutVisibility = function () {\n    // only show the drag if both sort and filter are not present\n    var neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n    this.setDisplayedOrVisible(neverDisplayed);\n  };\n\n  __decorate([PostConstruct], NonManagedVisibilityStrategy.prototype, \"postConstruct\", null);\n\n  return NonManagedVisibilityStrategy;\n}(VisibilityStrategy); // when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\n\n\nvar ManagedVisibilityStrategy =\n/** @class */\nfunction (_super) {\n  __extends(ManagedVisibilityStrategy, _super);\n\n  function ManagedVisibilityStrategy(parent, beans, rowNode, column) {\n    var _this = _super.call(this, parent, rowNode, column) || this;\n\n    _this.beans = beans;\n    return _this;\n  }\n\n  ManagedVisibilityStrategy.prototype.postConstruct = function () {\n    // we do not show the component if sort, filter or grouping is active\n    this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));\n    this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));\n    this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this)); // in case data changes, then we need to update visibility of drag item\n\n    this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n    this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n    this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n    this.workOutVisibility();\n  };\n\n  ManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {\n    this.workOutVisibility();\n  };\n\n  ManagedVisibilityStrategy.prototype.workOutVisibility = function () {\n    // only show the drag if both sort and filter are not present\n    var rowDragFeature = this.beans.gridPanel.getRowDragFeature();\n    var shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\n    var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n    var hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();\n    var neverDisplayed = shouldPreventRowMove && !hasExternalDropZones || suppressRowDrag;\n    this.setDisplayedOrVisible(neverDisplayed);\n  };\n\n  __decorate([PostConstruct], ManagedVisibilityStrategy.prototype, \"postConstruct\", null);\n\n  return ManagedVisibilityStrategy;\n}(VisibilityStrategy);","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/rendering/rowDragComp.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","PostConstruct","RowNode","DragSourceType","Events","BeanStub","_","RowDragComp","_super","rowNode","column","cellValue","beans","_this","call","postConstruct","eGui","getGui","appendChild","createIconNoSpan","gridOptionsWrapper","addDragSource","checkCompatibility","strategy","isRowDragManaged","ManagedVisibilityStrategy","NonManagedVisibilityStrategy","createManagedBean","context","getSelectedCount","multiRowEnabled","isEnableMultiRowDragging","selection","selectionController","getSelectedNodes","indexOf","managed","treeData","isTreeData","doOnce","console","warn","dragItem","columns","defaultTextValue","rowDragText","getColDef","dragSource","type","RowDrag","eElement","dragItemName","dragItemCount","getDragItem","dragStartPixels","dragAndDropService","addDestroyFunc","removeDragSource","VisibilityStrategy","parent","setDisplayedOrVisible","neverDisplayed","setDisplayed","shown","isRowDrag","isShownSometimes","isFunction","rowDrag","setVisible","addManagedListener","onSuppressRowDrag","bind","EVENT_DATA_CHANGED","workOutVisibility","EVENT_CELL_CHANGED","isSuppressRowDrag","eventService","EVENT_SORT_CHANGED","EVENT_FILTER_CHANGED","EVENT_COLUMN_ROW_GROUP_CHANGED","rowDragFeature","gridPanel","getRowDragFeature","shouldPreventRowMove","suppressRowDrag","hasExternalDropZones"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"../widgets/component\";\nimport { PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { DragSourceType } from \"../dragAndDrop/dragAndDropService\";\nimport { Events } from \"../eventKeys\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { _ } from \"../utils\";\nvar RowDragComp = /** @class */ (function (_super) {\n    __extends(RowDragComp, _super);\n    function RowDragComp(rowNode, column, cellValue, beans) {\n        var _this = _super.call(this, \"<div class=\\\"ag-drag-handle ag-row-drag\\\" role=\\\"presentation\\\"></div>\") || this;\n        _this.rowNode = rowNode;\n        _this.column = column;\n        _this.cellValue = cellValue;\n        _this.beans = beans;\n        return _this;\n    }\n    RowDragComp.prototype.postConstruct = function () {\n        var eGui = this.getGui();\n        eGui.appendChild(_.createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null));\n        this.addDragSource();\n        this.checkCompatibility();\n        var strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ?\n            new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) :\n            new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n        this.createManagedBean(strategy, this.beans.context);\n    };\n    RowDragComp.prototype.getSelectedCount = function () {\n        var multiRowEnabled = this.beans.gridOptionsWrapper.isEnableMultiRowDragging();\n        if (!multiRowEnabled) {\n            return 1;\n        }\n        var selection = this.beans.selectionController.getSelectedNodes();\n        return selection.indexOf(this.rowNode) !== -1 ? selection.length : 1;\n    };\n    // returns true if all compatibility items work out\n    RowDragComp.prototype.checkCompatibility = function () {\n        var managed = this.beans.gridOptionsWrapper.isRowDragManaged();\n        var treeData = this.beans.gridOptionsWrapper.isTreeData();\n        if (treeData && managed) {\n            _.doOnce(function () {\n                return console.warn('ag-Grid: If using row drag with tree data, you cannot have rowDragManaged=true');\n            }, 'RowDragComp.managedAndTreeData');\n        }\n    };\n    RowDragComp.prototype.addDragSource = function () {\n        var _this = this;\n        var dragItem = {\n            rowNode: this.rowNode,\n            columns: [this.column],\n            defaultTextValue: this.cellValue,\n        };\n        var rowDragText = this.column.getColDef().rowDragText;\n        var dragSource = {\n            type: DragSourceType.RowDrag,\n            eElement: this.getGui(),\n            dragItemName: function () {\n                var dragItemCount = _this.getSelectedCount();\n                if (rowDragText) {\n                    return rowDragText(dragItem, dragItemCount);\n                }\n                return dragItemCount === 1 ? _this.cellValue : dragItemCount + \" rows\";\n            },\n            getDragItem: function () { return dragItem; },\n            dragStartPixels: 0\n        };\n        this.beans.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(function () { return _this.beans.dragAndDropService.removeDragSource(dragSource); });\n    };\n    __decorate([\n        PostConstruct\n    ], RowDragComp.prototype, \"postConstruct\", null);\n    return RowDragComp;\n}(Component));\nexport { RowDragComp };\nvar VisibilityStrategy = /** @class */ (function (_super) {\n    __extends(VisibilityStrategy, _super);\n    function VisibilityStrategy(parent, rowNode, column) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.column = column;\n        _this.rowNode = rowNode;\n        return _this;\n    }\n    VisibilityStrategy.prototype.setDisplayedOrVisible = function (neverDisplayed) {\n        if (neverDisplayed) {\n            this.parent.setDisplayed(false);\n        }\n        else {\n            var shown = this.column.isRowDrag(this.rowNode);\n            var isShownSometimes = _.isFunction(this.column.getColDef().rowDrag);\n            // if shown sometimes, them some rows can have drag handle while other don't,\n            // so we use setVisible to keep the handles horizontally aligned (as setVisible\n            // keeps the empty space, whereas setDisplayed looses the space)\n            if (isShownSometimes) {\n                this.parent.setDisplayed(true);\n                this.parent.setVisible(shown);\n            }\n            else {\n                this.parent.setDisplayed(shown);\n            }\n        }\n    };\n    return VisibilityStrategy;\n}(BeanStub));\n// when non managed, the visibility depends on suppressRowDrag property only\nvar NonManagedVisibilityStrategy = /** @class */ (function (_super) {\n    __extends(NonManagedVisibilityStrategy, _super);\n    function NonManagedVisibilityStrategy(parent, beans, rowNode, column) {\n        var _this = _super.call(this, parent, rowNode, column) || this;\n        _this.beans = beans;\n        return _this;\n    }\n    NonManagedVisibilityStrategy.prototype.postConstruct = function () {\n        this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.workOutVisibility();\n    };\n    NonManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {\n        this.workOutVisibility();\n    };\n    NonManagedVisibilityStrategy.prototype.workOutVisibility = function () {\n        // only show the drag if both sort and filter are not present\n        var neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        this.setDisplayedOrVisible(neverDisplayed);\n    };\n    __decorate([\n        PostConstruct\n    ], NonManagedVisibilityStrategy.prototype, \"postConstruct\", null);\n    return NonManagedVisibilityStrategy;\n}(VisibilityStrategy));\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\nvar ManagedVisibilityStrategy = /** @class */ (function (_super) {\n    __extends(ManagedVisibilityStrategy, _super);\n    function ManagedVisibilityStrategy(parent, beans, rowNode, column) {\n        var _this = _super.call(this, parent, rowNode, column) || this;\n        _this.beans = beans;\n        return _this;\n    }\n    ManagedVisibilityStrategy.prototype.postConstruct = function () {\n        // we do not show the component if sort, filter or grouping is active\n        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n        this.workOutVisibility();\n    };\n    ManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {\n        this.workOutVisibility();\n    };\n    ManagedVisibilityStrategy.prototype.workOutVisibility = function () {\n        // only show the drag if both sort and filter are not present\n        var rowDragFeature = this.beans.gridPanel.getRowDragFeature();\n        var shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\n        var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        var hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();\n        var neverDisplayed = (shouldPreventRowMove && !hasExternalDropZones) || suppressRowDrag;\n        this.setDisplayedOrVisible(neverDisplayed);\n    };\n    __decorate([\n        PostConstruct\n    ], ManagedVisibilityStrategy.prototype, \"postConstruct\", null);\n    return ManagedVisibilityStrategy;\n}(VisibilityStrategy));\n"]},"metadata":{},"sourceType":"module"}