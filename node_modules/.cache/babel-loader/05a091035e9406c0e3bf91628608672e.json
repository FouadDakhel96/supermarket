{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Constants } from \"../../constants\";\nimport { Autowired } from \"../../context/context\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { DragAndDropService, DragSourceType } from \"../../dragAndDrop/dragAndDropService\";\nimport { SetLeftFeature } from \"../../rendering/features/setLeftFeature\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { TooltipFeature } from \"../../widgets/tooltipFeature\";\nimport { AbstractHeaderWrapper } from \"../header/abstractHeaderWrapper\";\nimport { _ } from \"../../utils\";\n\nvar HeaderGroupWrapperComp =\n/** @class */\nfunction (_super) {\n  __extends(HeaderGroupWrapperComp, _super);\n\n  function HeaderGroupWrapperComp(columnGroup, dragSourceDropTarget, pinned) {\n    var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this; // the children can change, we keep destroy functions related to listening to the children here\n\n\n    _this.removeChildListenersFuncs = [];\n    _this.column = columnGroup;\n    _this.dragSourceDropTarget = dragSourceDropTarget;\n    _this.pinned = pinned;\n    return _this;\n  }\n\n  HeaderGroupWrapperComp.prototype.postConstruct = function () {\n    _super.prototype.postConstruct.call(this);\n\n    CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.column);\n    var displayName = this.columnController.getDisplayNameForColumnGroup(this.column, 'header');\n    this.appendHeaderGroupComp(displayName);\n    this.setupResize();\n    this.addClasses();\n    this.setupWidth();\n    this.addAttributes();\n    this.setupMovingCss();\n    this.setupTooltip();\n    this.createManagedBean(new HoverFeature(this.column.getOriginalColumnGroup().getLeafColumns(), this.getGui()));\n    this.createManagedBean(new SetLeftFeature(this.column, this.getGui(), this.beans));\n  };\n\n  HeaderGroupWrapperComp.prototype.onFocusIn = function (e) {\n    if (!this.getGui().contains(e.relatedTarget)) {\n      var headerRow = this.getParentComponent();\n      this.beans.focusController.setFocusedHeader(headerRow.getRowIndex(), this.getColumn());\n    }\n  };\n\n  HeaderGroupWrapperComp.prototype.handleKeyDown = function (e) {\n    var activeEl = document.activeElement;\n    var eGui = this.getGui();\n    var wrapperHasFocus = activeEl === eGui;\n\n    switch (e.keyCode) {\n      case Constants.KEY_ENTER:\n        if (wrapperHasFocus) {\n          var column = this.getColumn();\n          var expandable = column.isExpandable();\n\n          if (expandable) {\n            var newExpandedValue = !column.isExpanded();\n            this.columnController.setColumnGroupOpened(column.getOriginalColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n          }\n        }\n\n    }\n  };\n\n  HeaderGroupWrapperComp.prototype.setupMovingCss = function () {\n    var _this = this;\n\n    var originalColumnGroup = this.column.getOriginalColumnGroup();\n    var leafColumns = originalColumnGroup.getLeafColumns();\n    leafColumns.forEach(function (col) {\n      _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, _this.onColumnMovingChanged.bind(_this));\n    });\n    this.onColumnMovingChanged();\n  };\n\n  HeaderGroupWrapperComp.prototype.getComponentHolder = function () {\n    return this.column.getColGroupDef();\n  };\n\n  HeaderGroupWrapperComp.prototype.getTooltipText = function () {\n    var colGroupDef = this.getComponentHolder();\n    return colGroupDef && colGroupDef.headerTooltip;\n  };\n\n  HeaderGroupWrapperComp.prototype.setupTooltip = function () {\n    var tooltipText = this.getTooltipText();\n\n    if (tooltipText == null) {\n      return;\n    }\n\n    if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {\n      this.getGui().setAttribute('title', tooltipText);\n    } else {\n      this.createManagedBean(new TooltipFeature(this, 'headerGroup'));\n    }\n  };\n\n  HeaderGroupWrapperComp.prototype.onColumnMovingChanged = function () {\n    // this function adds or removes the moving css, based on if the col is moving.\n    // this is what makes the header go dark when it is been moved (gives impression to\n    // user that the column was picked up).\n    _.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-moving', this.column.isMoving());\n  };\n\n  HeaderGroupWrapperComp.prototype.addAttributes = function () {\n    this.getGui().setAttribute(\"col-id\", this.column.getUniqueId());\n  };\n\n  HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function (displayName) {\n    var _this = this;\n\n    var params = {\n      displayName: displayName,\n      columnGroup: this.column,\n      setExpanded: function setExpanded(expanded) {\n        _this.columnController.setColumnGroupOpened(_this.column.getOriginalColumnGroup(), expanded, \"gridInitializing\");\n      },\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      context: this.gridOptionsWrapper.getContext()\n    };\n\n    if (!displayName) {\n      var columnGroup = this.column;\n      var leafCols = columnGroup.getLeafColumns(); // find the top most column group that represents the same columns. so if we are dragging a group, we also\n      // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n      // of grouping, with each group only containing the next group, and the last group containing three columns,\n      // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n      // the groups represent the same column set.\n\n      while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n        columnGroup = columnGroup.getParent();\n      }\n\n      var colGroupDef = columnGroup.getColGroupDef();\n\n      if (colGroupDef) {\n        displayName = colGroupDef.headerName;\n      }\n\n      if (!displayName) {\n        displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], 'header', true) : '';\n      }\n    }\n\n    var callback = this.afterHeaderCompCreated.bind(this, displayName);\n    this.userComponentFactory.newHeaderGroupComponent(params).then(callback);\n  };\n\n  HeaderGroupWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerGroupComp) {\n    var _this = this;\n\n    this.getGui().appendChild(headerGroupComp.getGui());\n    this.addDestroyFunc(function () {\n      _this.getContext().destroyBean(headerGroupComp);\n    });\n    this.setupMove(headerGroupComp.getGui(), displayName);\n  };\n\n  HeaderGroupWrapperComp.prototype.addClasses = function () {\n    // having different classes below allows the style to not have a bottom border\n    // on the group header, if no group is specified\n    // columnGroup.getColGroupDef\n    var style = this.column.isPadding() ? 'no' : 'with';\n    this.addCssClass(\"ag-header-group-cell-\" + style + \"-group\");\n  };\n\n  HeaderGroupWrapperComp.prototype.setupMove = function (eHeaderGroup, displayName) {\n    var _this = this;\n\n    if (!eHeaderGroup) {\n      return;\n    }\n\n    if (this.isSuppressMoving()) {\n      return;\n    }\n\n    var allLeafColumns = this.column.getOriginalColumnGroup().getLeafColumns();\n    var dragSource = {\n      type: DragSourceType.HeaderCell,\n      eElement: eHeaderGroup,\n      defaultIconName: DragAndDropService.ICON_HIDE,\n      dragItemName: displayName,\n      // we add in the original group leaf columns, so we move both visible and non-visible items\n      getDragItem: this.getDragItemForGroup.bind(this),\n      dragSourceDropTarget: this.dragSourceDropTarget,\n      onDragStarted: function onDragStarted() {\n        return allLeafColumns.forEach(function (col) {\n          return col.setMoving(true, \"uiColumnDragged\");\n        });\n      },\n      onDragStopped: function onDragStopped() {\n        return allLeafColumns.forEach(function (col) {\n          return col.setMoving(false, \"uiColumnDragged\");\n        });\n      }\n    };\n    this.dragAndDropService.addDragSource(dragSource, true);\n    this.addDestroyFunc(function () {\n      return _this.dragAndDropService.removeDragSource(dragSource);\n    });\n  }; // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n  // and in the order they are currently in the screen.\n\n\n  HeaderGroupWrapperComp.prototype.getDragItemForGroup = function () {\n    var allColumnsOriginalOrder = this.column.getOriginalColumnGroup().getLeafColumns(); // capture visible state, used when re-entering grid to dictate which columns should be visible\n\n    var visibleState = {};\n    allColumnsOriginalOrder.forEach(function (column) {\n      return visibleState[column.getId()] = column.isVisible();\n    });\n    var allColumnsCurrentOrder = [];\n    this.columnController.getAllDisplayedColumns().forEach(function (column) {\n      if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n        allColumnsCurrentOrder.push(column);\n\n        _.removeFromArray(allColumnsOriginalOrder, column);\n      }\n    }); // we are left with non-visible columns, stick these in at the end\n\n    allColumnsOriginalOrder.forEach(function (column) {\n      return allColumnsCurrentOrder.push(column);\n    }); // create and return dragItem\n\n    return {\n      columns: allColumnsCurrentOrder,\n      visibleState: visibleState\n    };\n  };\n\n  HeaderGroupWrapperComp.prototype.isSuppressMoving = function () {\n    // if any child is fixed, then don't allow moving\n    var childSuppressesMoving = false;\n    this.column.getLeafColumns().forEach(function (column) {\n      if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n        childSuppressesMoving = true;\n      }\n    });\n    var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n    return result;\n  };\n\n  HeaderGroupWrapperComp.prototype.setupWidth = function () {\n    // we need to listen to changes in child columns, as they impact our width\n    this.addListenersToChildrenColumns(); // the children belonging to this group can change, so we need to add and remove listeners as they change\n\n    this.addManagedListener(this.column, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n    this.onWidthChanged(); // the child listeners are not tied to this components life-cycle, as children can get added and removed\n    // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n    // listeners are removed when we finally get destroyed\n\n    this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\n  };\n\n  HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function () {\n    this.addListenersToChildrenColumns();\n    this.onWidthChanged();\n  };\n\n  HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function () {\n    var _this = this; // first destroy any old listeners\n\n\n    this.removeListenersOnChildrenColumns(); // now add new listeners to the new set of children\n\n    var widthChangedListener = this.onWidthChanged.bind(this);\n    this.column.getLeafColumns().forEach(function (column) {\n      column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n      column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n\n      _this.removeChildListenersFuncs.push(function () {\n        column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n        column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n      });\n    });\n  };\n\n  HeaderGroupWrapperComp.prototype.removeListenersOnChildrenColumns = function () {\n    this.removeChildListenersFuncs.forEach(function (func) {\n      return func();\n    });\n    this.removeChildListenersFuncs = [];\n  };\n\n  HeaderGroupWrapperComp.prototype.onWidthChanged = function () {\n    this.getGui().style.width = this.column.getActualWidth() + 'px';\n  };\n\n  HeaderGroupWrapperComp.prototype.setupResize = function () {\n    var _this = this;\n\n    this.eHeaderCellResize = this.getRefElement('agResize');\n\n    if (!this.column.isResizable()) {\n      _.removeFromParent(this.eHeaderCellResize);\n\n      return;\n    }\n\n    var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n      eResizeBar: this.eHeaderCellResize,\n      onResizeStart: this.onResizeStart.bind(this),\n      onResizing: this.onResizing.bind(this, false),\n      onResizeEnd: this.onResizing.bind(this, true)\n    });\n    this.addDestroyFunc(finishedWithResizeFunc);\n\n    if (!this.gridOptionsWrapper.isSuppressAutoSize()) {\n      var skipHeaderOnAutoSize_1 = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n      this.eHeaderCellResize.addEventListener('dblclick', function (event) {\n        // get list of all the column keys we are responsible for\n        var keys = [];\n\n        _this.column.getDisplayedLeafColumns().forEach(function (column) {\n          // not all cols in the group may be participating with auto-resize\n          if (!column.getColDef().suppressAutoSize) {\n            keys.push(column.getColId());\n          }\n        });\n\n        if (keys.length > 0) {\n          _this.columnController.autoSizeColumns(keys, skipHeaderOnAutoSize_1, \"uiColumnResized\");\n        }\n      });\n    }\n  };\n\n  HeaderGroupWrapperComp.prototype.onResizeStart = function (shiftKey) {\n    var _this = this;\n\n    var leafCols = this.column.getDisplayedLeafColumns();\n    this.resizeCols = leafCols.filter(function (col) {\n      return col.isResizable();\n    });\n    this.resizeStartWidth = 0;\n    this.resizeCols.forEach(function (col) {\n      return _this.resizeStartWidth += col.getActualWidth();\n    });\n    this.resizeRatios = [];\n    this.resizeCols.forEach(function (col) {\n      return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);\n    });\n    var takeFromGroup = null;\n\n    if (shiftKey) {\n      takeFromGroup = this.columnController.getDisplayedGroupAfter(this.column);\n    }\n\n    if (takeFromGroup) {\n      var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();\n      this.resizeTakeFromCols = takeFromLeafCols.filter(function (col) {\n        return col.isResizable();\n      });\n      this.resizeTakeFromStartWidth = 0;\n      this.resizeTakeFromCols.forEach(function (col) {\n        return _this.resizeTakeFromStartWidth += col.getActualWidth();\n      });\n      this.resizeTakeFromRatios = [];\n      this.resizeTakeFromCols.forEach(function (col) {\n        return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);\n      });\n    } else {\n      this.resizeTakeFromCols = null;\n      this.resizeTakeFromStartWidth = null;\n      this.resizeTakeFromRatios = null;\n    }\n\n    _.addCssClass(this.getGui(), 'ag-column-resizing');\n  };\n\n  HeaderGroupWrapperComp.prototype.onResizing = function (finished, resizeAmount) {\n    var resizeSets = [];\n    var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n    resizeSets.push({\n      columns: this.resizeCols,\n      ratios: this.resizeRatios,\n      width: this.resizeStartWidth + resizeAmountNormalised\n    });\n\n    if (this.resizeTakeFromCols) {\n      resizeSets.push({\n        columns: this.resizeTakeFromCols,\n        ratios: this.resizeTakeFromRatios,\n        width: this.resizeTakeFromStartWidth - resizeAmountNormalised\n      });\n    }\n\n    this.columnController.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');\n\n    if (finished) {\n      _.removeCssClass(this.getGui(), 'ag-column-resizing');\n    }\n  }; // optionally inverts the drag, depending on pinned and RTL\n  // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n\n\n  HeaderGroupWrapperComp.prototype.normaliseDragChange = function (dragChange) {\n    var result = dragChange;\n\n    if (this.gridOptionsWrapper.isEnableRtl()) {\n      // for RTL, dragging left makes the col bigger, except when pinning left\n      if (this.pinned !== Constants.PINNED_LEFT) {\n        result *= -1;\n      }\n    } else if (this.pinned === Constants.PINNED_RIGHT) {\n      // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n      result *= -1;\n    }\n\n    return result;\n  };\n\n  HeaderGroupWrapperComp.TEMPLATE = \"<div class=\\\"ag-header-group-cell\\\" role=\\\"presentation\\\" tabindex=\\\"-1\\\">\\n            <div ref=\\\"agResize\\\" class=\\\"ag-header-cell-resize\\\" role=\\\"presentation\\\"></div>\\n        </div>\";\n\n  __decorate([Autowired('gridOptionsWrapper')], HeaderGroupWrapperComp.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnController')], HeaderGroupWrapperComp.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('horizontalResizeService')], HeaderGroupWrapperComp.prototype, \"horizontalResizeService\", void 0);\n\n  __decorate([Autowired('dragAndDropService')], HeaderGroupWrapperComp.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Autowired('userComponentFactory')], HeaderGroupWrapperComp.prototype, \"userComponentFactory\", void 0);\n\n  __decorate([Autowired('beans')], HeaderGroupWrapperComp.prototype, \"beans\", void 0);\n\n  __decorate([Autowired('gridApi')], HeaderGroupWrapperComp.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], HeaderGroupWrapperComp.prototype, \"columnApi\", void 0);\n\n  return HeaderGroupWrapperComp;\n}(AbstractHeaderWrapper);\n\nexport { HeaderGroupWrapperComp };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/headerRendering/headerGroup/headerGroupWrapperComp.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Column","ColumnGroup","Constants","Autowired","CssClassApplier","DragAndDropService","DragSourceType","SetLeftFeature","HoverFeature","TooltipFeature","AbstractHeaderWrapper","_","HeaderGroupWrapperComp","_super","columnGroup","dragSourceDropTarget","pinned","_this","call","TEMPLATE","removeChildListenersFuncs","column","postConstruct","addHeaderClassesFromColDef","getComponentHolder","getGui","gridOptionsWrapper","displayName","columnController","getDisplayNameForColumnGroup","appendHeaderGroupComp","setupResize","addClasses","setupWidth","addAttributes","setupMovingCss","setupTooltip","createManagedBean","getOriginalColumnGroup","getLeafColumns","beans","onFocusIn","e","contains","relatedTarget","headerRow","getParentComponent","focusController","setFocusedHeader","getRowIndex","getColumn","handleKeyDown","activeEl","document","activeElement","eGui","wrapperHasFocus","keyCode","KEY_ENTER","expandable","isExpandable","newExpandedValue","isExpanded","setColumnGroupOpened","originalColumnGroup","leafColumns","forEach","col","addManagedListener","EVENT_MOVING_CHANGED","onColumnMovingChanged","bind","getColGroupDef","getTooltipText","colGroupDef","headerTooltip","tooltipText","isEnableBrowserTooltips","setAttribute","addOrRemoveCssClass","isMoving","getUniqueId","params","setExpanded","expanded","api","gridApi","columnApi","context","getContext","leafCols","getParent","headerName","getDisplayNameForColumn","callback","afterHeaderCompCreated","userComponentFactory","newHeaderGroupComponent","then","headerGroupComp","appendChild","addDestroyFunc","destroyBean","setupMove","style","isPadding","addCssClass","eHeaderGroup","isSuppressMoving","allLeafColumns","dragSource","type","HeaderCell","eElement","defaultIconName","ICON_HIDE","dragItemName","getDragItem","getDragItemForGroup","onDragStarted","setMoving","onDragStopped","dragAndDropService","addDragSource","removeDragSource","allColumnsOriginalOrder","visibleState","getId","isVisible","allColumnsCurrentOrder","getAllDisplayedColumns","indexOf","push","removeFromArray","columns","childSuppressesMoving","getColDef","suppressMovable","lockPosition","result","isSuppressMovableColumns","addListenersToChildrenColumns","EVENT_DISPLAYED_CHILDREN_CHANGED","onDisplayedChildrenChanged","onWidthChanged","removeListenersOnChildrenColumns","widthChangedListener","addEventListener","EVENT_WIDTH_CHANGED","EVENT_VISIBLE_CHANGED","removeEventListener","func","width","getActualWidth","eHeaderCellResize","getRefElement","isResizable","removeFromParent","finishedWithResizeFunc","horizontalResizeService","addResizeBar","eResizeBar","onResizeStart","onResizing","onResizeEnd","isSuppressAutoSize","skipHeaderOnAutoSize_1","isSkipHeaderOnAutoSize","event","keys","getDisplayedLeafColumns","suppressAutoSize","getColId","autoSizeColumns","shiftKey","resizeCols","filter","resizeStartWidth","resizeRatios","takeFromGroup","getDisplayedGroupAfter","takeFromLeafCols","resizeTakeFromCols","resizeTakeFromStartWidth","resizeTakeFromRatios","finished","resizeAmount","resizeSets","resizeAmountNormalised","normaliseDragChange","ratios","resizeColumnSets","removeCssClass","dragChange","isEnableRtl","PINNED_LEFT","PINNED_RIGHT"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Constants } from \"../../constants\";\nimport { Autowired } from \"../../context/context\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { DragAndDropService, DragSourceType } from \"../../dragAndDrop/dragAndDropService\";\nimport { SetLeftFeature } from \"../../rendering/features/setLeftFeature\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { TooltipFeature } from \"../../widgets/tooltipFeature\";\nimport { AbstractHeaderWrapper } from \"../header/abstractHeaderWrapper\";\nimport { _ } from \"../../utils\";\nvar HeaderGroupWrapperComp = /** @class */ (function (_super) {\n    __extends(HeaderGroupWrapperComp, _super);\n    function HeaderGroupWrapperComp(columnGroup, dragSourceDropTarget, pinned) {\n        var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this;\n        // the children can change, we keep destroy functions related to listening to the children here\n        _this.removeChildListenersFuncs = [];\n        _this.column = columnGroup;\n        _this.dragSourceDropTarget = dragSourceDropTarget;\n        _this.pinned = pinned;\n        return _this;\n    }\n    HeaderGroupWrapperComp.prototype.postConstruct = function () {\n        _super.prototype.postConstruct.call(this);\n        CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.column);\n        var displayName = this.columnController.getDisplayNameForColumnGroup(this.column, 'header');\n        this.appendHeaderGroupComp(displayName);\n        this.setupResize();\n        this.addClasses();\n        this.setupWidth();\n        this.addAttributes();\n        this.setupMovingCss();\n        this.setupTooltip();\n        this.createManagedBean(new HoverFeature(this.column.getOriginalColumnGroup().getLeafColumns(), this.getGui()));\n        this.createManagedBean(new SetLeftFeature(this.column, this.getGui(), this.beans));\n    };\n    HeaderGroupWrapperComp.prototype.onFocusIn = function (e) {\n        if (!this.getGui().contains(e.relatedTarget)) {\n            var headerRow = this.getParentComponent();\n            this.beans.focusController.setFocusedHeader(headerRow.getRowIndex(), this.getColumn());\n        }\n    };\n    HeaderGroupWrapperComp.prototype.handleKeyDown = function (e) {\n        var activeEl = document.activeElement;\n        var eGui = this.getGui();\n        var wrapperHasFocus = activeEl === eGui;\n        switch (e.keyCode) {\n            case Constants.KEY_ENTER:\n                if (wrapperHasFocus) {\n                    var column = this.getColumn();\n                    var expandable = column.isExpandable();\n                    if (expandable) {\n                        var newExpandedValue = !column.isExpanded();\n                        this.columnController.setColumnGroupOpened(column.getOriginalColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n                    }\n                }\n        }\n    };\n    HeaderGroupWrapperComp.prototype.setupMovingCss = function () {\n        var _this = this;\n        var originalColumnGroup = this.column.getOriginalColumnGroup();\n        var leafColumns = originalColumnGroup.getLeafColumns();\n        leafColumns.forEach(function (col) {\n            _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, _this.onColumnMovingChanged.bind(_this));\n        });\n        this.onColumnMovingChanged();\n    };\n    HeaderGroupWrapperComp.prototype.getComponentHolder = function () {\n        return this.column.getColGroupDef();\n    };\n    HeaderGroupWrapperComp.prototype.getTooltipText = function () {\n        var colGroupDef = this.getComponentHolder();\n        return colGroupDef && colGroupDef.headerTooltip;\n    };\n    HeaderGroupWrapperComp.prototype.setupTooltip = function () {\n        var tooltipText = this.getTooltipText();\n        if (tooltipText == null) {\n            return;\n        }\n        if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {\n            this.getGui().setAttribute('title', tooltipText);\n        }\n        else {\n            this.createManagedBean(new TooltipFeature(this, 'headerGroup'));\n        }\n    };\n    HeaderGroupWrapperComp.prototype.onColumnMovingChanged = function () {\n        // this function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        _.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-moving', this.column.isMoving());\n    };\n    HeaderGroupWrapperComp.prototype.addAttributes = function () {\n        this.getGui().setAttribute(\"col-id\", this.column.getUniqueId());\n    };\n    HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function (displayName) {\n        var _this = this;\n        var params = {\n            displayName: displayName,\n            columnGroup: this.column,\n            setExpanded: function (expanded) {\n                _this.columnController.setColumnGroupOpened(_this.column.getOriginalColumnGroup(), expanded, \"gridInitializing\");\n            },\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        if (!displayName) {\n            var columnGroup = this.column;\n            var leafCols = columnGroup.getLeafColumns();\n            // find the top most column group that represents the same columns. so if we are dragging a group, we also\n            // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n            // of grouping, with each group only containing the next group, and the last group containing three columns,\n            // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n            // the groups represent the same column set.\n            while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n                columnGroup = columnGroup.getParent();\n            }\n            var colGroupDef = columnGroup.getColGroupDef();\n            if (colGroupDef) {\n                displayName = colGroupDef.headerName;\n            }\n            if (!displayName) {\n                displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], 'header', true) : '';\n            }\n        }\n        var callback = this.afterHeaderCompCreated.bind(this, displayName);\n        this.userComponentFactory.newHeaderGroupComponent(params).then(callback);\n    };\n    HeaderGroupWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerGroupComp) {\n        var _this = this;\n        this.getGui().appendChild(headerGroupComp.getGui());\n        this.addDestroyFunc(function () {\n            _this.getContext().destroyBean(headerGroupComp);\n        });\n        this.setupMove(headerGroupComp.getGui(), displayName);\n    };\n    HeaderGroupWrapperComp.prototype.addClasses = function () {\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        // columnGroup.getColGroupDef\n        var style = this.column.isPadding() ? 'no' : 'with';\n        this.addCssClass(\"ag-header-group-cell-\" + style + \"-group\");\n    };\n    HeaderGroupWrapperComp.prototype.setupMove = function (eHeaderGroup, displayName) {\n        var _this = this;\n        if (!eHeaderGroup) {\n            return;\n        }\n        if (this.isSuppressMoving()) {\n            return;\n        }\n        var allLeafColumns = this.column.getOriginalColumnGroup().getLeafColumns();\n        var dragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            defaultIconName: DragAndDropService.ICON_HIDE,\n            dragItemName: displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: this.getDragItemForGroup.bind(this),\n            dragSourceDropTarget: this.dragSourceDropTarget,\n            onDragStarted: function () { return allLeafColumns.forEach(function (col) { return col.setMoving(true, \"uiColumnDragged\"); }); },\n            onDragStopped: function () { return allLeafColumns.forEach(function (col) { return col.setMoving(false, \"uiColumnDragged\"); }); }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });\n    };\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    HeaderGroupWrapperComp.prototype.getDragItemForGroup = function () {\n        var allColumnsOriginalOrder = this.column.getOriginalColumnGroup().getLeafColumns();\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        var visibleState = {};\n        allColumnsOriginalOrder.forEach(function (column) { return visibleState[column.getId()] = column.isVisible(); });\n        var allColumnsCurrentOrder = [];\n        this.columnController.getAllDisplayedColumns().forEach(function (column) {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                _.removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach(function (column) { return allColumnsCurrentOrder.push(column); });\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState\n        };\n    };\n    HeaderGroupWrapperComp.prototype.isSuppressMoving = function () {\n        // if any child is fixed, then don't allow moving\n        var childSuppressesMoving = false;\n        this.column.getLeafColumns().forEach(function (column) {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n        var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n        return result;\n    };\n    HeaderGroupWrapperComp.prototype.setupWidth = function () {\n        // we need to listen to changes in child columns, as they impact our width\n        this.addListenersToChildrenColumns();\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\n        this.addManagedListener(this.column, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n        this.onWidthChanged();\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n        // listeners are removed when we finally get destroyed\n        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\n    };\n    HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function () {\n        this.addListenersToChildrenColumns();\n        this.onWidthChanged();\n    };\n    HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function () {\n        var _this = this;\n        // first destroy any old listeners\n        this.removeListenersOnChildrenColumns();\n        // now add new listeners to the new set of children\n        var widthChangedListener = this.onWidthChanged.bind(this);\n        this.column.getLeafColumns().forEach(function (column) {\n            column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n            column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            _this.removeChildListenersFuncs.push(function () {\n                column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n                column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            });\n        });\n    };\n    HeaderGroupWrapperComp.prototype.removeListenersOnChildrenColumns = function () {\n        this.removeChildListenersFuncs.forEach(function (func) { return func(); });\n        this.removeChildListenersFuncs = [];\n    };\n    HeaderGroupWrapperComp.prototype.onWidthChanged = function () {\n        this.getGui().style.width = this.column.getActualWidth() + 'px';\n    };\n    HeaderGroupWrapperComp.prototype.setupResize = function () {\n        var _this = this;\n        this.eHeaderCellResize = this.getRefElement('agResize');\n        if (!this.column.isResizable()) {\n            _.removeFromParent(this.eHeaderCellResize);\n            return;\n        }\n        var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eHeaderCellResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true)\n        });\n        this.addDestroyFunc(finishedWithResizeFunc);\n        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {\n            var skipHeaderOnAutoSize_1 = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n            this.eHeaderCellResize.addEventListener('dblclick', function (event) {\n                // get list of all the column keys we are responsible for\n                var keys = [];\n                _this.column.getDisplayedLeafColumns().forEach(function (column) {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n                if (keys.length > 0) {\n                    _this.columnController.autoSizeColumns(keys, skipHeaderOnAutoSize_1, \"uiColumnResized\");\n                }\n            });\n        }\n    };\n    HeaderGroupWrapperComp.prototype.onResizeStart = function (shiftKey) {\n        var _this = this;\n        var leafCols = this.column.getDisplayedLeafColumns();\n        this.resizeCols = leafCols.filter(function (col) { return col.isResizable(); });\n        this.resizeStartWidth = 0;\n        this.resizeCols.forEach(function (col) { return _this.resizeStartWidth += col.getActualWidth(); });\n        this.resizeRatios = [];\n        this.resizeCols.forEach(function (col) { return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth); });\n        var takeFromGroup = null;\n        if (shiftKey) {\n            takeFromGroup = this.columnController.getDisplayedGroupAfter(this.column);\n        }\n        if (takeFromGroup) {\n            var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();\n            this.resizeTakeFromCols = takeFromLeafCols.filter(function (col) { return col.isResizable(); });\n            this.resizeTakeFromStartWidth = 0;\n            this.resizeTakeFromCols.forEach(function (col) { return _this.resizeTakeFromStartWidth += col.getActualWidth(); });\n            this.resizeTakeFromRatios = [];\n            this.resizeTakeFromCols.forEach(function (col) { return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth); });\n        }\n        else {\n            this.resizeTakeFromCols = null;\n            this.resizeTakeFromStartWidth = null;\n            this.resizeTakeFromRatios = null;\n        }\n        _.addCssClass(this.getGui(), 'ag-column-resizing');\n    };\n    HeaderGroupWrapperComp.prototype.onResizing = function (finished, resizeAmount) {\n        var resizeSets = [];\n        var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n        resizeSets.push({\n            columns: this.resizeCols,\n            ratios: this.resizeRatios,\n            width: this.resizeStartWidth + resizeAmountNormalised\n        });\n        if (this.resizeTakeFromCols) {\n            resizeSets.push({\n                columns: this.resizeTakeFromCols,\n                ratios: this.resizeTakeFromRatios,\n                width: this.resizeTakeFromStartWidth - resizeAmountNormalised\n            });\n        }\n        this.columnController.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');\n        if (finished) {\n            _.removeCssClass(this.getGui(), 'ag-column-resizing');\n        }\n    };\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    HeaderGroupWrapperComp.prototype.normaliseDragChange = function (dragChange) {\n        var result = dragChange;\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== Constants.PINNED_LEFT) {\n                result *= -1;\n            }\n        }\n        else if (this.pinned === Constants.PINNED_RIGHT) {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n        return result;\n    };\n    HeaderGroupWrapperComp.TEMPLATE = \"<div class=\\\"ag-header-group-cell\\\" role=\\\"presentation\\\" tabindex=\\\"-1\\\">\\n            <div ref=\\\"agResize\\\" class=\\\"ag-header-cell-resize\\\" role=\\\"presentation\\\"></div>\\n        </div>\";\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], HeaderGroupWrapperComp.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], HeaderGroupWrapperComp.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('horizontalResizeService')\n    ], HeaderGroupWrapperComp.prototype, \"horizontalResizeService\", void 0);\n    __decorate([\n        Autowired('dragAndDropService')\n    ], HeaderGroupWrapperComp.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        Autowired('userComponentFactory')\n    ], HeaderGroupWrapperComp.prototype, \"userComponentFactory\", void 0);\n    __decorate([\n        Autowired('beans')\n    ], HeaderGroupWrapperComp.prototype, \"beans\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], HeaderGroupWrapperComp.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], HeaderGroupWrapperComp.prototype, \"columnApi\", void 0);\n    return HeaderGroupWrapperComp;\n}(AbstractHeaderWrapper));\nexport { HeaderGroupWrapperComp };\n"]},"metadata":{},"sourceType":"module"}