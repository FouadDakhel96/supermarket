{"ast":null,"code":"var monthlyCalendarOptions = {\n  startOfPeriod: function startOfPeriod(date, offset) {\n    return new Date(date.getFullYear(), date.getMonth() + offset, 1);\n  },\n  roundToValue: function roundToValue(date) {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  },\n  valueInPeriod: function valueInPeriod(first, offset) {\n    return new Date(first.getFullYear(), first.getMonth(), first.getDate() + offset);\n  },\n  periodLength: function periodLength(first) {\n    var lastDayOfMonth = new Date(first.getFullYear(), first.getMonth() + 1, 0);\n    return lastDayOfMonth.getDate();\n  },\n  entryLabel: function entryLabel(value) {\n    return new Intl.DateTimeFormat('default', {\n      day: 'numeric'\n    }).format(value);\n  },\n  columnCount: function columnCount() {\n    return 7;\n  },\n  columnForValue: function columnForValue(value) {\n    return (value.getDay() + 6) % 7;\n  },\n  columnTitle: function columnTitle(value) {\n    return new Intl.DateTimeFormat('default', {\n      weekday: 'narrow'\n    }).format(value);\n  }\n};\n\nvar DateTimeListModel =\n/** @class */\nfunction () {\n  function DateTimeListModel(options) {\n    if (options === void 0) {\n      options = monthlyCalendarOptions;\n    }\n\n    this.options = options;\n  }\n\n  DateTimeListModel.prototype.getPage = function (date, offset) {\n    var options = this.options;\n    var entries = [];\n    var firstValue = options.startOfPeriod(date, offset);\n    var columnCount = options.columnCount(firstValue); // TODO call columnForValue for every value and stack them into arbitrary columns\n\n    var paddingAtStart = modulo(options.columnForValue(firstValue), columnCount); // adds padding at start\n\n    var periodLength = options.periodLength(firstValue);\n    var lastValue = options.valueInPeriod(firstValue, periodLength - 1);\n    var itemsInLastColumn = modulo(options.columnForValue(lastValue), columnCount) + 1;\n    var paddingAtEnd = columnCount - itemsInLastColumn;\n    var lastOffset = periodLength - 1 + paddingAtEnd;\n\n    for (var i = -paddingAtStart; i <= lastOffset; i++) {\n      var value = options.valueInPeriod(firstValue, i);\n      entries.push({\n        value: value,\n        label: options.entryLabel(value),\n        isPadding: i < 0 || i >= periodLength\n      });\n    }\n\n    var columns = Array(options.columnCount(firstValue)).fill(null).map(function (_, i) {\n      return {\n        label: options.columnTitle(entries[i].value)\n      };\n    });\n    var titleFormat = new Intl.DateTimeFormat('default', {\n      month: 'long',\n      year: 'numeric'\n    });\n    return {\n      entries: splitArray(entries, columns.length),\n      columns: columns,\n      title: titleFormat.format(firstValue)\n    };\n  };\n\n  DateTimeListModel.prototype.roundToValue = function (date) {\n    return this.options.roundToValue(date);\n  };\n\n  return DateTimeListModel;\n}();\n\nexport { DateTimeListModel }; // modulo function that, unline the JS % operator, is safe for negative numbers\n\nvar modulo = function modulo(value, _modulo) {\n  return (value % _modulo + _modulo) % _modulo;\n};\n\nvar splitArray = function splitArray(array, chunkSize) {\n  var chunks = [];\n  array.forEach(function (value, i) {\n    var chunkIndex = Math.floor(i / chunkSize);\n    chunks[chunkIndex] = chunks[chunkIndex] || [];\n    chunks[chunkIndex].push(value);\n  });\n  return chunks;\n};","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/date-time-cell-editor/dist/es6/dateTimeList/dateTimeListModel.js"],"names":["monthlyCalendarOptions","startOfPeriod","date","offset","Date","getFullYear","getMonth","roundToValue","getDate","valueInPeriod","first","periodLength","lastDayOfMonth","entryLabel","value","Intl","DateTimeFormat","day","format","columnCount","columnForValue","getDay","columnTitle","weekday","DateTimeListModel","options","prototype","getPage","entries","firstValue","paddingAtStart","modulo","lastValue","itemsInLastColumn","paddingAtEnd","lastOffset","i","push","label","isPadding","columns","Array","fill","map","_","titleFormat","month","year","splitArray","length","title","array","chunkSize","chunks","forEach","chunkIndex","Math","floor"],"mappings":"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","sourcesContent":["var monthlyCalendarOptions = {\n    startOfPeriod: function (date, offset) {\n        return new Date(date.getFullYear(), date.getMonth() + offset, 1);\n    },\n    roundToValue: function (date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    },\n    valueInPeriod: function (first, offset) {\n        return new Date(first.getFullYear(), first.getMonth(), first.getDate() + offset);\n    },\n    periodLength: function (first) {\n        var lastDayOfMonth = new Date(first.getFullYear(), first.getMonth() + 1, 0);\n        return lastDayOfMonth.getDate();\n    },\n    entryLabel: function (value) {\n        return new Intl.DateTimeFormat('default', { day: 'numeric' }).format(value);\n    },\n    columnCount: function () {\n        return 7;\n    },\n    columnForValue: function (value) {\n        return (value.getDay() + 6) % 7;\n    },\n    columnTitle: function (value) {\n        return new Intl.DateTimeFormat('default', { weekday: 'narrow' }).format(value);\n    },\n};\nvar DateTimeListModel = /** @class */ (function () {\n    function DateTimeListModel(options) {\n        if (options === void 0) { options = monthlyCalendarOptions; }\n        this.options = options;\n    }\n    DateTimeListModel.prototype.getPage = function (date, offset) {\n        var options = this.options;\n        var entries = [];\n        var firstValue = options.startOfPeriod(date, offset);\n        var columnCount = options.columnCount(firstValue);\n        // TODO call columnForValue for every value and stack them into arbitrary columns\n        var paddingAtStart = modulo(options.columnForValue(firstValue), columnCount); // adds padding at start\n        var periodLength = options.periodLength(firstValue);\n        var lastValue = options.valueInPeriod(firstValue, periodLength - 1);\n        var itemsInLastColumn = modulo(options.columnForValue(lastValue), columnCount) + 1;\n        var paddingAtEnd = columnCount - itemsInLastColumn;\n        var lastOffset = periodLength - 1 + paddingAtEnd;\n        for (var i = -paddingAtStart; i <= lastOffset; i++) {\n            var value = options.valueInPeriod(firstValue, i);\n            entries.push({\n                value: value,\n                label: options.entryLabel(value),\n                isPadding: i < 0 || i >= periodLength,\n            });\n        }\n        var columns = Array(options.columnCount(firstValue))\n            .fill(null)\n            .map(function (_, i) { return ({\n            label: options.columnTitle(entries[i].value),\n        }); });\n        var titleFormat = new Intl.DateTimeFormat('default', { month: 'long', year: 'numeric' });\n        return {\n            entries: splitArray(entries, columns.length),\n            columns: columns,\n            title: titleFormat.format(firstValue),\n        };\n    };\n    DateTimeListModel.prototype.roundToValue = function (date) {\n        return this.options.roundToValue(date);\n    };\n    return DateTimeListModel;\n}());\nexport { DateTimeListModel };\n// modulo function that, unline the JS % operator, is safe for negative numbers\nvar modulo = function (value, modulo) { return ((value % modulo) + modulo) % modulo; };\nvar splitArray = function (array, chunkSize) {\n    var chunks = [];\n    array.forEach(function (value, i) {\n        var chunkIndex = Math.floor(i / chunkSize);\n        chunks[chunkIndex] = chunks[chunkIndex] || [];\n        chunks[chunkIndex].push(value);\n    });\n    return chunks;\n};\n"]},"metadata":{},"sourceType":"module"}