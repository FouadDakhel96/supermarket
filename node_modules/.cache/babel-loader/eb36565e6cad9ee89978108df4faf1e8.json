{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Autowired, Events, Qualifier, RowNodeCache } from \"@ag-grid-community/core\";\nimport { InfiniteBlock } from \"./infiniteBlock\";\n\nvar InfiniteCache =\n/** @class */\nfunction (_super) {\n  __extends(InfiniteCache, _super);\n\n  function InfiniteCache(params) {\n    return _super.call(this, params) || this;\n  }\n\n  InfiniteCache.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('InfiniteCache');\n  };\n\n  InfiniteCache.prototype.moveItemsDown = function (block, moveFromIndex, moveCount) {\n    var startRow = block.getStartRow();\n    var endRow = block.getEndRow();\n    var indexOfLastRowToMove = moveFromIndex + moveCount; // all rows need to be moved down below the insertion index\n\n    for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {\n      // don't move rows at or before the insertion index\n      if (currentRowIndex < indexOfLastRowToMove) {\n        continue;\n      }\n\n      var indexOfNodeWeWant = currentRowIndex - moveCount;\n      var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);\n\n      if (nodeForThisIndex) {\n        block.setRowNode(currentRowIndex, nodeForThisIndex);\n      } else {\n        block.setBlankRowNode(currentRowIndex);\n        block.setDirty();\n      }\n    }\n  };\n\n  InfiniteCache.prototype.insertItems = function (block, indexToInsert, items) {\n    var pageStartRow = block.getStartRow();\n    var pageEndRow = block.getEndRow();\n    var newRowNodes = []; // next stage is insert the rows into this page, if applicable\n\n    for (var index = 0; index < items.length; index++) {\n      var rowIndex = indexToInsert + index;\n      var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;\n\n      if (currentRowInThisPage) {\n        var dataItem = items[index];\n        var newRowNode = block.setNewData(rowIndex, dataItem);\n        newRowNodes.push(newRowNode);\n      }\n    }\n\n    return newRowNodes;\n  };\n\n  InfiniteCache.prototype.insertItemsAtIndex = function (indexToInsert, items) {\n    // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order\n    var _this = this;\n\n    var newNodes = [];\n    this.forEachBlockInReverseOrder(function (block) {\n      var pageEndRow = block.getEndRow(); // if the insertion is after this page, then this page is not impacted\n\n      if (pageEndRow <= indexToInsert) {\n        return;\n      }\n\n      _this.moveItemsDown(block, indexToInsert, items.length);\n\n      var newNodesThisPage = _this.insertItems(block, indexToInsert, items);\n\n      newNodesThisPage.forEach(function (rowNode) {\n        return newNodes.push(rowNode);\n      });\n    });\n\n    if (this.isMaxRowFound()) {\n      this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);\n    }\n\n    this.onCacheUpdated();\n    var event = {\n      type: Events.EVENT_ROW_DATA_UPDATED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  }; // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,\n  // it will want new pages in the cache as it asks for rows. only when we are inserting /\n  // removing rows via the api is dontCreatePage set, where we move rows between the pages.\n\n\n  InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {\n    if (dontCreatePage === void 0) {\n      dontCreatePage = false;\n    }\n\n    var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);\n    var block = this.getBlock(blockId);\n\n    if (!block) {\n      if (dontCreatePage) {\n        return null;\n      } else {\n        block = this.createBlock(blockId);\n      }\n    }\n\n    return block.getRow(rowIndex);\n  };\n\n  InfiniteCache.prototype.createBlock = function (blockNumber) {\n    var newBlock = new InfiniteBlock(blockNumber, this.cacheParams);\n    this.getContext().createBean(newBlock);\n    this.postCreateBlock(newBlock);\n    return newBlock;\n  }; // we have this on infinite row model only, not server side row model,\n  // because for server side, it would leave the children in inconsistent\n  // state - eg if a node had children, but after the refresh it had data\n  // for a different row, then the children would be with the wrong row node.\n\n\n  InfiniteCache.prototype.refreshCache = function () {\n    this.forEachBlockInOrder(function (block) {\n      return block.setDirty();\n    });\n    this.checkBlockToLoad();\n  };\n\n  __decorate([Autowired('columnApi')], InfiniteCache.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], InfiniteCache.prototype, \"gridApi\", void 0);\n\n  __decorate([__param(0, Qualifier('loggerFactory'))], InfiniteCache.prototype, \"setBeans\", null);\n\n  return InfiniteCache;\n}(RowNodeCache);\n\nexport { InfiniteCache };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteCache.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Autowired","Events","Qualifier","RowNodeCache","InfiniteBlock","InfiniteCache","_super","params","call","setBeans","loggerFactory","logger","moveItemsDown","block","moveFromIndex","moveCount","startRow","getStartRow","endRow","getEndRow","indexOfLastRowToMove","currentRowIndex","indexOfNodeWeWant","nodeForThisIndex","getRow","setRowNode","setBlankRowNode","setDirty","insertItems","indexToInsert","items","pageStartRow","pageEndRow","newRowNodes","index","rowIndex","currentRowInThisPage","dataItem","newRowNode","setNewData","push","insertItemsAtIndex","_this","newNodes","forEachBlockInReverseOrder","newNodesThisPage","forEach","rowNode","isMaxRowFound","hack_setVirtualRowCount","getVirtualRowCount","onCacheUpdated","event","type","EVENT_ROW_DATA_UPDATED","api","gridApi","columnApi","eventService","dispatchEvent","dontCreatePage","blockId","Math","floor","cacheParams","blockSize","getBlock","createBlock","blockNumber","newBlock","getContext","createBean","postCreateBlock","refreshCache","forEachBlockInOrder","checkBlockToLoad"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Autowired, Events, Qualifier, RowNodeCache, } from \"@ag-grid-community/core\";\nimport { InfiniteBlock } from \"./infiniteBlock\";\nvar InfiniteCache = /** @class */ (function (_super) {\n    __extends(InfiniteCache, _super);\n    function InfiniteCache(params) {\n        return _super.call(this, params) || this;\n    }\n    InfiniteCache.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('InfiniteCache');\n    };\n    InfiniteCache.prototype.moveItemsDown = function (block, moveFromIndex, moveCount) {\n        var startRow = block.getStartRow();\n        var endRow = block.getEndRow();\n        var indexOfLastRowToMove = moveFromIndex + moveCount;\n        // all rows need to be moved down below the insertion index\n        for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {\n            // don't move rows at or before the insertion index\n            if (currentRowIndex < indexOfLastRowToMove) {\n                continue;\n            }\n            var indexOfNodeWeWant = currentRowIndex - moveCount;\n            var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);\n            if (nodeForThisIndex) {\n                block.setRowNode(currentRowIndex, nodeForThisIndex);\n            }\n            else {\n                block.setBlankRowNode(currentRowIndex);\n                block.setDirty();\n            }\n        }\n    };\n    InfiniteCache.prototype.insertItems = function (block, indexToInsert, items) {\n        var pageStartRow = block.getStartRow();\n        var pageEndRow = block.getEndRow();\n        var newRowNodes = [];\n        // next stage is insert the rows into this page, if applicable\n        for (var index = 0; index < items.length; index++) {\n            var rowIndex = indexToInsert + index;\n            var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;\n            if (currentRowInThisPage) {\n                var dataItem = items[index];\n                var newRowNode = block.setNewData(rowIndex, dataItem);\n                newRowNodes.push(newRowNode);\n            }\n        }\n        return newRowNodes;\n    };\n    InfiniteCache.prototype.insertItemsAtIndex = function (indexToInsert, items) {\n        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order\n        var _this = this;\n        var newNodes = [];\n        this.forEachBlockInReverseOrder(function (block) {\n            var pageEndRow = block.getEndRow();\n            // if the insertion is after this page, then this page is not impacted\n            if (pageEndRow <= indexToInsert) {\n                return;\n            }\n            _this.moveItemsDown(block, indexToInsert, items.length);\n            var newNodesThisPage = _this.insertItems(block, indexToInsert, items);\n            newNodesThisPage.forEach(function (rowNode) { return newNodes.push(rowNode); });\n        });\n        if (this.isMaxRowFound()) {\n            this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);\n        }\n        this.onCacheUpdated();\n        var event = {\n            type: Events.EVENT_ROW_DATA_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,\n    // it will want new pages in the cache as it asks for rows. only when we are inserting /\n    // removing rows via the api is dontCreatePage set, where we move rows between the pages.\n    InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {\n        if (dontCreatePage === void 0) { dontCreatePage = false; }\n        var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);\n        var block = this.getBlock(blockId);\n        if (!block) {\n            if (dontCreatePage) {\n                return null;\n            }\n            else {\n                block = this.createBlock(blockId);\n            }\n        }\n        return block.getRow(rowIndex);\n    };\n    InfiniteCache.prototype.createBlock = function (blockNumber) {\n        var newBlock = new InfiniteBlock(blockNumber, this.cacheParams);\n        this.getContext().createBean(newBlock);\n        this.postCreateBlock(newBlock);\n        return newBlock;\n    };\n    // we have this on infinite row model only, not server side row model,\n    // because for server side, it would leave the children in inconsistent\n    // state - eg if a node had children, but after the refresh it had data\n    // for a different row, then the children would be with the wrong row node.\n    InfiniteCache.prototype.refreshCache = function () {\n        this.forEachBlockInOrder(function (block) { return block.setDirty(); });\n        this.checkBlockToLoad();\n    };\n    __decorate([\n        Autowired('columnApi')\n    ], InfiniteCache.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], InfiniteCache.prototype, \"gridApi\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], InfiniteCache.prototype, \"setBeans\", null);\n    return InfiniteCache;\n}(RowNodeCache));\nexport { InfiniteCache };\n"]},"metadata":{},"sourceType":"module"}