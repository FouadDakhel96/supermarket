{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar reUnescapedHtml = /[&<>\"']/g;\n/**\n * HTML Escapes.\n */\n\nvar HTML_ESCAPES = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n/**\n * It encodes any string in UTF-8 format\n * taken from https://github.com/mathiasbynens/utf8.js\n * @param {string} s\n * @returns {string}\n */\n\nexport function utf8_encode(s) {\n  var stringFromCharCode = String.fromCharCode;\n\n  function ucs2decode(string) {\n    var output = [];\n    var counter = 0;\n    var length = string.length;\n    var value;\n    var extra;\n\n    while (counter < length) {\n      value = string.charCodeAt(counter++);\n\n      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n        // high surrogate, and there is a next character\n        extra = string.charCodeAt(counter++);\n\n        if ((extra & 0xFC00) == 0xDC00) {\n          // low surrogate\n          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n        } else {\n          // unmatched surrogate; only append this code unit, in case the next\n          // code unit is the high surrogate of a surrogate pair\n          output.push(value);\n          counter--;\n        }\n      } else {\n        output.push(value);\n      }\n    }\n\n    return output;\n  }\n\n  function checkScalarValue(codePoint) {\n    if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n      throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');\n    }\n  }\n\n  function createByte(codePoint, shift) {\n    return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);\n  }\n\n  function encodeCodePoint(codePoint) {\n    if ((codePoint & 0xFFFFFF80) == 0) {\n      // 1-byte sequence\n      return stringFromCharCode(codePoint);\n    }\n\n    var symbol = '';\n\n    if ((codePoint & 0xFFFFF800) == 0) {\n      // 2-byte sequence\n      symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);\n    } else if ((codePoint & 0xFFFF0000) == 0) {\n      // 3-byte sequence\n      checkScalarValue(codePoint);\n      symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);\n      symbol += createByte(codePoint, 6);\n    } else if ((codePoint & 0xFFE00000) == 0) {\n      // 4-byte sequence\n      symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);\n      symbol += createByte(codePoint, 12);\n      symbol += createByte(codePoint, 6);\n    }\n\n    symbol += stringFromCharCode(codePoint & 0x3F | 0x80);\n    return symbol;\n  }\n\n  var codePoints = ucs2decode(s);\n  var length = codePoints.length;\n  var index = -1;\n  var codePoint;\n  var byteString = '';\n\n  while (++index < length) {\n    codePoint = codePoints[index];\n    byteString += encodeCodePoint(codePoint);\n  }\n\n  return byteString;\n}\n/**\n * Converts a camelCase string into hyphenated string\n * from https://gist.github.com/youssman/745578062609e8acac9f\n * @param {string} str\n * @return {string}\n */\n\nexport function camelCaseToHyphen(str) {\n  if (str === null || str === undefined) {\n    return null;\n  }\n\n  return str.replace(/([A-Z])/g, function (g) {\n    return '-' + g[0].toLowerCase();\n  });\n}\n/**\n * Converts a hyphenated string into camelCase string\n * from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase\n * @param {string} str\n * @return {string}\n */\n\nexport function hyphenToCamelCase(str) {\n  if (str === null || str === undefined) {\n    return null;\n  }\n\n  return str.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n}\nexport function capitalise(str) {\n  return str[0].toUpperCase() + str.substr(1).toLowerCase();\n}\nexport function escape(toEscape) {\n  return toEscape == null || !toEscape.replace ? toEscape : toEscape.replace(reUnescapedHtml, function (chr) {\n    return HTML_ESCAPES[chr];\n  });\n}\n/**\n * Converts a camelCase string into regular text\n * from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression\n * @param {string} camelCase\n * @return {string}\n */\n\nexport function camelCaseToHumanText(camelCase) {\n  if (!camelCase || camelCase == null) {\n    return null;\n  }\n\n  var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;\n  var words = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');\n  return words.map(function (word) {\n    return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : '');\n  }).join(' ');\n}","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/utils/string.js"],"names":["reUnescapedHtml","HTML_ESCAPES","utf8_encode","s","stringFromCharCode","String","fromCharCode","ucs2decode","string","output","counter","length","value","extra","charCodeAt","push","checkScalarValue","codePoint","Error","toString","toUpperCase","createByte","shift","encodeCodePoint","symbol","codePoints","index","byteString","camelCaseToHyphen","str","undefined","replace","g","toLowerCase","hyphenToCamelCase","capitalise","substr","escape","toEscape","chr","camelCaseToHumanText","camelCase","rex","words","split","map","word","substring","join"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar reUnescapedHtml = /[&<>\"']/g;\n/**\n * HTML Escapes.\n */\nvar HTML_ESCAPES = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\n/**\n * It encodes any string in UTF-8 format\n * taken from https://github.com/mathiasbynens/utf8.js\n * @param {string} s\n * @returns {string}\n */\nexport function utf8_encode(s) {\n    var stringFromCharCode = String.fromCharCode;\n    function ucs2decode(string) {\n        var output = [];\n        var counter = 0;\n        var length = string.length;\n        var value;\n        var extra;\n        while (counter < length) {\n            value = string.charCodeAt(counter++);\n            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n                // high surrogate, and there is a next character\n                extra = string.charCodeAt(counter++);\n                if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n                }\n                else {\n                    // unmatched surrogate; only append this code unit, in case the next\n                    // code unit is the high surrogate of a surrogate pair\n                    output.push(value);\n                    counter--;\n                }\n            }\n            else {\n                output.push(value);\n            }\n        }\n        return output;\n    }\n    function checkScalarValue(codePoint) {\n        if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n            throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n                ' is not a scalar value');\n        }\n    }\n    function createByte(codePoint, shift) {\n        return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n    }\n    function encodeCodePoint(codePoint) {\n        if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n            return stringFromCharCode(codePoint);\n        }\n        var symbol = '';\n        if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n            symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n        }\n        else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n            checkScalarValue(codePoint);\n            symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n            symbol += createByte(codePoint, 6);\n        }\n        else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n            symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n            symbol += createByte(codePoint, 12);\n            symbol += createByte(codePoint, 6);\n        }\n        symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n        return symbol;\n    }\n    var codePoints = ucs2decode(s);\n    var length = codePoints.length;\n    var index = -1;\n    var codePoint;\n    var byteString = '';\n    while (++index < length) {\n        codePoint = codePoints[index];\n        byteString += encodeCodePoint(codePoint);\n    }\n    return byteString;\n}\n/**\n * Converts a camelCase string into hyphenated string\n * from https://gist.github.com/youssman/745578062609e8acac9f\n * @param {string} str\n * @return {string}\n */\nexport function camelCaseToHyphen(str) {\n    if (str === null || str === undefined) {\n        return null;\n    }\n    return str.replace(/([A-Z])/g, function (g) { return '-' + g[0].toLowerCase(); });\n}\n/**\n * Converts a hyphenated string into camelCase string\n * from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase\n * @param {string} str\n * @return {string}\n */\nexport function hyphenToCamelCase(str) {\n    if (str === null || str === undefined) {\n        return null;\n    }\n    return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });\n}\nexport function capitalise(str) {\n    return str[0].toUpperCase() + str.substr(1).toLowerCase();\n}\nexport function escape(toEscape) {\n    return toEscape == null || !toEscape.replace ? toEscape : toEscape.replace(reUnescapedHtml, function (chr) { return HTML_ESCAPES[chr]; });\n}\n/**\n * Converts a camelCase string into regular text\n * from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression\n * @param {string} camelCase\n * @return {string}\n */\nexport function camelCaseToHumanText(camelCase) {\n    if (!camelCase || camelCase == null) {\n        return null;\n    }\n    var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;\n    var words = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');\n    return words.map(function (word) { return word.substring(0, 1).toUpperCase() + ((word.length > 1) ? word.substring(1, word.length) : ''); }).join(' ');\n}\n"]},"metadata":{},"sourceType":"module"}