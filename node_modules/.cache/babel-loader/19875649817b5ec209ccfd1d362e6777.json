{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, BeanStub, ChartType, Events, PostConstruct } from \"@ag-grid-community/core\";\nimport { ChartDataModel } from \"./chartDataModel\";\nimport { palettes } from \"ag-charts-community\";\n\nvar ChartController =\n/** @class */\nfunction (_super) {\n  __extends(ChartController, _super);\n\n  function ChartController(model, paletteName) {\n    if (paletteName === void 0) {\n      paletteName = 'borneo';\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.model = model;\n    _this.chartPaletteName = paletteName;\n    return _this;\n  }\n\n  ChartController.prototype.init = function () {\n    var _this = this;\n\n    this.setChartRange();\n    this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function (event) {\n      if (event.id && event.id === _this.model.getChartId()) {\n        _this.updateForRangeChange();\n      }\n    });\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.updateForGridChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.updateForGridChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.updateForGridChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.updateForDataChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.updateForDataChange.bind(this));\n  };\n\n  ChartController.prototype.updateForGridChange = function () {\n    if (this.model.isDetached()) {\n      return;\n    }\n\n    this.model.updateCellRanges();\n    this.setChartRange();\n  };\n\n  ChartController.prototype.updateForDataChange = function () {\n    if (this.model.isDetached()) {\n      return;\n    }\n\n    this.model.updateData();\n    this.raiseChartUpdatedEvent();\n  };\n\n  ChartController.prototype.updateForRangeChange = function () {\n    this.updateForGridChange();\n    this.raiseChartRangeSelectionChangedEvent();\n  };\n\n  ChartController.prototype.updateForPanelChange = function (updatedCol) {\n    this.model.updateCellRanges(updatedCol);\n    this.setChartRange();\n    this.raiseChartRangeSelectionChangedEvent();\n  };\n\n  ChartController.prototype.getChartModel = function () {\n    var _this = this;\n\n    return {\n      chartId: this.model.getChartId(),\n      chartType: this.model.getChartType(),\n      chartPalette: this.getPaletteName(),\n      chartOptions: this.chartProxy.getChartOptions(),\n      cellRange: this.model.getCellRangeParams(),\n      getChartImageDataURL: function getChartImageDataURL(params) {\n        return _this.chartProxy.getChartImageDataURL(params.type);\n      }\n    };\n  };\n\n  ChartController.prototype.getChartType = function () {\n    return this.model.getChartType();\n  };\n\n  ChartController.prototype.isPivotChart = function () {\n    return this.model.isPivotChart();\n  };\n\n  ChartController.prototype.isGrouping = function () {\n    return this.model.isGrouping();\n  };\n\n  ChartController.prototype.getPaletteName = function () {\n    return this.chartPaletteName;\n  };\n\n  ChartController.prototype.getPalettes = function () {\n    var customPalette = this.chartProxy.getCustomPalette();\n\n    if (customPalette) {\n      var map = new Map();\n      map.set(undefined, customPalette);\n      return map;\n    }\n\n    return palettes;\n  };\n\n  ChartController.prototype.setChartType = function (chartType) {\n    this.model.setChartType(chartType);\n    this.raiseChartUpdatedEvent();\n    this.raiseChartOptionsChangedEvent();\n  };\n\n  ChartController.prototype.setChartPaletteName = function (palette) {\n    this.chartPaletteName = palette;\n    this.raiseChartUpdatedEvent();\n    this.raiseChartOptionsChangedEvent();\n  };\n\n  ChartController.prototype.getColStateForMenu = function () {\n    return {\n      dimensionCols: this.model.getDimensionColState(),\n      valueCols: this.model.getValueColState()\n    };\n  };\n\n  ChartController.prototype.isDefaultCategorySelected = function () {\n    return this.model.getSelectedDimension().colId === ChartDataModel.DEFAULT_CATEGORY;\n  };\n\n  ChartController.prototype.setChartRange = function (silent) {\n    if (silent === void 0) {\n      silent = false;\n    }\n\n    if (this.rangeController && !this.model.isSuppressChartRanges() && !this.model.isDetached()) {\n      this.rangeController.setCellRanges(this.model.getCellRanges());\n    }\n\n    if (!silent) {\n      this.raiseChartUpdatedEvent();\n    }\n  };\n\n  ChartController.prototype.detachChartRange = function () {\n    // when chart is detached it won't listen to changes from the grid\n    this.model.toggleDetached();\n\n    if (this.model.isDetached()) {\n      // remove range from grid\n      if (this.rangeController) {\n        this.rangeController.setCellRanges([]);\n      }\n    } else {\n      // update chart data may have changed\n      this.updateForGridChange();\n    }\n  };\n\n  ChartController.prototype.setChartProxy = function (chartProxy) {\n    this.chartProxy = chartProxy;\n  };\n\n  ChartController.prototype.getChartProxy = function () {\n    return this.chartProxy;\n  };\n\n  ChartController.prototype.isActiveXYChart = function () {\n    return _.includes([ChartType.Scatter, ChartType.Bubble], this.getChartType());\n  };\n\n  ChartController.prototype.raiseChartUpdatedEvent = function () {\n    var event = Object.freeze({\n      type: ChartController.EVENT_CHART_UPDATED\n    });\n    this.dispatchEvent(event);\n  };\n\n  ChartController.prototype.raiseChartOptionsChangedEvent = function () {\n    this.chartProxy.raiseChartOptionsChangedEvent();\n  };\n\n  ChartController.prototype.raiseChartRangeSelectionChangedEvent = function () {\n    var event = Object.freeze({\n      type: Events.EVENT_CHART_RANGE_SELECTION_CHANGED,\n      id: this.model.getChartId(),\n      chartId: this.model.getChartId(),\n      cellRange: this.model.getCellRangeParams(),\n      api: this.gridApi,\n      columnApi: this.columnApi\n    });\n    this.eventService.dispatchEvent(event);\n  };\n\n  ChartController.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.rangeController) {\n      this.rangeController.setCellRanges([]);\n    }\n  };\n\n  ChartController.EVENT_CHART_UPDATED = 'chartUpdated';\n\n  __decorate([Autowired('rangeController')], ChartController.prototype, \"rangeController\", void 0);\n\n  __decorate([Autowired('gridApi')], ChartController.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], ChartController.prototype, \"columnApi\", void 0);\n\n  __decorate([PostConstruct], ChartController.prototype, \"init\", null);\n\n  return ChartController;\n}(BeanStub);\n\nexport { ChartController };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/charts/dist/es6/chartAdaptor/chartComp/chartController.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","BeanStub","ChartType","Events","PostConstruct","ChartDataModel","palettes","ChartController","_super","model","paletteName","_this","call","chartPaletteName","init","setChartRange","addManagedListener","eventService","EVENT_RANGE_SELECTION_CHANGED","event","id","getChartId","updateForRangeChange","EVENT_COLUMN_MOVED","updateForGridChange","bind","EVENT_COLUMN_PINNED","EVENT_COLUMN_VISIBLE","EVENT_MODEL_UPDATED","updateForDataChange","EVENT_CELL_VALUE_CHANGED","isDetached","updateCellRanges","updateData","raiseChartUpdatedEvent","raiseChartRangeSelectionChangedEvent","updateForPanelChange","updatedCol","getChartModel","chartId","chartType","getChartType","chartPalette","getPaletteName","chartOptions","chartProxy","getChartOptions","cellRange","getCellRangeParams","getChartImageDataURL","params","type","isPivotChart","isGrouping","getPalettes","customPalette","getCustomPalette","map","Map","set","undefined","setChartType","raiseChartOptionsChangedEvent","setChartPaletteName","palette","getColStateForMenu","dimensionCols","getDimensionColState","valueCols","getValueColState","isDefaultCategorySelected","getSelectedDimension","colId","DEFAULT_CATEGORY","silent","rangeController","isSuppressChartRanges","setCellRanges","getCellRanges","detachChartRange","toggleDetached","setChartProxy","getChartProxy","isActiveXYChart","includes","Scatter","Bubble","freeze","EVENT_CHART_UPDATED","dispatchEvent","EVENT_CHART_RANGE_SELECTION_CHANGED","api","gridApi","columnApi","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, BeanStub, ChartType, Events, PostConstruct, } from \"@ag-grid-community/core\";\nimport { ChartDataModel } from \"./chartDataModel\";\nimport { palettes } from \"ag-charts-community\";\nvar ChartController = /** @class */ (function (_super) {\n    __extends(ChartController, _super);\n    function ChartController(model, paletteName) {\n        if (paletteName === void 0) { paletteName = 'borneo'; }\n        var _this = _super.call(this) || this;\n        _this.model = model;\n        _this.chartPaletteName = paletteName;\n        return _this;\n    }\n    ChartController.prototype.init = function () {\n        var _this = this;\n        this.setChartRange();\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function (event) {\n            if (event.id && event.id === _this.model.getChartId()) {\n                _this.updateForRangeChange();\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.updateForDataChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.updateForDataChange.bind(this));\n    };\n    ChartController.prototype.updateForGridChange = function () {\n        if (this.model.isDetached()) {\n            return;\n        }\n        this.model.updateCellRanges();\n        this.setChartRange();\n    };\n    ChartController.prototype.updateForDataChange = function () {\n        if (this.model.isDetached()) {\n            return;\n        }\n        this.model.updateData();\n        this.raiseChartUpdatedEvent();\n    };\n    ChartController.prototype.updateForRangeChange = function () {\n        this.updateForGridChange();\n        this.raiseChartRangeSelectionChangedEvent();\n    };\n    ChartController.prototype.updateForPanelChange = function (updatedCol) {\n        this.model.updateCellRanges(updatedCol);\n        this.setChartRange();\n        this.raiseChartRangeSelectionChangedEvent();\n    };\n    ChartController.prototype.getChartModel = function () {\n        var _this = this;\n        return {\n            chartId: this.model.getChartId(),\n            chartType: this.model.getChartType(),\n            chartPalette: this.getPaletteName(),\n            chartOptions: this.chartProxy.getChartOptions(),\n            cellRange: this.model.getCellRangeParams(),\n            getChartImageDataURL: function (params) {\n                return _this.chartProxy.getChartImageDataURL(params.type);\n            }\n        };\n    };\n    ChartController.prototype.getChartType = function () {\n        return this.model.getChartType();\n    };\n    ChartController.prototype.isPivotChart = function () {\n        return this.model.isPivotChart();\n    };\n    ChartController.prototype.isGrouping = function () {\n        return this.model.isGrouping();\n    };\n    ChartController.prototype.getPaletteName = function () {\n        return this.chartPaletteName;\n    };\n    ChartController.prototype.getPalettes = function () {\n        var customPalette = this.chartProxy.getCustomPalette();\n        if (customPalette) {\n            var map = new Map();\n            map.set(undefined, customPalette);\n            return map;\n        }\n        return palettes;\n    };\n    ChartController.prototype.setChartType = function (chartType) {\n        this.model.setChartType(chartType);\n        this.raiseChartUpdatedEvent();\n        this.raiseChartOptionsChangedEvent();\n    };\n    ChartController.prototype.setChartPaletteName = function (palette) {\n        this.chartPaletteName = palette;\n        this.raiseChartUpdatedEvent();\n        this.raiseChartOptionsChangedEvent();\n    };\n    ChartController.prototype.getColStateForMenu = function () {\n        return { dimensionCols: this.model.getDimensionColState(), valueCols: this.model.getValueColState() };\n    };\n    ChartController.prototype.isDefaultCategorySelected = function () {\n        return this.model.getSelectedDimension().colId === ChartDataModel.DEFAULT_CATEGORY;\n    };\n    ChartController.prototype.setChartRange = function (silent) {\n        if (silent === void 0) { silent = false; }\n        if (this.rangeController && !this.model.isSuppressChartRanges() && !this.model.isDetached()) {\n            this.rangeController.setCellRanges(this.model.getCellRanges());\n        }\n        if (!silent) {\n            this.raiseChartUpdatedEvent();\n        }\n    };\n    ChartController.prototype.detachChartRange = function () {\n        // when chart is detached it won't listen to changes from the grid\n        this.model.toggleDetached();\n        if (this.model.isDetached()) {\n            // remove range from grid\n            if (this.rangeController) {\n                this.rangeController.setCellRanges([]);\n            }\n        }\n        else {\n            // update chart data may have changed\n            this.updateForGridChange();\n        }\n    };\n    ChartController.prototype.setChartProxy = function (chartProxy) {\n        this.chartProxy = chartProxy;\n    };\n    ChartController.prototype.getChartProxy = function () {\n        return this.chartProxy;\n    };\n    ChartController.prototype.isActiveXYChart = function () {\n        return _.includes([ChartType.Scatter, ChartType.Bubble], this.getChartType());\n    };\n    ChartController.prototype.raiseChartUpdatedEvent = function () {\n        var event = Object.freeze({\n            type: ChartController.EVENT_CHART_UPDATED\n        });\n        this.dispatchEvent(event);\n    };\n    ChartController.prototype.raiseChartOptionsChangedEvent = function () {\n        this.chartProxy.raiseChartOptionsChangedEvent();\n    };\n    ChartController.prototype.raiseChartRangeSelectionChangedEvent = function () {\n        var event = Object.freeze({\n            type: Events.EVENT_CHART_RANGE_SELECTION_CHANGED,\n            id: this.model.getChartId(),\n            chartId: this.model.getChartId(),\n            cellRange: this.model.getCellRangeParams(),\n            api: this.gridApi,\n            columnApi: this.columnApi,\n        });\n        this.eventService.dispatchEvent(event);\n    };\n    ChartController.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        if (this.rangeController) {\n            this.rangeController.setCellRanges([]);\n        }\n    };\n    ChartController.EVENT_CHART_UPDATED = 'chartUpdated';\n    __decorate([\n        Autowired('rangeController')\n    ], ChartController.prototype, \"rangeController\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ChartController.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ChartController.prototype, \"columnApi\", void 0);\n    __decorate([\n        PostConstruct\n    ], ChartController.prototype, \"init\", null);\n    return ChartController;\n}(BeanStub));\nexport { ChartController };\n"]},"metadata":{},"sourceType":"module"}