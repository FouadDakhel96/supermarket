{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Bean, ColumnGroup, Constants, GroupInstanceIdCreator, BeanStub } from \"@ag-grid-community/core\";\n\nvar BaseGridSerializingSession =\n/** @class */\nfunction () {\n  function BaseGridSerializingSession(config) {\n    var columnController = config.columnController,\n        valueService = config.valueService,\n        gridOptionsWrapper = config.gridOptionsWrapper,\n        processCellCallback = config.processCellCallback,\n        processHeaderCallback = config.processHeaderCallback,\n        processGroupHeaderCallback = config.processGroupHeaderCallback,\n        processRowGroupCallback = config.processRowGroupCallback;\n    this.columnController = columnController;\n    this.valueService = valueService;\n    this.gridOptionsWrapper = gridOptionsWrapper;\n    this.processCellCallback = processCellCallback;\n    this.processHeaderCallback = processHeaderCallback;\n    this.processGroupHeaderCallback = processGroupHeaderCallback;\n    this.processRowGroupCallback = processRowGroupCallback;\n  }\n\n  BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {\n    this.firstGroupColumn = _.find(columnsToExport, function (col) {\n      return !!col.getColDef().showRowGroup;\n    });\n  };\n\n  BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n    var value = this.getHeaderName(this.processHeaderCallback, column);\n    return value != null ? value : '';\n  };\n\n  BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {\n    // we render the group summary text e.g. \"-> Parent -> Child\"...\n    var renderGroupSummaryCell = // on group rows\n    node && node.group && ( // in the first group column if groups appear in regular grid cells\n    column === this.firstGroupColumn // or the first cell in the row, if we're doing full width rows\n    || index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode()));\n    var valueForCell;\n\n    if (renderGroupSummaryCell) {\n      valueForCell = this.createValueForGroupNode(node);\n    } else {\n      valueForCell = this.valueService.getValue(column, node);\n    }\n\n    var value = this.processCell(node, column, valueForCell, this.processCellCallback, type);\n    return value != null ? value : '';\n  };\n\n  BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n    if (callback) {\n      return callback({\n        column: column,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      });\n    } else {\n      return this.columnController.getDisplayNameForColumn(column, 'csv', true);\n    }\n  };\n\n  BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n    if (this.processRowGroupCallback) {\n      return this.processRowGroupCallback({\n        node: node,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      });\n    }\n\n    var keys = [node.key];\n\n    while (node.parent) {\n      node = node.parent;\n      keys.push(node.key);\n    }\n\n    return keys.reverse().join(' -> ');\n  };\n\n  BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {\n    if (processCellCallback) {\n      return processCellCallback({\n        column: column,\n        node: rowNode,\n        value: value,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext(),\n        type: type\n      });\n    } else {\n      return value;\n    }\n  };\n\n  return BaseGridSerializingSession;\n}();\n\nexport { BaseGridSerializingSession };\n\nvar GridSerializer =\n/** @class */\nfunction (_super) {\n  __extends(GridSerializer, _super);\n\n  function GridSerializer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    var rowSkipper = params.shouldRowBeSkipped || function () {\n      return false;\n    };\n\n    var api = this.gridOptionsWrapper.getApi();\n    var columnApi = this.gridOptionsWrapper.getColumnApi();\n    var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n    var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n    var context = this.gridOptionsWrapper.getContext(); // when in pivot mode, we always render cols on screen, never 'all columns'\n\n    var isPivotMode = this.columnController.isPivotMode();\n    var rowModelNormal = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    var onlySelectedNonStandardModel = !rowModelNormal && params.onlySelected;\n    var columnsToExport = [];\n\n    if (_.existsAndNotEmpty(params.columnKeys)) {\n      columnsToExport = this.columnController.getGridColumns(params.columnKeys);\n    } else if (params.allColumns && !isPivotMode) {\n      // add auto group column for tree data\n      columnsToExport = this.gridOptionsWrapper.isTreeData() ? this.columnController.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];\n      columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);\n    } else {\n      columnsToExport = this.columnController.getAllDisplayedColumns();\n    }\n\n    if (params.customHeader) {\n      gridSerializingSession.addCustomContent(params.customHeader);\n    }\n\n    gridSerializingSession.prepare(columnsToExport); // first pass, put in the header names of the cols\n\n    if (params.columnGroups) {\n      var groupInstanceIdCreator = new GroupInstanceIdCreator();\n      var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);\n      this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);\n    }\n\n    if (!params.skipHeader) {\n      var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n      columnsToExport.forEach(function (column, index) {\n        gridRowIterator_1.onColumn(column, index, undefined);\n      });\n    }\n\n    this.pinnedRowModel.forEachPinnedTopRow(processRow);\n\n    if (isPivotMode) {\n      if (this.rowModel.forEachPivotNode) {\n        this.rowModel.forEachPivotNode(processRow);\n      } else {\n        //Must be enterprise, so we can just loop through all the nodes\n        this.rowModel.forEachNode(processRow);\n      }\n    } else {\n      // onlySelectedAllPages: user doing pagination and wants selected items from\n      // other pages, so cannot use the standard row model as it won't have rows from\n      // other pages.\n      // onlySelectedNonStandardModel: if user wants selected in non standard row model\n      // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.\n      if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n        var selectedNodes = this.selectionController.getSelectedNodes();\n        selectedNodes.forEach(function (node) {\n          processRow(node);\n        });\n      } else {\n        // here is everything else - including standard row model and selected. we don't use\n        // the selection model even when just using selected, so that the result is the order\n        // of the rows appearing on the screen.\n        if (rowModelNormal) {\n          this.rowModel.forEachNodeAfterFilterAndSort(processRow);\n        } else {\n          this.rowModel.forEachNode(processRow);\n        }\n      }\n    }\n\n    this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n\n    if (params.customFooter) {\n      gridSerializingSession.addCustomContent(params.customFooter);\n    }\n\n    function processRow(node) {\n      var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n      var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n\n      if (node.group && (params.skipGroups || shouldSkipCurrentGroup)) {\n        return;\n      }\n\n      if (params.skipFooters && node.footer) {\n        return;\n      }\n\n      if (params.onlySelected && !node.isSelected()) {\n        return;\n      }\n\n      if (params.skipPinnedTop && node.rowPinned === 'top') {\n        return;\n      }\n\n      if (params.skipPinnedBottom && node.rowPinned === 'bottom') {\n        return;\n      } // if we are in pivotMode, then the grid will show the root node only\n      // if it's not a leaf group\n\n\n      var nodeIsRootNode = node.level === -1;\n\n      if (nodeIsRootNode && !node.leafGroup) {\n        return;\n      }\n\n      var shouldRowBeSkipped = rowSkipper({\n        node: node,\n        api: api,\n        context: context\n      });\n\n      if (shouldRowBeSkipped) {\n        return;\n      }\n\n      var rowAccumulator = gridSerializingSession.onNewBodyRow();\n      columnsToExport.forEach(function (column, index) {\n        rowAccumulator.onColumn(column, index, node);\n      });\n\n      if (params.getCustomContentBelowRow) {\n        var content = params.getCustomContentBelowRow({\n          node: node,\n          api: api,\n          columnApi: columnApi,\n          context: context\n        });\n\n        if (content) {\n          gridSerializingSession.addCustomContent(content);\n        }\n      }\n    }\n\n    return gridSerializingSession.parse();\n  };\n\n  GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {\n    var directChildrenHeaderGroups = [];\n    displayedGroups.forEach(function (columnGroupChild) {\n      var columnGroup = columnGroupChild;\n\n      if (!columnGroup.getChildren) {\n        return;\n      }\n\n      columnGroup.getChildren().forEach(function (it) {\n        return directChildrenHeaderGroups.push(it);\n      });\n    });\n\n    if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {\n      this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n    }\n\n    if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n      this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);\n    }\n  };\n\n  GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {\n    var _this = this;\n\n    var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n    var columnIndex = 0;\n    displayedGroups.forEach(function (columnGroupChild) {\n      var columnGroup = columnGroupChild;\n      var name;\n\n      if (processGroupHeaderCallback) {\n        name = processGroupHeaderCallback({\n          columnGroup: columnGroup,\n          api: _this.gridOptionsWrapper.getApi(),\n          columnApi: _this.gridOptionsWrapper.getColumnApi(),\n          context: _this.gridOptionsWrapper.getContext()\n        });\n      } else {\n        name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');\n      }\n\n      gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n    });\n  };\n\n  __decorate([Autowired('displayedGroupCreator')], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n\n  __decorate([Autowired('columnController')], GridSerializer.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('rowModel')], GridSerializer.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('pinnedRowModel')], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([Autowired('selectionController')], GridSerializer.prototype, \"selectionController\", void 0);\n\n  __decorate([Autowired('columnFactory')], GridSerializer.prototype, \"columnFactory\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], GridSerializer.prototype, \"gridOptionsWrapper\", void 0);\n\n  GridSerializer = __decorate([Bean(\"gridSerializer\")], GridSerializer);\n  return GridSerializer;\n}(BeanStub);\n\nexport { GridSerializer };\nexport var RowType;\n\n(function (RowType) {\n  RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n  RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n  RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType || (RowType = {}));","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/gridSerializer.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","Bean","ColumnGroup","Constants","GroupInstanceIdCreator","BeanStub","BaseGridSerializingSession","config","columnController","valueService","gridOptionsWrapper","processCellCallback","processHeaderCallback","processGroupHeaderCallback","processRowGroupCallback","prepare","columnsToExport","firstGroupColumn","find","col","getColDef","showRowGroup","extractHeaderValue","column","value","getHeaderName","extractRowCellValue","index","type","node","renderGroupSummaryCell","group","isGroupUseEntireRow","isPivotMode","valueForCell","createValueForGroupNode","getValue","processCell","callback","api","getApi","columnApi","getColumnApi","context","getContext","getDisplayNameForColumn","keys","parent","push","reverse","join","rowNode","GridSerializer","_super","apply","serialize","gridSerializingSession","params","rowSkipper","shouldRowBeSkipped","skipSingleChildrenGroup","isGroupRemoveSingleChildren","skipLowestSingleChildrenGroup","isGroupRemoveLowestSingleChildren","rowModelNormal","rowModel","getType","ROW_MODEL_TYPE_CLIENT_SIDE","onlySelectedNonStandardModel","onlySelected","existsAndNotEmpty","columnKeys","getGridColumns","allColumns","isTreeData","GROUP_AUTO_COLUMN_ID","concat","getAllPrimaryColumns","getAllDisplayedColumns","customHeader","addCustomContent","columnGroups","groupInstanceIdCreator","displayedGroups","displayedGroupCreator","createDisplayedGroups","getGridBalancedTree","recursivelyAddHeaderGroups","skipHeader","gridRowIterator_1","onNewHeaderRow","forEach","onColumn","undefined","pinnedRowModel","forEachPinnedTopRow","processRow","forEachPivotNode","forEachNode","onlySelectedAllPages","selectedNodes","selectionController","getSelectedNodes","forEachNodeAfterFilterAndSort","forEachPinnedBottomRow","customFooter","shouldSkipLowestGroup","leafGroup","shouldSkipCurrentGroup","allChildrenCount","skipGroups","skipFooters","footer","isSelected","skipPinnedTop","rowPinned","skipPinnedBottom","nodeIsRootNode","level","rowAccumulator","onNewBodyRow","getCustomContentBelowRow","content","parse","directChildrenHeaderGroups","columnGroupChild","columnGroup","getChildren","it","doAddHeaderHeader","_this","gridRowIterator","onNewHeaderGroupingRow","columnIndex","name","getDisplayNameForColumnGroup","getLeafColumns","RowType"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, ColumnGroup, Constants, GroupInstanceIdCreator, BeanStub } from \"@ag-grid-community/core\";\nvar BaseGridSerializingSession = /** @class */ (function () {\n    function BaseGridSerializingSession(config) {\n        var columnController = config.columnController, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;\n        this.columnController = columnController;\n        this.valueService = valueService;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\n        this.processRowGroupCallback = processRowGroupCallback;\n    }\n    BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {\n        this.firstGroupColumn = _.find(columnsToExport, function (col) { return !!col.getColDef().showRowGroup; });\n    };\n    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n        var value = this.getHeaderName(this.processHeaderCallback, column);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\n        var renderGroupSummaryCell = \n        // on group rows\n        node && node.group\n            && (\n            // in the first group column if groups appear in regular grid cells\n            column === this.firstGroupColumn\n                // or the first cell in the row, if we're doing full width rows\n                || (index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode())));\n        var valueForCell;\n        if (renderGroupSummaryCell) {\n            valueForCell = this.createValueForGroupNode(node);\n        }\n        else {\n            valueForCell = this.valueService.getValue(column, node);\n        }\n        var value = this.processCell(node, column, valueForCell, this.processCellCallback, type);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n        if (callback) {\n            return callback({\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            });\n        }\n        else {\n            return this.columnController.getDisplayNameForColumn(column, 'csv', true);\n        }\n    };\n    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n        if (this.processRowGroupCallback) {\n            return this.processRowGroupCallback({\n                node: node,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n            });\n        }\n        var keys = [node.key];\n        while (node.parent) {\n            node = node.parent;\n            keys.push(node.key);\n        }\n        return keys.reverse().join(' -> ');\n    };\n    BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {\n        if (processCellCallback) {\n            return processCellCallback({\n                column: column,\n                node: rowNode,\n                value: value,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                type: type\n            });\n        }\n        else {\n            return value;\n        }\n    };\n    return BaseGridSerializingSession;\n}());\nexport { BaseGridSerializingSession };\nvar GridSerializer = /** @class */ (function (_super) {\n    __extends(GridSerializer, _super);\n    function GridSerializer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n        if (params === void 0) { params = {}; }\n        var rowSkipper = params.shouldRowBeSkipped || (function () { return false; });\n        var api = this.gridOptionsWrapper.getApi();\n        var columnApi = this.gridOptionsWrapper.getColumnApi();\n        var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        var context = this.gridOptionsWrapper.getContext();\n        // when in pivot mode, we always render cols on screen, never 'all columns'\n        var isPivotMode = this.columnController.isPivotMode();\n        var rowModelNormal = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        var onlySelectedNonStandardModel = !rowModelNormal && params.onlySelected;\n        var columnsToExport = [];\n        if (_.existsAndNotEmpty(params.columnKeys)) {\n            columnsToExport = this.columnController.getGridColumns(params.columnKeys);\n        }\n        else if (params.allColumns && !isPivotMode) {\n            // add auto group column for tree data\n            columnsToExport = this.gridOptionsWrapper.isTreeData() ?\n                this.columnController.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];\n            columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);\n        }\n        else {\n            columnsToExport = this.columnController.getAllDisplayedColumns();\n        }\n        if (params.customHeader) {\n            gridSerializingSession.addCustomContent(params.customHeader);\n        }\n        gridSerializingSession.prepare(columnsToExport);\n        // first pass, put in the header names of the cols\n        if (params.columnGroups) {\n            var groupInstanceIdCreator = new GroupInstanceIdCreator();\n            var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);\n            this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);\n        }\n        if (!params.skipHeader) {\n            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n            columnsToExport.forEach(function (column, index) {\n                gridRowIterator_1.onColumn(column, index, undefined);\n            });\n        }\n        this.pinnedRowModel.forEachPinnedTopRow(processRow);\n        if (isPivotMode) {\n            if (this.rowModel.forEachPivotNode) {\n                this.rowModel.forEachPivotNode(processRow);\n            }\n            else {\n                //Must be enterprise, so we can just loop through all the nodes\n                this.rowModel.forEachNode(processRow);\n            }\n        }\n        else {\n            // onlySelectedAllPages: user doing pagination and wants selected items from\n            // other pages, so cannot use the standard row model as it won't have rows from\n            // other pages.\n            // onlySelectedNonStandardModel: if user wants selected in non standard row model\n            // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.\n            if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n                var selectedNodes = this.selectionController.getSelectedNodes();\n                selectedNodes.forEach(function (node) {\n                    processRow(node);\n                });\n            }\n            else {\n                // here is everything else - including standard row model and selected. we don't use\n                // the selection model even when just using selected, so that the result is the order\n                // of the rows appearing on the screen.\n                if (rowModelNormal) {\n                    this.rowModel.forEachNodeAfterFilterAndSort(processRow);\n                }\n                else {\n                    this.rowModel.forEachNode(processRow);\n                }\n            }\n        }\n        this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n        if (params.customFooter) {\n            gridSerializingSession.addCustomContent(params.customFooter);\n        }\n        function processRow(node) {\n            var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n            var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n            if (node.group && (params.skipGroups || shouldSkipCurrentGroup)) {\n                return;\n            }\n            if (params.skipFooters && node.footer) {\n                return;\n            }\n            if (params.onlySelected && !node.isSelected()) {\n                return;\n            }\n            if (params.skipPinnedTop && node.rowPinned === 'top') {\n                return;\n            }\n            if (params.skipPinnedBottom && node.rowPinned === 'bottom') {\n                return;\n            }\n            // if we are in pivotMode, then the grid will show the root node only\n            // if it's not a leaf group\n            var nodeIsRootNode = node.level === -1;\n            if (nodeIsRootNode && !node.leafGroup) {\n                return;\n            }\n            var shouldRowBeSkipped = rowSkipper({ node: node, api: api, context: context });\n            if (shouldRowBeSkipped) {\n                return;\n            }\n            var rowAccumulator = gridSerializingSession.onNewBodyRow();\n            columnsToExport.forEach(function (column, index) {\n                rowAccumulator.onColumn(column, index, node);\n            });\n            if (params.getCustomContentBelowRow) {\n                var content = params.getCustomContentBelowRow({ node: node, api: api, columnApi: columnApi, context: context });\n                if (content) {\n                    gridSerializingSession.addCustomContent(content);\n                }\n            }\n        }\n        return gridSerializingSession.parse();\n    };\n    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {\n        var directChildrenHeaderGroups = [];\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });\n        });\n        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n        }\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);\n        }\n    };\n    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {\n        var _this = this;\n        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n        var columnIndex = 0;\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            var name;\n            if (processGroupHeaderCallback) {\n                name = processGroupHeaderCallback({\n                    columnGroup: columnGroup,\n                    api: _this.gridOptionsWrapper.getApi(),\n                    columnApi: _this.gridOptionsWrapper.getColumnApi(),\n                    context: _this.gridOptionsWrapper.getContext()\n                });\n            }\n            else {\n                name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');\n            }\n            gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n        });\n    };\n    __decorate([\n        Autowired('displayedGroupCreator')\n    ], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], GridSerializer.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], GridSerializer.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], GridSerializer.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('columnFactory')\n    ], GridSerializer.prototype, \"columnFactory\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], GridSerializer.prototype, \"gridOptionsWrapper\", void 0);\n    GridSerializer = __decorate([\n        Bean(\"gridSerializer\")\n    ], GridSerializer);\n    return GridSerializer;\n}(BeanStub));\nexport { GridSerializer };\nexport var RowType;\n(function (RowType) {\n    RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n    RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n    RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType || (RowType = {}));\n"]},"metadata":{},"sourceType":"module"}