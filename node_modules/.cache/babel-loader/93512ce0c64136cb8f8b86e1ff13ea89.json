{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { _, Autowired, BeanStub, CellRangeType, PostConstruct } from \"@ag-grid-community/core\";\nimport { ChartDatasource } from \"./chartDatasource\";\n\nvar ChartDataModel =\n/** @class */\nfunction (_super) {\n  __extends(ChartDataModel, _super);\n\n  function ChartDataModel(params) {\n    var _this = _super.call(this) || this;\n\n    _this.dimensionColState = [];\n    _this.valueColState = [];\n    _this.detached = false;\n    _this.columnNames = {};\n    _this.pivotChart = params.pivotChart;\n    _this.chartType = params.chartType;\n    _this.aggFunc = params.aggFunc;\n    _this.referenceCellRange = params.cellRange;\n    _this.suppressChartRanges = params.suppressChartRanges; // this is used to associate chart ranges with charts\n\n    _this.chartId = _this.generateId();\n    return _this;\n  }\n\n  ChartDataModel.prototype.init = function () {\n    this.datasource = this.createManagedBean(new ChartDatasource());\n    this.updateCellRanges();\n  };\n\n  ChartDataModel.prototype.updateCellRanges = function (updatedColState) {\n    if (this.valueCellRange) {\n      this.referenceCellRange = this.valueCellRange;\n    }\n\n    var _a = this.getAllChartColumns(),\n        dimensionCols = _a.dimensionCols,\n        valueCols = _a.valueCols;\n\n    var allColsFromRanges = this.getAllColumnsFromRanges();\n\n    if (updatedColState) {\n      this.updateColumnState(updatedColState);\n    }\n\n    this.setDimensionCellRange(dimensionCols, allColsFromRanges, updatedColState);\n    this.setValueCellRange(valueCols, allColsFromRanges, updatedColState);\n\n    if (!updatedColState) {\n      this.resetColumnState();\n    }\n\n    this.updateData();\n  };\n\n  ChartDataModel.prototype.getData = function () {\n    return this.chartData;\n  };\n\n  ChartDataModel.prototype.setChartType = function (chartType) {\n    this.chartType = chartType;\n  };\n\n  ChartDataModel.prototype.isGrouping = function () {\n    var usingTreeData = this.gridOptionsWrapper.isTreeData();\n    var groupedCols = usingTreeData ? null : this.columnController.getRowGroupColumns();\n    var groupActive = usingTreeData || groupedCols && groupedCols.length > 0; // charts only group when the selected category is a group column\n\n    var groupCols = this.columnController.getGroupDisplayColumns();\n    var colId = this.getSelectedDimension().colId;\n    var groupDimensionSelected = groupCols.map(function (col) {\n      return col.getColId();\n    }).some(function (id) {\n      return id === colId;\n    });\n    return groupActive && groupDimensionSelected;\n  };\n\n  ChartDataModel.prototype.isPivotActive = function () {\n    return this.columnController.isPivotActive();\n  };\n\n  ChartDataModel.prototype.isPivotMode = function () {\n    return this.columnController.isPivotMode();\n  };\n\n  ChartDataModel.prototype.isPivotChart = function () {\n    return this.pivotChart;\n  };\n\n  ;\n\n  ChartDataModel.prototype.getChartId = function () {\n    return this.chartId;\n  };\n\n  ;\n\n  ChartDataModel.prototype.getValueColState = function () {\n    return this.valueColState.map(this.displayNameMapper.bind(this));\n  };\n\n  ;\n\n  ChartDataModel.prototype.getDimensionColState = function () {\n    return this.dimensionColState;\n  };\n\n  ;\n\n  ChartDataModel.prototype.getCellRanges = function () {\n    return [this.dimensionCellRange, this.valueCellRange].filter(function (r) {\n      return r;\n    });\n  };\n\n  ;\n\n  ChartDataModel.prototype.getCellRangeParams = function () {\n    var cellRanges = this.getCellRanges();\n    var firstCellRange = cellRanges[0];\n    var startRow = firstCellRange && firstCellRange.startRow;\n    var endRow = firstCellRange && firstCellRange.endRow;\n    return {\n      rowStartIndex: startRow && startRow.rowIndex,\n      rowStartPinned: startRow && startRow.rowPinned,\n      rowEndIndex: endRow && endRow.rowIndex,\n      rowEndPinned: endRow && endRow.rowPinned,\n      columns: cellRanges.reduce(function (columns, value) {\n        return columns.concat(value.columns.map(function (c) {\n          return c.getId();\n        }));\n      }, [])\n    };\n  };\n\n  ChartDataModel.prototype.getChartType = function () {\n    return this.chartType;\n  };\n\n  ;\n\n  ChartDataModel.prototype.isSuppressChartRanges = function () {\n    return this.suppressChartRanges;\n  };\n\n  ;\n\n  ChartDataModel.prototype.isDetached = function () {\n    return this.detached;\n  };\n\n  ;\n\n  ChartDataModel.prototype.toggleDetached = function () {\n    this.detached = !this.detached;\n  };\n\n  ChartDataModel.prototype.getSelectedValueColState = function () {\n    return this.getValueColState().filter(function (cs) {\n      return cs.selected;\n    });\n  };\n\n  ;\n\n  ChartDataModel.prototype.getSelectedValueCols = function () {\n    return this.valueColState.filter(function (cs) {\n      return cs.selected;\n    }).map(function (cs) {\n      return cs.column;\n    });\n  };\n\n  ;\n\n  ChartDataModel.prototype.getSelectedDimension = function () {\n    return this.dimensionColState.filter(function (cs) {\n      return cs.selected;\n    })[0];\n  };\n\n  ;\n\n  ChartDataModel.prototype.createCellRange = function (type) {\n    var columns = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      columns[_i - 1] = arguments[_i];\n    }\n\n    return {\n      id: this.chartId,\n      startRow: this.referenceCellRange.startRow,\n      endRow: this.referenceCellRange.endRow,\n      columns: columns,\n      startColumn: type === CellRangeType.DIMENSION ? columns[0] : this.referenceCellRange.startColumn,\n      type: type\n    };\n  };\n\n  ChartDataModel.prototype.getAllColumnsFromRanges = function () {\n    if (this.pivotChart) {\n      return _.convertToSet(this.columnController.getAllDisplayedColumns());\n    }\n\n    ;\n    var columns = this.dimensionCellRange || this.valueCellRange ? [] : this.referenceCellRange.columns;\n\n    if (this.dimensionCellRange) {\n      columns.push.apply(columns, this.dimensionCellRange.columns);\n    }\n\n    if (this.valueCellRange) {\n      columns.push.apply(columns, this.valueCellRange.columns);\n    }\n\n    return _.convertToSet(columns);\n  };\n\n  ChartDataModel.prototype.getColDisplayName = function (col) {\n    return this.columnController.getDisplayNameForColumn(col, 'chart');\n  };\n\n  ChartDataModel.prototype.getRowIndexes = function () {\n    var startRow = 0,\n        endRow = 0;\n    var rangeController = this.rangeController;\n    var range = this.valueCellRange;\n\n    if (rangeController && range) {\n      startRow = rangeController.getRangeStartRow(range).rowIndex;\n      endRow = rangeController.getRangeEndRow(range).rowIndex;\n    }\n\n    return {\n      startRow: startRow,\n      endRow: endRow\n    };\n  };\n\n  ChartDataModel.prototype.getAllChartColumns = function () {\n    var _this = this;\n\n    var displayedCols = this.columnController.getAllDisplayedColumns();\n    var dimensionCols = new Set();\n    var valueCols = new Set();\n    displayedCols.forEach(function (col) {\n      var colDef = col.getColDef();\n      var chartDataType = colDef.chartDataType;\n\n      if (chartDataType) {\n        // chart data type was specified explicitly\n        switch (chartDataType) {\n          case 'category':\n            dimensionCols.add(col);\n            return;\n\n          case 'series':\n            valueCols.add(col);\n            return;\n\n          case 'excluded':\n            return;\n\n          default:\n            console.warn(\"ag-Grid: unexpected chartDataType value '\" + chartDataType + \"' supplied, instead use 'category', 'series' or 'excluded'\");\n            break;\n        }\n      }\n\n      if (colDef.colId === 'ag-Grid-AutoColumn') {\n        dimensionCols.add(col);\n        return;\n      }\n\n      if (!col.isPrimary()) {\n        valueCols.add(col);\n        return;\n      } // if 'chartDataType' is not provided then infer type based data contained in first row\n\n\n      (_this.isNumberCol(col) ? valueCols : dimensionCols).add(col);\n    });\n    return {\n      dimensionCols: dimensionCols,\n      valueCols: valueCols\n    };\n  };\n\n  ChartDataModel.prototype.isNumberCol = function (col) {\n    if (col.getColId() === 'ag-Grid-AutoColumn') {\n      return false;\n    }\n\n    var row = this.rowRenderer.getRowNode({\n      rowIndex: 0,\n      rowPinned: undefined\n    });\n\n    if (!row) {\n      return false;\n    }\n\n    var cellValue = this.valueService.getValue(col, row);\n\n    if (cellValue == null) {\n      cellValue = this.extractLeafData(row, col);\n    }\n\n    if (cellValue != null && typeof cellValue.toNumber === 'function') {\n      cellValue = cellValue.toNumber();\n    }\n\n    return typeof cellValue === 'number';\n  };\n\n  ChartDataModel.prototype.extractLeafData = function (row, col) {\n    if (!row.allLeafChildren) {\n      return null;\n    }\n\n    for (var i = 0; i < row.allLeafChildren.length; i++) {\n      var childRow = row.allLeafChildren[i];\n      var value = this.valueService.getValue(col, childRow);\n\n      if (value != null) {\n        return value;\n      }\n    }\n\n    return null;\n  };\n\n  ChartDataModel.prototype.displayNameMapper = function (col) {\n    var columnNames = this.columnNames[col.colId];\n    col.displayName = columnNames ? columnNames.join(' - ') : this.getColDisplayName(col.column);\n    return col;\n  };\n\n  ChartDataModel.prototype.generateId = function () {\n    return 'id-' + Math.random().toString(36).substr(2, 16);\n  };\n\n  ChartDataModel.prototype.updateData = function () {\n    var _a = this.getRowIndexes(),\n        startRow = _a.startRow,\n        endRow = _a.endRow;\n\n    if (this.pivotChart) {\n      this.resetColumnState();\n    }\n\n    this.grouping = this.isGrouping();\n    var params = {\n      aggFunc: this.aggFunc,\n      dimensionCols: [this.getSelectedDimension()],\n      grouping: this.grouping,\n      pivoting: this.isPivotActive(),\n      valueCols: this.getSelectedValueCols(),\n      startRow: startRow,\n      endRow: endRow\n    };\n    var result = this.datasource.getData(params);\n    this.chartData = result.data;\n    this.columnNames = result.columnNames;\n  };\n\n  ChartDataModel.prototype.resetColumnState = function () {\n    var _this = this;\n\n    var _a = this.getAllChartColumns(),\n        dimensionCols = _a.dimensionCols,\n        valueCols = _a.valueCols;\n\n    var allCols = this.getAllColumnsFromRanges();\n    var isInitialising = this.valueColState.length < 1;\n    this.dimensionColState = [];\n    this.valueColState = [];\n    var hasSelectedDimension = false;\n    var order = 1;\n    dimensionCols.forEach(function (column) {\n      var selected = !hasSelectedDimension && allCols.has(column);\n\n      _this.dimensionColState.push({\n        column: column,\n        colId: column.getColId(),\n        displayName: _this.getColDisplayName(column),\n        selected: selected,\n        order: order++\n      });\n\n      if (selected) {\n        hasSelectedDimension = true;\n      }\n    });\n    var defaultCategory = {\n      colId: ChartDataModel.DEFAULT_CATEGORY,\n      displayName: this.chartTranslator.translate('defaultCategory'),\n      selected: !hasSelectedDimension,\n      order: 0\n    };\n    this.dimensionColState.unshift(defaultCategory);\n    var valueColumnsFromReferenceRange = this.referenceCellRange.columns.filter(function (c) {\n      return valueCols.has(c);\n    });\n    valueCols.forEach(function (column) {\n      // first time the value cell range is set, preserve the column order from the supplied range\n      if (isInitialising && _.includes(_this.referenceCellRange.columns, column)) {\n        column = valueColumnsFromReferenceRange.shift();\n      }\n\n      _this.valueColState.push({\n        column: column,\n        colId: column.getColId(),\n        displayName: _this.getColDisplayName(column),\n        selected: allCols.has(column),\n        order: order++\n      });\n    });\n  };\n\n  ChartDataModel.prototype.updateColumnState = function (updatedCol) {\n    var idsMatch = function idsMatch(cs) {\n      return cs.colId === updatedCol.colId;\n    };\n\n    var _a = this,\n        dimensionColState = _a.dimensionColState,\n        valueColState = _a.valueColState;\n\n    if (dimensionColState.filter(idsMatch).length > 0) {\n      // only one dimension should be selected\n      dimensionColState.forEach(function (cs) {\n        return cs.selected = idsMatch(cs);\n      });\n    } else {\n      // just update the selected value on the supplied value column\n      valueColState.filter(idsMatch).forEach(function (cs) {\n        return cs.selected = updatedCol.selected;\n      });\n    }\n\n    var allColumns = __spreadArrays(dimensionColState, valueColState);\n\n    var orderedColIds = []; // calculate new order\n\n    allColumns.forEach(function (col, i) {\n      if (i === updatedCol.order) {\n        orderedColIds.push(updatedCol.colId);\n      }\n\n      if (col.colId !== updatedCol.colId) {\n        orderedColIds.push(col.colId);\n      }\n    }); // update col state with new order\n\n    allColumns.forEach(function (col) {\n      var order = orderedColIds.indexOf(col.colId);\n      col.order = order >= 0 ? orderedColIds.indexOf(col.colId) : allColumns.length - 1;\n    });\n    this.reorderColState();\n  };\n\n  ChartDataModel.prototype.reorderColState = function () {\n    var _a = this,\n        dimensionColState = _a.dimensionColState,\n        valueColState = _a.valueColState;\n\n    dimensionColState.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    valueColState.sort(function (a, b) {\n      return a.order - b.order;\n    });\n  };\n\n  ChartDataModel.prototype.setDimensionCellRange = function (dimensionCols, colsInRange, updatedColState) {\n    var _this = this;\n\n    this.dimensionCellRange = undefined;\n    var dimensionColState = this.dimensionColState;\n\n    if (!updatedColState && !dimensionColState.length) {\n      // use first dimension column in range by default\n      dimensionCols.forEach(function (col) {\n        if (_this.dimensionCellRange || !colsInRange.has(col)) {\n          return;\n        }\n\n        _this.dimensionCellRange = _this.createCellRange(CellRangeType.DIMENSION, col);\n      });\n      return;\n    }\n\n    var selectedDimensionColState = updatedColState;\n\n    if (!selectedDimensionColState || !dimensionCols.has(selectedDimensionColState.column)) {\n      selectedDimensionColState = this.dimensionColState.filter(function (cs) {\n        return cs.selected;\n      })[0];\n    }\n\n    if (selectedDimensionColState && selectedDimensionColState.colId !== ChartDataModel.DEFAULT_CATEGORY) {\n      this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, selectedDimensionColState.column);\n    }\n  };\n\n  ChartDataModel.prototype.setValueCellRange = function (valueCols, colsInRange, updatedColState) {\n    this.valueCellRange = undefined;\n    var selectedValueCols = [];\n    valueCols.forEach(function (col) {\n      if (updatedColState && updatedColState.colId === col.getColId()) {\n        if (updatedColState.selected) {\n          selectedValueCols.push(updatedColState.column);\n        }\n      } else if (colsInRange.has(col)) {\n        selectedValueCols.push(col);\n      }\n    });\n\n    if (selectedValueCols.length > 0) {\n      var orderedColIds_1 = [];\n\n      if (this.valueColState.length > 0) {\n        orderedColIds_1 = this.valueColState.map(function (c) {\n          return c.colId;\n        });\n      } else {\n        colsInRange.forEach(function (c) {\n          return orderedColIds_1.push(c.getColId());\n        });\n      }\n\n      selectedValueCols.sort(function (a, b) {\n        return orderedColIds_1.indexOf(a.getColId()) - orderedColIds_1.indexOf(b.getColId());\n      });\n      this.valueCellRange = this.createCellRange.apply(this, __spreadArrays([CellRangeType.VALUE], selectedValueCols));\n    }\n  };\n\n  ChartDataModel.DEFAULT_CATEGORY = 'AG-GRID-DEFAULT-CATEGORY';\n\n  __decorate([Autowired('columnController')], ChartDataModel.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], ChartDataModel.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('valueService')], ChartDataModel.prototype, \"valueService\", void 0);\n\n  __decorate([Autowired('rangeController')], ChartDataModel.prototype, \"rangeController\", void 0);\n\n  __decorate([Autowired('rowRenderer')], ChartDataModel.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('chartTranslator')], ChartDataModel.prototype, \"chartTranslator\", void 0);\n\n  __decorate([PostConstruct], ChartDataModel.prototype, \"init\", null);\n\n  return ChartDataModel;\n}(BeanStub);\n\nexport { ChartDataModel };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/charts/dist/es6/chartAdaptor/chartComp/chartDataModel.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__spreadArrays","s","il","k","a","j","jl","_","Autowired","BeanStub","CellRangeType","PostConstruct","ChartDatasource","ChartDataModel","_super","params","_this","call","dimensionColState","valueColState","detached","columnNames","pivotChart","chartType","aggFunc","referenceCellRange","cellRange","suppressChartRanges","chartId","generateId","init","datasource","createManagedBean","updateCellRanges","updatedColState","valueCellRange","_a","getAllChartColumns","dimensionCols","valueCols","allColsFromRanges","getAllColumnsFromRanges","updateColumnState","setDimensionCellRange","setValueCellRange","resetColumnState","updateData","getData","chartData","setChartType","isGrouping","usingTreeData","gridOptionsWrapper","isTreeData","groupedCols","columnController","getRowGroupColumns","groupActive","groupCols","getGroupDisplayColumns","colId","getSelectedDimension","groupDimensionSelected","map","col","getColId","some","id","isPivotActive","isPivotMode","isPivotChart","getChartId","getValueColState","displayNameMapper","bind","getDimensionColState","getCellRanges","dimensionCellRange","filter","getCellRangeParams","cellRanges","firstCellRange","startRow","endRow","rowStartIndex","rowIndex","rowStartPinned","rowPinned","rowEndIndex","rowEndPinned","columns","reduce","value","concat","getId","getChartType","isSuppressChartRanges","isDetached","toggleDetached","getSelectedValueColState","cs","selected","getSelectedValueCols","column","createCellRange","type","_i","startColumn","DIMENSION","convertToSet","getAllDisplayedColumns","push","apply","getColDisplayName","getDisplayNameForColumn","getRowIndexes","rangeController","range","getRangeStartRow","getRangeEndRow","displayedCols","Set","forEach","colDef","getColDef","chartDataType","add","console","warn","isPrimary","isNumberCol","row","rowRenderer","getRowNode","undefined","cellValue","valueService","getValue","extractLeafData","toNumber","allLeafChildren","childRow","displayName","join","Math","random","toString","substr","grouping","pivoting","result","data","allCols","isInitialising","hasSelectedDimension","order","has","defaultCategory","DEFAULT_CATEGORY","chartTranslator","translate","unshift","valueColumnsFromReferenceRange","includes","shift","updatedCol","idsMatch","allColumns","orderedColIds","indexOf","reorderColState","sort","colsInRange","selectedDimensionColState","selectedValueCols","orderedColIds_1","VALUE"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { _, Autowired, BeanStub, CellRangeType, PostConstruct } from \"@ag-grid-community/core\";\nimport { ChartDatasource } from \"./chartDatasource\";\nvar ChartDataModel = /** @class */ (function (_super) {\n    __extends(ChartDataModel, _super);\n    function ChartDataModel(params) {\n        var _this = _super.call(this) || this;\n        _this.dimensionColState = [];\n        _this.valueColState = [];\n        _this.detached = false;\n        _this.columnNames = {};\n        _this.pivotChart = params.pivotChart;\n        _this.chartType = params.chartType;\n        _this.aggFunc = params.aggFunc;\n        _this.referenceCellRange = params.cellRange;\n        _this.suppressChartRanges = params.suppressChartRanges;\n        // this is used to associate chart ranges with charts\n        _this.chartId = _this.generateId();\n        return _this;\n    }\n    ChartDataModel.prototype.init = function () {\n        this.datasource = this.createManagedBean(new ChartDatasource());\n        this.updateCellRanges();\n    };\n    ChartDataModel.prototype.updateCellRanges = function (updatedColState) {\n        if (this.valueCellRange) {\n            this.referenceCellRange = this.valueCellRange;\n        }\n        var _a = this.getAllChartColumns(), dimensionCols = _a.dimensionCols, valueCols = _a.valueCols;\n        var allColsFromRanges = this.getAllColumnsFromRanges();\n        if (updatedColState) {\n            this.updateColumnState(updatedColState);\n        }\n        this.setDimensionCellRange(dimensionCols, allColsFromRanges, updatedColState);\n        this.setValueCellRange(valueCols, allColsFromRanges, updatedColState);\n        if (!updatedColState) {\n            this.resetColumnState();\n        }\n        this.updateData();\n    };\n    ChartDataModel.prototype.getData = function () {\n        return this.chartData;\n    };\n    ChartDataModel.prototype.setChartType = function (chartType) {\n        this.chartType = chartType;\n    };\n    ChartDataModel.prototype.isGrouping = function () {\n        var usingTreeData = this.gridOptionsWrapper.isTreeData();\n        var groupedCols = usingTreeData ? null : this.columnController.getRowGroupColumns();\n        var groupActive = usingTreeData || (groupedCols && groupedCols.length > 0);\n        // charts only group when the selected category is a group column\n        var groupCols = this.columnController.getGroupDisplayColumns();\n        var colId = this.getSelectedDimension().colId;\n        var groupDimensionSelected = groupCols\n            .map(function (col) { return col.getColId(); })\n            .some(function (id) { return id === colId; });\n        return groupActive && groupDimensionSelected;\n    };\n    ChartDataModel.prototype.isPivotActive = function () {\n        return this.columnController.isPivotActive();\n    };\n    ChartDataModel.prototype.isPivotMode = function () {\n        return this.columnController.isPivotMode();\n    };\n    ChartDataModel.prototype.isPivotChart = function () {\n        return this.pivotChart;\n    };\n    ;\n    ChartDataModel.prototype.getChartId = function () {\n        return this.chartId;\n    };\n    ;\n    ChartDataModel.prototype.getValueColState = function () {\n        return this.valueColState.map(this.displayNameMapper.bind(this));\n    };\n    ;\n    ChartDataModel.prototype.getDimensionColState = function () {\n        return this.dimensionColState;\n    };\n    ;\n    ChartDataModel.prototype.getCellRanges = function () {\n        return [this.dimensionCellRange, this.valueCellRange].filter(function (r) { return r; });\n    };\n    ;\n    ChartDataModel.prototype.getCellRangeParams = function () {\n        var cellRanges = this.getCellRanges();\n        var firstCellRange = cellRanges[0];\n        var startRow = firstCellRange && firstCellRange.startRow;\n        var endRow = firstCellRange && firstCellRange.endRow;\n        return {\n            rowStartIndex: startRow && startRow.rowIndex,\n            rowStartPinned: startRow && startRow.rowPinned,\n            rowEndIndex: endRow && endRow.rowIndex,\n            rowEndPinned: endRow && endRow.rowPinned,\n            columns: cellRanges.reduce(function (columns, value) { return columns.concat(value.columns.map(function (c) { return c.getId(); })); }, [])\n        };\n    };\n    ChartDataModel.prototype.getChartType = function () {\n        return this.chartType;\n    };\n    ;\n    ChartDataModel.prototype.isSuppressChartRanges = function () {\n        return this.suppressChartRanges;\n    };\n    ;\n    ChartDataModel.prototype.isDetached = function () {\n        return this.detached;\n    };\n    ;\n    ChartDataModel.prototype.toggleDetached = function () {\n        this.detached = !this.detached;\n    };\n    ChartDataModel.prototype.getSelectedValueColState = function () {\n        return this.getValueColState().filter(function (cs) { return cs.selected; });\n    };\n    ;\n    ChartDataModel.prototype.getSelectedValueCols = function () {\n        return this.valueColState.filter(function (cs) { return cs.selected; }).map(function (cs) { return cs.column; });\n    };\n    ;\n    ChartDataModel.prototype.getSelectedDimension = function () {\n        return this.dimensionColState.filter(function (cs) { return cs.selected; })[0];\n    };\n    ;\n    ChartDataModel.prototype.createCellRange = function (type) {\n        var columns = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            columns[_i - 1] = arguments[_i];\n        }\n        return {\n            id: this.chartId,\n            startRow: this.referenceCellRange.startRow,\n            endRow: this.referenceCellRange.endRow,\n            columns: columns,\n            startColumn: type === CellRangeType.DIMENSION ? columns[0] : this.referenceCellRange.startColumn,\n            type: type\n        };\n    };\n    ChartDataModel.prototype.getAllColumnsFromRanges = function () {\n        if (this.pivotChart) {\n            return _.convertToSet(this.columnController.getAllDisplayedColumns());\n        }\n        ;\n        var columns = this.dimensionCellRange || this.valueCellRange ? [] : this.referenceCellRange.columns;\n        if (this.dimensionCellRange) {\n            columns.push.apply(columns, this.dimensionCellRange.columns);\n        }\n        if (this.valueCellRange) {\n            columns.push.apply(columns, this.valueCellRange.columns);\n        }\n        return _.convertToSet(columns);\n    };\n    ChartDataModel.prototype.getColDisplayName = function (col) {\n        return this.columnController.getDisplayNameForColumn(col, 'chart');\n    };\n    ChartDataModel.prototype.getRowIndexes = function () {\n        var startRow = 0, endRow = 0;\n        var rangeController = this.rangeController;\n        var range = this.valueCellRange;\n        if (rangeController && range) {\n            startRow = rangeController.getRangeStartRow(range).rowIndex;\n            endRow = rangeController.getRangeEndRow(range).rowIndex;\n        }\n        return { startRow: startRow, endRow: endRow };\n    };\n    ChartDataModel.prototype.getAllChartColumns = function () {\n        var _this = this;\n        var displayedCols = this.columnController.getAllDisplayedColumns();\n        var dimensionCols = new Set();\n        var valueCols = new Set();\n        displayedCols.forEach(function (col) {\n            var colDef = col.getColDef();\n            var chartDataType = colDef.chartDataType;\n            if (chartDataType) {\n                // chart data type was specified explicitly\n                switch (chartDataType) {\n                    case 'category':\n                        dimensionCols.add(col);\n                        return;\n                    case 'series':\n                        valueCols.add(col);\n                        return;\n                    case 'excluded':\n                        return;\n                    default:\n                        console.warn(\"ag-Grid: unexpected chartDataType value '\" + chartDataType + \"' supplied, instead use 'category', 'series' or 'excluded'\");\n                        break;\n                }\n            }\n            if (colDef.colId === 'ag-Grid-AutoColumn') {\n                dimensionCols.add(col);\n                return;\n            }\n            if (!col.isPrimary()) {\n                valueCols.add(col);\n                return;\n            }\n            // if 'chartDataType' is not provided then infer type based data contained in first row\n            (_this.isNumberCol(col) ? valueCols : dimensionCols).add(col);\n        });\n        return { dimensionCols: dimensionCols, valueCols: valueCols };\n    };\n    ChartDataModel.prototype.isNumberCol = function (col) {\n        if (col.getColId() === 'ag-Grid-AutoColumn') {\n            return false;\n        }\n        var row = this.rowRenderer.getRowNode({ rowIndex: 0, rowPinned: undefined });\n        if (!row) {\n            return false;\n        }\n        var cellValue = this.valueService.getValue(col, row);\n        if (cellValue == null) {\n            cellValue = this.extractLeafData(row, col);\n        }\n        if (cellValue != null && typeof cellValue.toNumber === 'function') {\n            cellValue = cellValue.toNumber();\n        }\n        return typeof cellValue === 'number';\n    };\n    ChartDataModel.prototype.extractLeafData = function (row, col) {\n        if (!row.allLeafChildren) {\n            return null;\n        }\n        for (var i = 0; i < row.allLeafChildren.length; i++) {\n            var childRow = row.allLeafChildren[i];\n            var value = this.valueService.getValue(col, childRow);\n            if (value != null) {\n                return value;\n            }\n        }\n        return null;\n    };\n    ChartDataModel.prototype.displayNameMapper = function (col) {\n        var columnNames = this.columnNames[col.colId];\n        col.displayName = columnNames ? columnNames.join(' - ') : this.getColDisplayName(col.column);\n        return col;\n    };\n    ChartDataModel.prototype.generateId = function () {\n        return 'id-' + Math.random().toString(36).substr(2, 16);\n    };\n    ChartDataModel.prototype.updateData = function () {\n        var _a = this.getRowIndexes(), startRow = _a.startRow, endRow = _a.endRow;\n        if (this.pivotChart) {\n            this.resetColumnState();\n        }\n        this.grouping = this.isGrouping();\n        var params = {\n            aggFunc: this.aggFunc,\n            dimensionCols: [this.getSelectedDimension()],\n            grouping: this.grouping,\n            pivoting: this.isPivotActive(),\n            valueCols: this.getSelectedValueCols(),\n            startRow: startRow,\n            endRow: endRow\n        };\n        var result = this.datasource.getData(params);\n        this.chartData = result.data;\n        this.columnNames = result.columnNames;\n    };\n    ChartDataModel.prototype.resetColumnState = function () {\n        var _this = this;\n        var _a = this.getAllChartColumns(), dimensionCols = _a.dimensionCols, valueCols = _a.valueCols;\n        var allCols = this.getAllColumnsFromRanges();\n        var isInitialising = this.valueColState.length < 1;\n        this.dimensionColState = [];\n        this.valueColState = [];\n        var hasSelectedDimension = false;\n        var order = 1;\n        dimensionCols.forEach(function (column) {\n            var selected = !hasSelectedDimension && allCols.has(column);\n            _this.dimensionColState.push({\n                column: column,\n                colId: column.getColId(),\n                displayName: _this.getColDisplayName(column),\n                selected: selected,\n                order: order++\n            });\n            if (selected) {\n                hasSelectedDimension = true;\n            }\n        });\n        var defaultCategory = {\n            colId: ChartDataModel.DEFAULT_CATEGORY,\n            displayName: this.chartTranslator.translate('defaultCategory'),\n            selected: !hasSelectedDimension,\n            order: 0\n        };\n        this.dimensionColState.unshift(defaultCategory);\n        var valueColumnsFromReferenceRange = this.referenceCellRange.columns.filter(function (c) { return valueCols.has(c); });\n        valueCols.forEach(function (column) {\n            // first time the value cell range is set, preserve the column order from the supplied range\n            if (isInitialising && _.includes(_this.referenceCellRange.columns, column)) {\n                column = valueColumnsFromReferenceRange.shift();\n            }\n            _this.valueColState.push({\n                column: column,\n                colId: column.getColId(),\n                displayName: _this.getColDisplayName(column),\n                selected: allCols.has(column),\n                order: order++\n            });\n        });\n    };\n    ChartDataModel.prototype.updateColumnState = function (updatedCol) {\n        var idsMatch = function (cs) { return cs.colId === updatedCol.colId; };\n        var _a = this, dimensionColState = _a.dimensionColState, valueColState = _a.valueColState;\n        if (dimensionColState.filter(idsMatch).length > 0) {\n            // only one dimension should be selected\n            dimensionColState.forEach(function (cs) { return cs.selected = idsMatch(cs); });\n        }\n        else {\n            // just update the selected value on the supplied value column\n            valueColState.filter(idsMatch).forEach(function (cs) { return cs.selected = updatedCol.selected; });\n        }\n        var allColumns = __spreadArrays(dimensionColState, valueColState);\n        var orderedColIds = [];\n        // calculate new order\n        allColumns.forEach(function (col, i) {\n            if (i === updatedCol.order) {\n                orderedColIds.push(updatedCol.colId);\n            }\n            if (col.colId !== updatedCol.colId) {\n                orderedColIds.push(col.colId);\n            }\n        });\n        // update col state with new order\n        allColumns.forEach(function (col) {\n            var order = orderedColIds.indexOf(col.colId);\n            col.order = order >= 0 ? orderedColIds.indexOf(col.colId) : allColumns.length - 1;\n        });\n        this.reorderColState();\n    };\n    ChartDataModel.prototype.reorderColState = function () {\n        var _a = this, dimensionColState = _a.dimensionColState, valueColState = _a.valueColState;\n        dimensionColState.sort(function (a, b) { return a.order - b.order; });\n        valueColState.sort(function (a, b) { return a.order - b.order; });\n    };\n    ChartDataModel.prototype.setDimensionCellRange = function (dimensionCols, colsInRange, updatedColState) {\n        var _this = this;\n        this.dimensionCellRange = undefined;\n        var dimensionColState = this.dimensionColState;\n        if (!updatedColState && !dimensionColState.length) {\n            // use first dimension column in range by default\n            dimensionCols.forEach(function (col) {\n                if (_this.dimensionCellRange || !colsInRange.has(col)) {\n                    return;\n                }\n                _this.dimensionCellRange = _this.createCellRange(CellRangeType.DIMENSION, col);\n            });\n            return;\n        }\n        var selectedDimensionColState = updatedColState;\n        if (!selectedDimensionColState || !dimensionCols.has(selectedDimensionColState.column)) {\n            selectedDimensionColState = this.dimensionColState.filter(function (cs) { return cs.selected; })[0];\n        }\n        if (selectedDimensionColState && selectedDimensionColState.colId !== ChartDataModel.DEFAULT_CATEGORY) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, selectedDimensionColState.column);\n        }\n    };\n    ChartDataModel.prototype.setValueCellRange = function (valueCols, colsInRange, updatedColState) {\n        this.valueCellRange = undefined;\n        var selectedValueCols = [];\n        valueCols.forEach(function (col) {\n            if (updatedColState && updatedColState.colId === col.getColId()) {\n                if (updatedColState.selected) {\n                    selectedValueCols.push(updatedColState.column);\n                }\n            }\n            else if (colsInRange.has(col)) {\n                selectedValueCols.push(col);\n            }\n        });\n        if (selectedValueCols.length > 0) {\n            var orderedColIds_1 = [];\n            if (this.valueColState.length > 0) {\n                orderedColIds_1 = this.valueColState.map(function (c) { return c.colId; });\n            }\n            else {\n                colsInRange.forEach(function (c) { return orderedColIds_1.push(c.getColId()); });\n            }\n            selectedValueCols.sort(function (a, b) { return orderedColIds_1.indexOf(a.getColId()) - orderedColIds_1.indexOf(b.getColId()); });\n            this.valueCellRange = this.createCellRange.apply(this, __spreadArrays([CellRangeType.VALUE], selectedValueCols));\n        }\n    };\n    ChartDataModel.DEFAULT_CATEGORY = 'AG-GRID-DEFAULT-CATEGORY';\n    __decorate([\n        Autowired('columnController')\n    ], ChartDataModel.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ChartDataModel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], ChartDataModel.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('rangeController')\n    ], ChartDataModel.prototype, \"rangeController\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], ChartDataModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('chartTranslator')\n    ], ChartDataModel.prototype, \"chartTranslator\", void 0);\n    __decorate([\n        PostConstruct\n    ], ChartDataModel.prototype, \"init\", null);\n    return ChartDataModel;\n}(BeanStub));\nexport { ChartDataModel };\n"]},"metadata":{},"sourceType":"module"}