{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { SelectionController } from \"./selectionController\";\nimport { ColumnApi } from \"./columnController/columnApi\";\nimport { ColumnController } from \"./columnController/columnController\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { HeaderRootComp } from \"./headerRendering/headerRootComp\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { ValueService } from \"./valueService/valueService\";\nimport { EventService } from \"./eventService\";\nimport { GridPanel } from \"./gridPanel/gridPanel\";\nimport { GridApi } from \"./gridApi\";\nimport { ColumnFactory } from \"./columnController/columnFactory\";\nimport { DisplayedGroupCreator } from \"./columnController/displayedGroupCreator\";\nimport { ExpressionService } from \"./valueService/expressionService\";\nimport { TemplateService } from \"./templateService\";\nimport { PopupService } from \"./widgets/popupService\";\nimport { Logger, LoggerFactory } from \"./logger\";\nimport { ColumnUtils } from \"./columnController/columnUtils\";\nimport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"./headerRendering/horizontalResizeService\";\nimport { Context } from \"./context/context\";\nimport { GridCore } from \"./gridCore\";\nimport { StandardMenuFactory } from \"./headerRendering/standardMenu\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService\";\nimport { DragService } from \"./dragAndDrop/dragService\";\nimport { SortController } from \"./sortController\";\nimport { FocusController } from \"./focusController\";\nimport { MouseEventService } from \"./gridPanel/mouseEventService\";\nimport { CellNavigationService } from \"./cellNavigationService\";\nimport { Events } from \"./events\";\nimport { CellRendererFactory } from \"./rendering/cellRendererFactory\";\nimport { ValueFormatterService } from \"./rendering/valueFormatterService\";\nimport { AgCheckbox } from \"./widgets/agCheckbox\";\nimport { AgRadioButton } from \"./widgets/agRadioButton\";\nimport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides\";\nimport { ScrollVisibleService } from \"./gridPanel/scrollVisibleService\";\nimport { StylingService } from \"./styling/stylingService\";\nimport { ColumnHoverService } from \"./rendering/columnHoverService\";\nimport { ColumnAnimationService } from \"./rendering/columnAnimationService\";\nimport { AutoGroupColService } from \"./columnController/autoGroupColService\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { PaginationAutoPageSizeService } from \"./pagination/paginationAutoPageSizeService\";\nimport { Constants } from \"./constants\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { ChangeDetectionService } from \"./valueService/changeDetectionService\";\nimport { AlignedGridsService } from \"./alignedGridsService\";\nimport { UserComponentFactory } from \"./components/framework/userComponentFactory\";\nimport { UserComponentRegistry } from \"./components/framework/userComponentRegistry\";\nimport { AgComponentUtils } from \"./components/framework/agComponentUtils\";\nimport { ComponentMetadataProvider } from \"./components/framework/componentMetadataProvider\";\nimport { Beans } from \"./rendering/beans\";\nimport { Environment } from \"./environment\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { NavigationService } from \"./gridPanel/navigationService\";\nimport { MaxDivHeightScaler } from \"./rendering/maxDivHeightScaler\";\nimport { SelectableService } from \"./rowNodes/selectableService\";\nimport { AutoHeightCalculator } from \"./rendering/autoHeightCalculator\";\nimport { PaginationComp } from \"./pagination/paginationComp\";\nimport { ResizeObserverService } from \"./misc/resizeObserverService\";\nimport { OverlayWrapperComponent } from \"./rendering/overlays/overlayWrapperComponent\";\nimport { AgGroupComponent } from \"./widgets/agGroupComponent\";\nimport { AgDialog } from \"./widgets/agDialog\";\nimport { AgPanel } from \"./widgets/agPanel\";\nimport { AgInputTextField } from \"./widgets/agInputTextField\";\nimport { AgInputTextArea } from \"./widgets/agInputTextArea\";\nimport { AgSlider } from \"./widgets/agSlider\";\nimport { AgColorPicker } from \"./widgets/agColorPicker\";\nimport { AgInputNumberField } from \"./widgets/agInputNumberField\";\nimport { AgInputRange } from \"./widgets/agInputRange\";\nimport { AgSelect } from \"./widgets/agSelect\";\nimport { AgAngleSelect } from \"./widgets/agAngleSelect\";\nimport { AgToggleButton } from \"./widgets/agToggleButton\";\nimport { DetailRowCompCache } from \"./rendering/detailRowCompCache\";\nimport { RowPositionUtils } from \"./entities/rowPosition\";\nimport { CellPositionUtils } from \"./entities/cellPosition\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\nimport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry\";\nimport { HeaderPositionUtils } from \"./headerRendering/header/headerPosition\";\nimport { HeaderNavigationService } from \"./headerRendering/header/headerNavigationService\";\nimport { _ } from \"./utils\";\n\nvar Grid =\n/** @class */\nfunction () {\n  function Grid(eGridDiv, gridOptions, params) {\n    if (!eGridDiv) {\n      console.error('ag-Grid: no div element provided to the grid');\n      return;\n    }\n\n    if (!gridOptions) {\n      console.error('ag-Grid: no gridOptions provided to the grid');\n      return;\n    }\n\n    var debug = !!gridOptions.debug;\n    this.gridOptions = gridOptions;\n    var registeredModules = this.getRegisteredModules(params);\n    var beanClasses = this.createBeansList(registeredModules);\n    var providedBeanInstances = this.createProvidedBeans(eGridDiv, params);\n\n    if (!beanClasses) {\n      return;\n    } // happens when no row model found\n\n\n    var contextParams = {\n      providedBeanInstances: providedBeanInstances,\n      beanClasses: beanClasses,\n      debug: debug\n    };\n    this.logger = new Logger('ag-Grid', function () {\n      return gridOptions.debug;\n    });\n    var contextLogger = new Logger('Context', function () {\n      return contextParams.debug;\n    });\n    this.context = new Context(contextParams, contextLogger);\n    this.registerModuleUserComponents(registeredModules);\n    this.registerStackComponents(registeredModules);\n    var gridCoreClass = params && params.rootComponent || GridCore;\n    var gridCore = new gridCoreClass();\n    this.context.createBean(gridCore);\n    this.setColumnsAndData();\n    this.dispatchGridReadyEvent(gridOptions);\n    var isEnterprise = ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);\n    this.logger.log(\"initialised successfully, enterprise = \" + isEnterprise);\n  }\n\n  Grid.prototype.registerStackComponents = function (registeredModules) {\n    var agStackComponents = this.createAgStackComponentsList(registeredModules);\n    var agStackComponentsRegistry = this.context.getBean('agStackComponentsRegistry');\n    agStackComponentsRegistry.setupComponents(agStackComponents);\n  };\n\n  Grid.prototype.getRegisteredModules = function (params) {\n    var passedViaConstructor = params ? params.modules : null;\n    var registered = ModuleRegistry.getRegisteredModules();\n    var allModules = [];\n    var mapNames = {}; // adds to list and removes duplicates\n\n    function addModule(moduleBased, module) {\n      function addIndividualModule(module) {\n        if (!mapNames[module.moduleName]) {\n          mapNames[module.moduleName] = true;\n          allModules.push(module);\n          ModuleRegistry.register(module, moduleBased);\n        }\n      }\n\n      addIndividualModule(module);\n\n      if (module.dependantModules) {\n        module.dependantModules.forEach(addModule.bind(null, moduleBased));\n      }\n    }\n\n    if (passedViaConstructor) {\n      passedViaConstructor.forEach(addModule.bind(null, true));\n    }\n\n    if (registered) {\n      registered.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));\n    }\n\n    return allModules;\n  };\n\n  Grid.prototype.registerModuleUserComponents = function (registeredModules) {\n    var userComponentRegistry = this.context.getBean('userComponentRegistry');\n    var moduleUserComps = this.extractModuleEntity(registeredModules, function (module) {\n      return module.userComponents ? module.userComponents : [];\n    });\n    moduleUserComps.forEach(function (compMeta) {\n      userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);\n    });\n  };\n\n  Grid.prototype.createProvidedBeans = function (eGridDiv, params) {\n    var frameworkOverrides = params ? params.frameworkOverrides : null;\n\n    if (_.missing(frameworkOverrides)) {\n      frameworkOverrides = new VanillaFrameworkOverrides();\n    }\n\n    var seed = {\n      gridOptions: this.gridOptions,\n      eGridDiv: eGridDiv,\n      $scope: params ? params.$scope : null,\n      $compile: params ? params.$compile : null,\n      quickFilterOnScope: params ? params.quickFilterOnScope : null,\n      globalEventListener: params ? params.globalEventListener : null,\n      frameworkOverrides: frameworkOverrides\n    };\n\n    if (params && params.providedBeanInstances) {\n      _.assign(seed, params.providedBeanInstances);\n    }\n\n    return seed;\n  };\n\n  Grid.prototype.createAgStackComponentsList = function (registeredModules) {\n    var components = [{\n      componentName: 'AgCheckbox',\n      componentClass: AgCheckbox\n    }, {\n      componentName: 'AgRadioButton',\n      componentClass: AgRadioButton\n    }, {\n      componentName: 'AgToggleButton',\n      componentClass: AgToggleButton\n    }, {\n      componentName: 'AgInputTextField',\n      componentClass: AgInputTextField\n    }, {\n      componentName: 'AgInputTextArea',\n      componentClass: AgInputTextArea\n    }, {\n      componentName: 'AgInputNumberField',\n      componentClass: AgInputNumberField\n    }, {\n      componentName: 'AgInputRange',\n      componentClass: AgInputRange\n    }, {\n      componentName: 'AgSelect',\n      componentClass: AgSelect\n    }, {\n      componentName: 'AgSlider',\n      componentClass: AgSlider\n    }, {\n      componentName: 'AgAngleSelect',\n      componentClass: AgAngleSelect\n    }, {\n      componentName: 'AgColorPicker',\n      componentClass: AgColorPicker\n    }, {\n      componentName: 'AgGridComp',\n      componentClass: GridPanel\n    }, {\n      componentName: 'AgHeaderRoot',\n      componentClass: HeaderRootComp\n    }, {\n      componentName: 'AgPagination',\n      componentClass: PaginationComp\n    }, {\n      componentName: 'AgOverlayWrapper',\n      componentClass: OverlayWrapperComponent\n    }, {\n      componentName: 'AgGroupComponent',\n      componentClass: AgGroupComponent\n    }, {\n      componentName: 'AgPanel',\n      componentClass: AgPanel\n    }, {\n      componentName: 'AgDialog',\n      componentClass: AgDialog\n    }];\n    var moduleAgStackComps = this.extractModuleEntity(registeredModules, function (module) {\n      return module.agStackComponents ? module.agStackComponents : [];\n    });\n    components = components.concat(moduleAgStackComps);\n    return components;\n  };\n\n  Grid.prototype.createBeansList = function (registeredModules) {\n    var rowModelClass = this.getRowModelClass(registeredModules);\n\n    if (!rowModelClass) {\n      return undefined;\n    } // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n\n\n    var beans = [rowModelClass, Beans, RowPositionUtils, CellPositionUtils, HeaderPositionUtils, PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils, ComponentMetadataProvider, ResizeObserverService, UserComponentFactory, MaxDivHeightScaler, AutoHeightCalculator, CellRendererFactory, HorizontalResizeService, PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsWrapper, PopupService, SelectionController, FilterManager, ColumnController, HeaderNavigationService, PaginationProxy, RowRenderer, ExpressionService, ColumnFactory, TemplateService, AlignedGridsService, NavigationService, ValueCache, ValueService, LoggerFactory, ColumnUtils, AutoWidthCalculator, StandardMenuFactory, DragAndDropService, ColumnApi, FocusController, MouseEventService, Environment, CellNavigationService, ValueFormatterService, StylingService, ScrollVisibleService, SortController, ColumnHoverService, ColumnAnimationService, SelectableService, AutoGroupColService, ChangeDetectionService, AnimationFrameService, DetailRowCompCache, UndoRedoService, AgStackComponentsRegistry];\n    var moduleBeans = this.extractModuleEntity(registeredModules, function (module) {\n      return module.beans ? module.beans : [];\n    });\n    beans.push.apply(beans, moduleBeans); // check for duplicates, as different modules could include the same beans that\n    // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n\n    var beansNoDuplicates = [];\n    beans.forEach(function (bean) {\n      if (beansNoDuplicates.indexOf(bean) < 0) {\n        beansNoDuplicates.push(bean);\n      }\n    });\n    return beansNoDuplicates;\n  };\n\n  Grid.prototype.extractModuleEntity = function (moduleEntities, extractor) {\n    return [].concat.apply([], moduleEntities.map(extractor));\n  };\n\n  Grid.prototype.setColumnsAndData = function () {\n    var gridOptionsWrapper = this.context.getBean('gridOptionsWrapper');\n    var columnController = this.context.getBean('columnController');\n    var columnDefs = gridOptionsWrapper.getColumnDefs();\n\n    if (_.exists(columnDefs)) {\n      columnController.setColumnDefs(columnDefs, \"gridInitializing\");\n    }\n\n    var rowModel = this.context.getBean('rowModel');\n    rowModel.start();\n  };\n\n  Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {\n    var eventService = this.context.getBean('eventService');\n    var readyEvent = {\n      type: Events.EVENT_GRID_READY,\n      api: gridOptions.api,\n      columnApi: gridOptions.columnApi\n    };\n    eventService.dispatchEvent(readyEvent);\n  };\n\n  Grid.prototype.getRowModelClass = function (registeredModules) {\n    var rowModelType = this.gridOptions.rowModelType; //TODO: temporary measure before 'enterprise' is completely removed (similar handling in gridOptionsWrapper is also required)\n\n    if (rowModelType === 'enterprise') {\n      console.warn(\"ag-Grid: enterprise rowModel deprecated. Should now be called server side row model instead.\");\n      rowModelType = Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n    }\n\n    if (rowModelType === 'normal') {\n      console.warn(\"ag-Grid: normal rowModel deprecated. Should now be called client side row model instead.\");\n      rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    } // default to client side\n\n\n    if (!rowModelType) {\n      rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    }\n\n    var rowModelClasses = {};\n    registeredModules.forEach(function (module) {\n      _.iterateObject(module.rowModels, function (key, value) {\n        rowModelClasses[key] = value;\n      });\n    });\n    var rowModelClass = rowModelClasses[rowModelType];\n\n    if (_.exists(rowModelClass)) {\n      return rowModelClass;\n    } else {\n      if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {\n        console.error(\"ag-Grid: Row Model \\\"Infinite\\\" not found. Please ensure the \" + ModuleNames.InfiniteRowModelModule + \" is registered.';\");\n      }\n\n      console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);\n\n      if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {\n        console.error(\"ag-Grid: Row Model \\\"Viewport\\\" not found. Please ensure the ag-Grid Enterprise Module \" + ModuleNames.ViewportRowModelModule + \" is registered.';\");\n      }\n\n      if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {\n        console.error(\"ag-Grid: Row Model \\\"Server Side\\\" not found. Please ensure the ag-Grid Enterprise Module \" + ModuleNames.ServerSideRowModelModule + \" is registered.';\");\n      }\n\n      if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n        console.error(\"ag-Grid: Row Model \\\"Client Side\\\" not found. Please ensure the \" + ModuleNames.ClientSideRowModelModule + \" is registered.';\");\n      }\n\n      return undefined;\n    }\n  };\n\n  Grid.prototype.destroy = function () {\n    this.gridOptions.api.destroy();\n  };\n\n  return Grid;\n}();\n\nexport { Grid };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/grid.js"],"names":["GridOptionsWrapper","SelectionController","ColumnApi","ColumnController","RowRenderer","HeaderRootComp","FilterManager","ValueService","EventService","GridPanel","GridApi","ColumnFactory","DisplayedGroupCreator","ExpressionService","TemplateService","PopupService","Logger","LoggerFactory","ColumnUtils","AutoWidthCalculator","HorizontalResizeService","Context","GridCore","StandardMenuFactory","DragAndDropService","DragService","SortController","FocusController","MouseEventService","CellNavigationService","Events","CellRendererFactory","ValueFormatterService","AgCheckbox","AgRadioButton","VanillaFrameworkOverrides","ScrollVisibleService","StylingService","ColumnHoverService","ColumnAnimationService","AutoGroupColService","PaginationProxy","PaginationAutoPageSizeService","Constants","ValueCache","ChangeDetectionService","AlignedGridsService","UserComponentFactory","UserComponentRegistry","AgComponentUtils","ComponentMetadataProvider","Beans","Environment","AnimationFrameService","NavigationService","MaxDivHeightScaler","SelectableService","AutoHeightCalculator","PaginationComp","ResizeObserverService","OverlayWrapperComponent","AgGroupComponent","AgDialog","AgPanel","AgInputTextField","AgInputTextArea","AgSlider","AgColorPicker","AgInputNumberField","AgInputRange","AgSelect","AgAngleSelect","AgToggleButton","DetailRowCompCache","RowPositionUtils","CellPositionUtils","PinnedRowModel","ModuleRegistry","ModuleNames","UndoRedoService","AgStackComponentsRegistry","HeaderPositionUtils","HeaderNavigationService","_","Grid","eGridDiv","gridOptions","params","console","error","debug","registeredModules","getRegisteredModules","beanClasses","createBeansList","providedBeanInstances","createProvidedBeans","contextParams","logger","contextLogger","context","registerModuleUserComponents","registerStackComponents","gridCoreClass","rootComponent","gridCore","createBean","setColumnsAndData","dispatchGridReadyEvent","isEnterprise","isRegistered","EnterpriseCoreModule","log","prototype","agStackComponents","createAgStackComponentsList","agStackComponentsRegistry","getBean","setupComponents","passedViaConstructor","modules","registered","allModules","mapNames","addModule","moduleBased","module","addIndividualModule","moduleName","push","register","dependantModules","forEach","bind","isPackageBased","userComponentRegistry","moduleUserComps","extractModuleEntity","userComponents","compMeta","registerDefaultComponent","componentName","componentClass","frameworkOverrides","missing","seed","$scope","$compile","quickFilterOnScope","globalEventListener","assign","components","moduleAgStackComps","concat","rowModelClass","getRowModelClass","undefined","beans","moduleBeans","apply","beansNoDuplicates","bean","indexOf","moduleEntities","extractor","map","gridOptionsWrapper","columnController","columnDefs","getColumnDefs","exists","setColumnDefs","rowModel","start","eventService","readyEvent","type","EVENT_GRID_READY","api","columnApi","dispatchEvent","rowModelType","warn","ROW_MODEL_TYPE_SERVER_SIDE","ROW_MODEL_TYPE_CLIENT_SIDE","rowModelClasses","iterateObject","rowModels","key","value","ROW_MODEL_TYPE_INFINITE","InfiniteRowModelModule","ROW_MODEL_TYPE_VIEWPORT","ViewportRowModelModule","ServerSideRowModelModule","ClientSideRowModelModule","destroy"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { SelectionController } from \"./selectionController\";\nimport { ColumnApi } from \"./columnController/columnApi\";\nimport { ColumnController } from \"./columnController/columnController\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { HeaderRootComp } from \"./headerRendering/headerRootComp\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { ValueService } from \"./valueService/valueService\";\nimport { EventService } from \"./eventService\";\nimport { GridPanel } from \"./gridPanel/gridPanel\";\nimport { GridApi } from \"./gridApi\";\nimport { ColumnFactory } from \"./columnController/columnFactory\";\nimport { DisplayedGroupCreator } from \"./columnController/displayedGroupCreator\";\nimport { ExpressionService } from \"./valueService/expressionService\";\nimport { TemplateService } from \"./templateService\";\nimport { PopupService } from \"./widgets/popupService\";\nimport { Logger, LoggerFactory } from \"./logger\";\nimport { ColumnUtils } from \"./columnController/columnUtils\";\nimport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"./headerRendering/horizontalResizeService\";\nimport { Context } from \"./context/context\";\nimport { GridCore } from \"./gridCore\";\nimport { StandardMenuFactory } from \"./headerRendering/standardMenu\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService\";\nimport { DragService } from \"./dragAndDrop/dragService\";\nimport { SortController } from \"./sortController\";\nimport { FocusController } from \"./focusController\";\nimport { MouseEventService } from \"./gridPanel/mouseEventService\";\nimport { CellNavigationService } from \"./cellNavigationService\";\nimport { Events } from \"./events\";\nimport { CellRendererFactory } from \"./rendering/cellRendererFactory\";\nimport { ValueFormatterService } from \"./rendering/valueFormatterService\";\nimport { AgCheckbox } from \"./widgets/agCheckbox\";\nimport { AgRadioButton } from \"./widgets/agRadioButton\";\nimport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides\";\nimport { ScrollVisibleService } from \"./gridPanel/scrollVisibleService\";\nimport { StylingService } from \"./styling/stylingService\";\nimport { ColumnHoverService } from \"./rendering/columnHoverService\";\nimport { ColumnAnimationService } from \"./rendering/columnAnimationService\";\nimport { AutoGroupColService } from \"./columnController/autoGroupColService\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { PaginationAutoPageSizeService } from \"./pagination/paginationAutoPageSizeService\";\nimport { Constants } from \"./constants\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { ChangeDetectionService } from \"./valueService/changeDetectionService\";\nimport { AlignedGridsService } from \"./alignedGridsService\";\nimport { UserComponentFactory } from \"./components/framework/userComponentFactory\";\nimport { UserComponentRegistry } from \"./components/framework/userComponentRegistry\";\nimport { AgComponentUtils } from \"./components/framework/agComponentUtils\";\nimport { ComponentMetadataProvider } from \"./components/framework/componentMetadataProvider\";\nimport { Beans } from \"./rendering/beans\";\nimport { Environment } from \"./environment\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { NavigationService } from \"./gridPanel/navigationService\";\nimport { MaxDivHeightScaler } from \"./rendering/maxDivHeightScaler\";\nimport { SelectableService } from \"./rowNodes/selectableService\";\nimport { AutoHeightCalculator } from \"./rendering/autoHeightCalculator\";\nimport { PaginationComp } from \"./pagination/paginationComp\";\nimport { ResizeObserverService } from \"./misc/resizeObserverService\";\nimport { OverlayWrapperComponent } from \"./rendering/overlays/overlayWrapperComponent\";\nimport { AgGroupComponent } from \"./widgets/agGroupComponent\";\nimport { AgDialog } from \"./widgets/agDialog\";\nimport { AgPanel } from \"./widgets/agPanel\";\nimport { AgInputTextField } from \"./widgets/agInputTextField\";\nimport { AgInputTextArea } from \"./widgets/agInputTextArea\";\nimport { AgSlider } from \"./widgets/agSlider\";\nimport { AgColorPicker } from \"./widgets/agColorPicker\";\nimport { AgInputNumberField } from \"./widgets/agInputNumberField\";\nimport { AgInputRange } from \"./widgets/agInputRange\";\nimport { AgSelect } from \"./widgets/agSelect\";\nimport { AgAngleSelect } from \"./widgets/agAngleSelect\";\nimport { AgToggleButton } from \"./widgets/agToggleButton\";\nimport { DetailRowCompCache } from \"./rendering/detailRowCompCache\";\nimport { RowPositionUtils } from \"./entities/rowPosition\";\nimport { CellPositionUtils } from \"./entities/cellPosition\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\nimport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry\";\nimport { HeaderPositionUtils } from \"./headerRendering/header/headerPosition\";\nimport { HeaderNavigationService } from \"./headerRendering/header/headerNavigationService\";\nimport { _ } from \"./utils\";\nvar Grid = /** @class */ (function () {\n    function Grid(eGridDiv, gridOptions, params) {\n        if (!eGridDiv) {\n            console.error('ag-Grid: no div element provided to the grid');\n            return;\n        }\n        if (!gridOptions) {\n            console.error('ag-Grid: no gridOptions provided to the grid');\n            return;\n        }\n        var debug = !!gridOptions.debug;\n        this.gridOptions = gridOptions;\n        var registeredModules = this.getRegisteredModules(params);\n        var beanClasses = this.createBeansList(registeredModules);\n        var providedBeanInstances = this.createProvidedBeans(eGridDiv, params);\n        if (!beanClasses) {\n            return;\n        } // happens when no row model found\n        var contextParams = {\n            providedBeanInstances: providedBeanInstances,\n            beanClasses: beanClasses,\n            debug: debug\n        };\n        this.logger = new Logger('ag-Grid', function () { return gridOptions.debug; });\n        var contextLogger = new Logger('Context', function () { return contextParams.debug; });\n        this.context = new Context(contextParams, contextLogger);\n        this.registerModuleUserComponents(registeredModules);\n        this.registerStackComponents(registeredModules);\n        var gridCoreClass = (params && params.rootComponent) || GridCore;\n        var gridCore = new gridCoreClass();\n        this.context.createBean(gridCore);\n        this.setColumnsAndData();\n        this.dispatchGridReadyEvent(gridOptions);\n        var isEnterprise = ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);\n        this.logger.log(\"initialised successfully, enterprise = \" + isEnterprise);\n    }\n    Grid.prototype.registerStackComponents = function (registeredModules) {\n        var agStackComponents = this.createAgStackComponentsList(registeredModules);\n        var agStackComponentsRegistry = this.context.getBean('agStackComponentsRegistry');\n        agStackComponentsRegistry.setupComponents(agStackComponents);\n    };\n    Grid.prototype.getRegisteredModules = function (params) {\n        var passedViaConstructor = params ? params.modules : null;\n        var registered = ModuleRegistry.getRegisteredModules();\n        var allModules = [];\n        var mapNames = {};\n        // adds to list and removes duplicates\n        function addModule(moduleBased, module) {\n            function addIndividualModule(module) {\n                if (!mapNames[module.moduleName]) {\n                    mapNames[module.moduleName] = true;\n                    allModules.push(module);\n                    ModuleRegistry.register(module, moduleBased);\n                }\n            }\n            addIndividualModule(module);\n            if (module.dependantModules) {\n                module.dependantModules.forEach(addModule.bind(null, moduleBased));\n            }\n        }\n        if (passedViaConstructor) {\n            passedViaConstructor.forEach(addModule.bind(null, true));\n        }\n        if (registered) {\n            registered.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));\n        }\n        return allModules;\n    };\n    Grid.prototype.registerModuleUserComponents = function (registeredModules) {\n        var userComponentRegistry = this.context.getBean('userComponentRegistry');\n        var moduleUserComps = this.extractModuleEntity(registeredModules, function (module) { return module.userComponents ? module.userComponents : []; });\n        moduleUserComps.forEach(function (compMeta) {\n            userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);\n        });\n    };\n    Grid.prototype.createProvidedBeans = function (eGridDiv, params) {\n        var frameworkOverrides = params ? params.frameworkOverrides : null;\n        if (_.missing(frameworkOverrides)) {\n            frameworkOverrides = new VanillaFrameworkOverrides();\n        }\n        var seed = {\n            gridOptions: this.gridOptions,\n            eGridDiv: eGridDiv,\n            $scope: params ? params.$scope : null,\n            $compile: params ? params.$compile : null,\n            quickFilterOnScope: params ? params.quickFilterOnScope : null,\n            globalEventListener: params ? params.globalEventListener : null,\n            frameworkOverrides: frameworkOverrides\n        };\n        if (params && params.providedBeanInstances) {\n            _.assign(seed, params.providedBeanInstances);\n        }\n        return seed;\n    };\n    Grid.prototype.createAgStackComponentsList = function (registeredModules) {\n        var components = [\n            { componentName: 'AgCheckbox', componentClass: AgCheckbox },\n            { componentName: 'AgRadioButton', componentClass: AgRadioButton },\n            { componentName: 'AgToggleButton', componentClass: AgToggleButton },\n            { componentName: 'AgInputTextField', componentClass: AgInputTextField },\n            { componentName: 'AgInputTextArea', componentClass: AgInputTextArea },\n            { componentName: 'AgInputNumberField', componentClass: AgInputNumberField },\n            { componentName: 'AgInputRange', componentClass: AgInputRange },\n            { componentName: 'AgSelect', componentClass: AgSelect },\n            { componentName: 'AgSlider', componentClass: AgSlider },\n            { componentName: 'AgAngleSelect', componentClass: AgAngleSelect },\n            { componentName: 'AgColorPicker', componentClass: AgColorPicker },\n            { componentName: 'AgGridComp', componentClass: GridPanel },\n            { componentName: 'AgHeaderRoot', componentClass: HeaderRootComp },\n            { componentName: 'AgPagination', componentClass: PaginationComp },\n            { componentName: 'AgOverlayWrapper', componentClass: OverlayWrapperComponent },\n            { componentName: 'AgGroupComponent', componentClass: AgGroupComponent },\n            { componentName: 'AgPanel', componentClass: AgPanel },\n            { componentName: 'AgDialog', componentClass: AgDialog }\n        ];\n        var moduleAgStackComps = this.extractModuleEntity(registeredModules, function (module) { return module.agStackComponents ? module.agStackComponents : []; });\n        components = components.concat(moduleAgStackComps);\n        return components;\n    };\n    Grid.prototype.createBeansList = function (registeredModules) {\n        var rowModelClass = this.getRowModelClass(registeredModules);\n        if (!rowModelClass) {\n            return undefined;\n        }\n        // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n        var beans = [\n            rowModelClass, Beans, RowPositionUtils, CellPositionUtils, HeaderPositionUtils,\n            PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils,\n            ComponentMetadataProvider, ResizeObserverService, UserComponentFactory,\n            MaxDivHeightScaler, AutoHeightCalculator, CellRendererFactory, HorizontalResizeService,\n            PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsWrapper,\n            PopupService, SelectionController, FilterManager, ColumnController, HeaderNavigationService,\n            PaginationProxy, RowRenderer, ExpressionService, ColumnFactory, TemplateService,\n            AlignedGridsService, NavigationService, ValueCache, ValueService, LoggerFactory,\n            ColumnUtils, AutoWidthCalculator, StandardMenuFactory, DragAndDropService, ColumnApi,\n            FocusController, MouseEventService, Environment, CellNavigationService, ValueFormatterService,\n            StylingService, ScrollVisibleService, SortController, ColumnHoverService, ColumnAnimationService,\n            SelectableService, AutoGroupColService, ChangeDetectionService, AnimationFrameService,\n            DetailRowCompCache, UndoRedoService, AgStackComponentsRegistry\n        ];\n        var moduleBeans = this.extractModuleEntity(registeredModules, function (module) { return module.beans ? module.beans : []; });\n        beans.push.apply(beans, moduleBeans);\n        // check for duplicates, as different modules could include the same beans that\n        // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n        var beansNoDuplicates = [];\n        beans.forEach(function (bean) {\n            if (beansNoDuplicates.indexOf(bean) < 0) {\n                beansNoDuplicates.push(bean);\n            }\n        });\n        return beansNoDuplicates;\n    };\n    Grid.prototype.extractModuleEntity = function (moduleEntities, extractor) {\n        return [].concat.apply([], moduleEntities.map(extractor));\n    };\n    Grid.prototype.setColumnsAndData = function () {\n        var gridOptionsWrapper = this.context.getBean('gridOptionsWrapper');\n        var columnController = this.context.getBean('columnController');\n        var columnDefs = gridOptionsWrapper.getColumnDefs();\n        if (_.exists(columnDefs)) {\n            columnController.setColumnDefs(columnDefs, \"gridInitializing\");\n        }\n        var rowModel = this.context.getBean('rowModel');\n        rowModel.start();\n    };\n    Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {\n        var eventService = this.context.getBean('eventService');\n        var readyEvent = {\n            type: Events.EVENT_GRID_READY,\n            api: gridOptions.api,\n            columnApi: gridOptions.columnApi\n        };\n        eventService.dispatchEvent(readyEvent);\n    };\n    Grid.prototype.getRowModelClass = function (registeredModules) {\n        var rowModelType = this.gridOptions.rowModelType;\n        //TODO: temporary measure before 'enterprise' is completely removed (similar handling in gridOptionsWrapper is also required)\n        if (rowModelType === 'enterprise') {\n            console.warn(\"ag-Grid: enterprise rowModel deprecated. Should now be called server side row model instead.\");\n            rowModelType = Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n        }\n        if (rowModelType === 'normal') {\n            console.warn(\"ag-Grid: normal rowModel deprecated. Should now be called client side row model instead.\");\n            rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        }\n        // default to client side\n        if (!rowModelType) {\n            rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        }\n        var rowModelClasses = {};\n        registeredModules.forEach(function (module) {\n            _.iterateObject(module.rowModels, function (key, value) {\n                rowModelClasses[key] = value;\n            });\n        });\n        var rowModelClass = rowModelClasses[rowModelType];\n        if (_.exists(rowModelClass)) {\n            return rowModelClass;\n        }\n        else {\n            if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {\n                console.error(\"ag-Grid: Row Model \\\"Infinite\\\" not found. Please ensure the \" + ModuleNames.InfiniteRowModelModule + \" is registered.';\");\n            }\n            console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);\n            if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {\n                console.error(\"ag-Grid: Row Model \\\"Viewport\\\" not found. Please ensure the ag-Grid Enterprise Module \" + ModuleNames.ViewportRowModelModule + \" is registered.';\");\n            }\n            if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {\n                console.error(\"ag-Grid: Row Model \\\"Server Side\\\" not found. Please ensure the ag-Grid Enterprise Module \" + ModuleNames.ServerSideRowModelModule + \" is registered.';\");\n            }\n            if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n                console.error(\"ag-Grid: Row Model \\\"Client Side\\\" not found. Please ensure the \" + ModuleNames.ClientSideRowModelModule + \" is registered.';\");\n            }\n            return undefined;\n        }\n    };\n    Grid.prototype.destroy = function () {\n        this.gridOptions.api.destroy();\n    };\n    return Grid;\n}());\nexport { Grid };\n"]},"metadata":{},"sourceType":"module"}