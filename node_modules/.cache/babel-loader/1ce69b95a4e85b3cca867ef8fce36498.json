{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { Constants } from '../constants';\nimport { exists } from './generic';\nimport { isBrowserEdge, isBrowserIE } from './browser';\nvar PRINTABLE_CHARACTERS = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!\"£$%^&*()_+-=[];\\'#,./\\\\|<>?:@~{}';\nvar NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';\nvar NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;\nexport function isKeyPressed(event, keyToCheck) {\n  return (event.which || event.keyCode) === keyToCheck;\n}\nexport function isCharacterKey(event) {\n  // from: https://stackoverflow.com/questions/4179708/how-to-detect-if-the-pressed-key-will-produce-a-character-inside-an-input-text\n  var which = event.which;\n\n  if (typeof which === 'number' && which) {\n    return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8 && event.which !== 16;\n  }\n\n  return which === undefined;\n}\nexport function isEventFromPrintableCharacter(event) {\n  var pressedChar = String.fromCharCode(event.charCode); // newline is an exception, as it counts as a printable character, but we don't\n  // want to start editing when it is pressed. without this check, if user is in chrome\n  // and editing a cell, and they press ctrl+enter, the cell stops editing, and then\n  // starts editing again with a blank value (two 'key down' events are fired). to\n  // test this, remove the line below, edit a cell in chrome and hit ctrl+enter while editing.\n  // https://ag-grid.atlassian.net/browse/AG-605\n\n  if (isKeyPressed(event, Constants.KEY_NEW_LINE)) {\n    return false;\n  } // no allowed printable chars have alt or ctrl key combinations\n\n\n  if (event.altKey || event.ctrlKey) {\n    return false;\n  }\n\n  if (exists(event.key)) {\n    // modern browser will implement key, so we return if key is length 1, eg if it is 'a' for the\n    // a key, or '2' for the '2' key. non-printable characters have names, eg 'Enter' or 'Backspace'.\n    var printableCharacter = event.key.length === 1; // IE11 & Edge treat the numpad del key differently - with numlock on we get \"Del\" for key,\n    // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers\n\n    var numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);\n    return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;\n  } // otherwise, for older browsers, we test against a list of characters, which doesn't include\n  // accents for non-English, but don't care much, as most users are on modern browsers\n\n\n  return PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;\n}\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {KeyboardEvent} keyboardEvent\n * @param {RowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\n\nexport function isUserSuppressingKeyboardEvent(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {\n  var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();\n  var colDefFunc = column.getColDef().suppressKeyboardEvent; // if no callbacks provided by user, then do nothing\n\n  if (!gridOptionsFunc && !colDefFunc) {\n    return false;\n  }\n\n  var params = {\n    event: keyboardEvent,\n    editing: editing,\n    column: column,\n    api: gridOptionsWrapper.getApi(),\n    node: rowNode,\n    data: rowNode.data,\n    colDef: column.getColDef(),\n    context: gridOptionsWrapper.getContext(),\n    columnApi: gridOptionsWrapper.getColumnApi()\n  }; // colDef get first preference on suppressing events\n\n  if (colDefFunc) {\n    var colDefFuncResult = colDefFunc(params); // if colDef func suppressed, then return now, no need to call gridOption func\n\n    if (colDefFuncResult) {\n      return true;\n    }\n  }\n\n  if (gridOptionsFunc) {\n    // if gridOption func, return the result\n    return gridOptionsFunc(params);\n  } // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n\n\n  return false;\n}\n\nfunction isNumpadDelWithNumlockOnForEdgeOrIe(event) {\n  return (isBrowserEdge() || isBrowserIE()) && event.key === NUMPAD_DEL_NUMLOCK_ON_KEY && event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;\n}","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/utils/keyboard.js"],"names":["Constants","exists","isBrowserEdge","isBrowserIE","PRINTABLE_CHARACTERS","NUMPAD_DEL_NUMLOCK_ON_KEY","NUMPAD_DEL_NUMLOCK_ON_CHARCODE","isKeyPressed","event","keyToCheck","which","keyCode","isCharacterKey","ctrlKey","metaKey","altKey","undefined","isEventFromPrintableCharacter","pressedChar","String","fromCharCode","charCode","KEY_NEW_LINE","key","printableCharacter","length","numpadDelWithNumlockOnForEdgeOrIe","isNumpadDelWithNumlockOnForEdgeOrIe","indexOf","isUserSuppressingKeyboardEvent","gridOptionsWrapper","keyboardEvent","rowNode","column","editing","gridOptionsFunc","getSuppressKeyboardEventFunc","colDefFunc","getColDef","suppressKeyboardEvent","params","api","getApi","node","data","colDef","context","getContext","columnApi","getColumnApi","colDefFuncResult"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { Constants } from '../constants';\nimport { exists } from './generic';\nimport { isBrowserEdge, isBrowserIE } from './browser';\nvar PRINTABLE_CHARACTERS = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!\"£$%^&*()_+-=[];\\'#,./\\\\|<>?:@~{}';\nvar NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';\nvar NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;\nexport function isKeyPressed(event, keyToCheck) {\n    return (event.which || event.keyCode) === keyToCheck;\n}\nexport function isCharacterKey(event) {\n    // from: https://stackoverflow.com/questions/4179708/how-to-detect-if-the-pressed-key-will-produce-a-character-inside-an-input-text\n    var which = event.which;\n    if (typeof which === 'number' && which) {\n        return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8 && event.which !== 16;\n    }\n    return which === undefined;\n}\nexport function isEventFromPrintableCharacter(event) {\n    var pressedChar = String.fromCharCode(event.charCode);\n    // newline is an exception, as it counts as a printable character, but we don't\n    // want to start editing when it is pressed. without this check, if user is in chrome\n    // and editing a cell, and they press ctrl+enter, the cell stops editing, and then\n    // starts editing again with a blank value (two 'key down' events are fired). to\n    // test this, remove the line below, edit a cell in chrome and hit ctrl+enter while editing.\n    // https://ag-grid.atlassian.net/browse/AG-605\n    if (isKeyPressed(event, Constants.KEY_NEW_LINE)) {\n        return false;\n    }\n    // no allowed printable chars have alt or ctrl key combinations\n    if (event.altKey || event.ctrlKey) {\n        return false;\n    }\n    if (exists(event.key)) {\n        // modern browser will implement key, so we return if key is length 1, eg if it is 'a' for the\n        // a key, or '2' for the '2' key. non-printable characters have names, eg 'Enter' or 'Backspace'.\n        var printableCharacter = event.key.length === 1;\n        // IE11 & Edge treat the numpad del key differently - with numlock on we get \"Del\" for key,\n        // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers\n        var numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);\n        return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;\n    }\n    // otherwise, for older browsers, we test against a list of characters, which doesn't include\n    // accents for non-English, but don't care much, as most users are on modern browsers\n    return PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;\n}\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {KeyboardEvent} keyboardEvent\n * @param {RowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\nexport function isUserSuppressingKeyboardEvent(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {\n    var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();\n    var colDefFunc = column.getColDef().suppressKeyboardEvent;\n    // if no callbacks provided by user, then do nothing\n    if (!gridOptionsFunc && !colDefFunc) {\n        return false;\n    }\n    var params = {\n        event: keyboardEvent,\n        editing: editing,\n        column: column,\n        api: gridOptionsWrapper.getApi(),\n        node: rowNode,\n        data: rowNode.data,\n        colDef: column.getColDef(),\n        context: gridOptionsWrapper.getContext(),\n        columnApi: gridOptionsWrapper.getColumnApi()\n    };\n    // colDef get first preference on suppressing events\n    if (colDefFunc) {\n        var colDefFuncResult = colDefFunc(params);\n        // if colDef func suppressed, then return now, no need to call gridOption func\n        if (colDefFuncResult) {\n            return true;\n        }\n    }\n    if (gridOptionsFunc) {\n        // if gridOption func, return the result\n        return gridOptionsFunc(params);\n    }\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n    return false;\n}\nfunction isNumpadDelWithNumlockOnForEdgeOrIe(event) {\n    return (isBrowserEdge() || isBrowserIE()) &&\n        event.key === NUMPAD_DEL_NUMLOCK_ON_KEY &&\n        event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;\n}\n"]},"metadata":{},"sourceType":"module"}