{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\n/** Provides sync access to async component. Date component can be lazy created - this class encapsulates\n * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */\nvar DateCompWrapper =\n/** @class */\nfunction () {\n  function DateCompWrapper(context, userComponentFactory, dateComponentParams, eParent) {\n    var _this = this;\n\n    this.alive = true;\n    this.context = context;\n    userComponentFactory.newDateComponent(dateComponentParams).then(function (dateComp) {\n      // because async, check the filter still exists after component comes back\n      if (!_this.alive) {\n        context.destroyBean(dateComp);\n        return;\n      }\n\n      _this.dateComp = dateComp;\n      eParent.appendChild(dateComp.getGui());\n\n      if (dateComp.afterGuiAttached) {\n        dateComp.afterGuiAttached();\n      }\n\n      if (_this.tempValue) {\n        dateComp.setDate(_this.tempValue);\n      }\n    });\n  }\n\n  DateCompWrapper.prototype.destroy = function () {\n    this.alive = false;\n    this.dateComp = this.context.destroyBean(this.dateComp);\n  };\n\n  DateCompWrapper.prototype.getDate = function () {\n    return this.dateComp ? this.dateComp.getDate() : this.tempValue;\n  };\n\n  DateCompWrapper.prototype.setDate = function (value) {\n    if (this.dateComp) {\n      this.dateComp.setDate(value);\n    } else {\n      this.tempValue = value;\n    }\n  };\n\n  DateCompWrapper.prototype.setInputPlaceholder = function (placeholder) {\n    if (this.dateComp && this.dateComp.setInputPlaceholder) {\n      this.dateComp.setInputPlaceholder(placeholder);\n    }\n  };\n\n  return DateCompWrapper;\n}();\n\nexport { DateCompWrapper };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/filter/provided/date/dateCompWrapper.js"],"names":["DateCompWrapper","context","userComponentFactory","dateComponentParams","eParent","_this","alive","newDateComponent","then","dateComp","destroyBean","appendChild","getGui","afterGuiAttached","tempValue","setDate","prototype","destroy","getDate","value","setInputPlaceholder","placeholder"],"mappings":"AAAA;;;;;;;AAMA;;AAEA,IAAIA,eAAe;AAAG;AAAe,YAAY;AAC7C,WAASA,eAAT,CAAyBC,OAAzB,EAAkCC,oBAAlC,EAAwDC,mBAAxD,EAA6EC,OAA7E,EAAsF;AAClF,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKL,OAAL,GAAeA,OAAf;AACAC,IAAAA,oBAAoB,CAACK,gBAArB,CAAsCJ,mBAAtC,EAA2DK,IAA3D,CAAgE,UAAUC,QAAV,EAAoB;AAChF;AACA,UAAI,CAACJ,KAAK,CAACC,KAAX,EAAkB;AACdL,QAAAA,OAAO,CAACS,WAAR,CAAoBD,QAApB;AACA;AACH;;AACDJ,MAAAA,KAAK,CAACI,QAAN,GAAiBA,QAAjB;AACAL,MAAAA,OAAO,CAACO,WAAR,CAAoBF,QAAQ,CAACG,MAAT,EAApB;;AACA,UAAIH,QAAQ,CAACI,gBAAb,EAA+B;AAC3BJ,QAAAA,QAAQ,CAACI,gBAAT;AACH;;AACD,UAAIR,KAAK,CAACS,SAAV,EAAqB;AACjBL,QAAAA,QAAQ,CAACM,OAAT,CAAiBV,KAAK,CAACS,SAAvB;AACH;AACJ,KAdD;AAeH;;AACDd,EAAAA,eAAe,CAACgB,SAAhB,CAA0BC,OAA1B,GAAoC,YAAY;AAC5C,SAAKX,KAAL,GAAa,KAAb;AACA,SAAKG,QAAL,GAAgB,KAAKR,OAAL,CAAaS,WAAb,CAAyB,KAAKD,QAA9B,CAAhB;AACH,GAHD;;AAIAT,EAAAA,eAAe,CAACgB,SAAhB,CAA0BE,OAA1B,GAAoC,YAAY;AAC5C,WAAO,KAAKT,QAAL,GAAgB,KAAKA,QAAL,CAAcS,OAAd,EAAhB,GAA0C,KAAKJ,SAAtD;AACH,GAFD;;AAGAd,EAAAA,eAAe,CAACgB,SAAhB,CAA0BD,OAA1B,GAAoC,UAAUI,KAAV,EAAiB;AACjD,QAAI,KAAKV,QAAT,EAAmB;AACf,WAAKA,QAAL,CAAcM,OAAd,CAAsBI,KAAtB;AACH,KAFD,MAGK;AACD,WAAKL,SAAL,GAAiBK,KAAjB;AACH;AACJ,GAPD;;AAQAnB,EAAAA,eAAe,CAACgB,SAAhB,CAA0BI,mBAA1B,GAAgD,UAAUC,WAAV,EAAuB;AACnE,QAAI,KAAKZ,QAAL,IAAiB,KAAKA,QAAL,CAAcW,mBAAnC,EAAwD;AACpD,WAAKX,QAAL,CAAcW,mBAAd,CAAkCC,WAAlC;AACH;AACJ,GAJD;;AAKA,SAAOrB,eAAP;AACH,CA1CoC,EAArC;;AA2CA,SAASA,eAAT","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n/** Provides sync access to async component. Date component can be lazy created - this class encapsulates\n * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */\nvar DateCompWrapper = /** @class */ (function () {\n    function DateCompWrapper(context, userComponentFactory, dateComponentParams, eParent) {\n        var _this = this;\n        this.alive = true;\n        this.context = context;\n        userComponentFactory.newDateComponent(dateComponentParams).then(function (dateComp) {\n            // because async, check the filter still exists after component comes back\n            if (!_this.alive) {\n                context.destroyBean(dateComp);\n                return;\n            }\n            _this.dateComp = dateComp;\n            eParent.appendChild(dateComp.getGui());\n            if (dateComp.afterGuiAttached) {\n                dateComp.afterGuiAttached();\n            }\n            if (_this.tempValue) {\n                dateComp.setDate(_this.tempValue);\n            }\n        });\n    }\n    DateCompWrapper.prototype.destroy = function () {\n        this.alive = false;\n        this.dateComp = this.context.destroyBean(this.dateComp);\n    };\n    DateCompWrapper.prototype.getDate = function () {\n        return this.dateComp ? this.dateComp.getDate() : this.tempValue;\n    };\n    DateCompWrapper.prototype.setDate = function (value) {\n        if (this.dateComp) {\n            this.dateComp.setDate(value);\n        }\n        else {\n            this.tempValue = value;\n        }\n    };\n    DateCompWrapper.prototype.setInputPlaceholder = function (placeholder) {\n        if (this.dateComp && this.dateComp.setInputPlaceholder) {\n            this.dateComp.setInputPlaceholder(placeholder);\n        }\n    };\n    return DateCompWrapper;\n}());\nexport { DateCompWrapper };\n"]},"metadata":{},"sourceType":"module"}