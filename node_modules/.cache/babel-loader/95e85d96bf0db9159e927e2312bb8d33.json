{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { Constants, _ } from '@ag-grid-community/core';\nimport { RowType, BaseGridSerializingSession } from \"@ag-grid-community/csv-export\";\n\nvar ExcelXmlSerializingSession =\n/** @class */\nfunction (_super) {\n  __extends(ExcelXmlSerializingSession, _super);\n\n  function ExcelXmlSerializingSession(config) {\n    var _this = _super.call(this, config) || this;\n\n    _this.mixedStyles = {};\n    _this.mixedStyleCounter = 0;\n    _this.rows = [];\n    _this.config = _.assign({}, config);\n    _this.stylesByIds = {};\n\n    _this.config.baseExcelStyles.forEach(function (style) {\n      _this.stylesByIds[style.id] = style;\n    });\n\n    _this.excelStyles = __spreadArrays(_this.config.baseExcelStyles);\n    return _this;\n  }\n\n  ExcelXmlSerializingSession.prototype.addCustomContent = function (customContent) {\n    var _this = this;\n\n    customContent.forEach(function (cells) {\n      return _this.rows.push({\n        cells: cells\n      });\n    });\n  };\n\n  ExcelXmlSerializingSession.prototype.prepare = function (columnsToExport) {\n    var _this = this;\n\n    _super.prototype.prepare.call(this, columnsToExport);\n\n    this.cols = columnsToExport.map(function (col, i) {\n      return _this.convertColumnToExcel(col, i);\n    });\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n    var _this = this;\n\n    var currentCells = [];\n    this.rows.push({\n      cells: currentCells,\n      height: this.config.headerRowHeight\n    });\n    return {\n      onColumn: function onColumn(header, index, span) {\n        var styleIds = _this.config.styleLinker(RowType.HEADER_GROUPING, 1, index, \"grouping-\" + header, undefined, undefined);\n\n        currentCells.push(_this.createMergedCell(styleIds && styleIds.length > 0 ? styleIds[0] : undefined, \"String\", header, span));\n      }\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewHeaderRow = function () {\n    return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewBodyRow = function () {\n    return this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewRow = function (onNewColumnAccumulator, height) {\n    var currentCells = [];\n    this.rows.push({\n      cells: currentCells,\n      height: height\n    });\n    return {\n      onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    return function (column, index) {\n      var nameForCol = _this.extractHeaderValue(column);\n\n      var styleIds = _this.config.styleLinker(RowType.HEADER, rowIndex, index, nameForCol, column, undefined);\n\n      currentCells.push(_this.createCell(styleIds && styleIds.length > 0 ? styleIds[0] : undefined, 'String', nameForCol));\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.parse = function () {\n    // adding custom content might have made some rows wider than the grid, so add new columns\n    var longestRow = this.rows.reduce(function (a, b) {\n      return Math.max(a, b.cells.length);\n    }, 0);\n\n    while (this.cols.length < longestRow) {\n      this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));\n    }\n\n    var data = [{\n      name: this.config.sheetName,\n      table: {\n        columns: this.cols,\n        rows: this.rows\n      }\n    }];\n    return this.createExcel(data);\n  };\n\n  ExcelXmlSerializingSession.prototype.createExcel = function (data) {\n    return this.config.excelFactory.createExcel(this.excelStyles, data, []);\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    return function (column, index, node) {\n      var valueForCell = _this.extractRowCellValue(column, index, Constants.EXPORT_TYPE_EXCEL, node);\n\n      var styleIds = _this.config.styleLinker(RowType.BODY, rowIndex, index, valueForCell, column, node);\n\n      var excelStyleId;\n\n      if (styleIds && styleIds.length == 1) {\n        excelStyleId = styleIds[0];\n      } else if (styleIds && styleIds.length > 1) {\n        var key = styleIds.join(\"-\");\n\n        if (!_this.mixedStyles[key]) {\n          _this.addNewMixedStyle(styleIds);\n        }\n\n        excelStyleId = _this.mixedStyles[key].excelID;\n      }\n\n      currentCells.push(_this.createCell(excelStyleId, _this.getDataTypeForValue(valueForCell), valueForCell));\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.getDataTypeForValue = function (valueForCell) {\n    return _.isNumeric(valueForCell) ? 'Number' : 'String';\n  };\n\n  ExcelXmlSerializingSession.prototype.addNewMixedStyle = function (styleIds) {\n    var _this = this;\n\n    this.mixedStyleCounter += 1;\n    var excelId = 'mixedStyle' + this.mixedStyleCounter;\n    var resultantStyle = {};\n    styleIds.forEach(function (styleId) {\n      _this.excelStyles.forEach(function (excelStyle) {\n        if (excelStyle.id === styleId) {\n          _.mergeDeep(resultantStyle, _.deepCloneObject(excelStyle));\n        }\n      });\n    });\n    resultantStyle.id = excelId;\n    resultantStyle.name = excelId;\n    var key = styleIds.join(\"-\");\n    this.mixedStyles[key] = {\n      excelID: excelId,\n      key: key,\n      result: resultantStyle\n    };\n    this.excelStyles.push(resultantStyle);\n    this.stylesByIds[excelId] = resultantStyle;\n  };\n\n  ExcelXmlSerializingSession.prototype.styleExists = function (styleId) {\n    if (styleId == null) {\n      return false;\n    }\n\n    return this.stylesByIds[styleId];\n  };\n\n  ExcelXmlSerializingSession.prototype.createCell = function (styleId, type, value) {\n    var _this = this;\n\n    var actualStyle = styleId && this.stylesByIds[styleId];\n    var styleExists = actualStyle !== undefined;\n\n    function getType() {\n      if (styleExists && actualStyle.dataType) {\n        switch (actualStyle.dataType) {\n          case 'string':\n            return 'String';\n\n          case 'number':\n            return 'Number';\n\n          case 'dateTime':\n            return 'DateTime';\n\n          case 'error':\n            return 'Error';\n\n          case 'boolean':\n            return 'Boolean';\n\n          default:\n            console.warn(\"ag-grid: Unrecognized data type for excel export [\" + actualStyle.id + \".dataType=\" + actualStyle.dataType + \"]\");\n        }\n      }\n\n      return type;\n    }\n\n    var typeTransformed = getType();\n\n    var massageText = function massageText(val) {\n      if (_this.config.suppressTextAsCDATA) {\n        return _.escape(val);\n      }\n\n      var cdataStart = '<![CDATA[';\n      var cdataEnd = ']]>';\n      var cdataEndRegex = new RegExp(cdataEnd, \"g\");\n      return cdataStart // CDATA sections are closed by the character sequence ']]>' and there is no\n      // way of escaping this, so if the text contains the offending sequence, emit\n      // multiple CDATA sections and split the characters between them.\n      + String(val).replace(cdataEndRegex, ']]' + cdataEnd + cdataStart + '>') + cdataEnd;\n    };\n\n    var convertBoolean = function convertBoolean(val) {\n      if (!val || val === '0' || val === 'false') {\n        return '0';\n      }\n\n      return '1';\n    };\n\n    return {\n      styleId: styleExists ? styleId : undefined,\n      data: {\n        type: typeTransformed,\n        value: typeTransformed === 'String' ? massageText(value) : typeTransformed === 'Number' ? Number(value).valueOf() + '' : typeTransformed === 'Boolean' ? convertBoolean(value) : value\n      }\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n    return {\n      styleId: this.styleExists(styleId) ? styleId : undefined,\n      data: {\n        type: type,\n        value: value\n      },\n      mergeAcross: numOfCells\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.convertColumnToExcel = function (column, index) {\n    var columnWidth = this.config.columnWidth;\n\n    if (columnWidth) {\n      if (typeof columnWidth === 'number') {\n        return {\n          width: columnWidth\n        };\n      } else {\n        return {\n          width: columnWidth({\n            column: column,\n            index: index\n          })\n        };\n      }\n    }\n\n    if (column) {\n      var smallestUsefulWidth = 75;\n      return {\n        width: Math.max(column.getActualWidth(), smallestUsefulWidth)\n      };\n    }\n\n    return {};\n  };\n\n  return ExcelXmlSerializingSession;\n}(BaseGridSerializingSession);\n\nexport { ExcelXmlSerializingSession };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/excel-export/dist/es6/excelExport/excelXmlSerializingSession.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__spreadArrays","s","i","il","arguments","length","r","k","a","j","jl","Constants","_","RowType","BaseGridSerializingSession","ExcelXmlSerializingSession","_super","config","_this","call","mixedStyles","mixedStyleCounter","rows","assign","stylesByIds","baseExcelStyles","forEach","style","id","excelStyles","addCustomContent","customContent","cells","push","prepare","columnsToExport","cols","map","col","convertColumnToExcel","onNewHeaderGroupingRow","currentCells","height","headerRowHeight","onColumn","header","index","span","styleIds","styleLinker","HEADER_GROUPING","undefined","createMergedCell","onNewHeaderRow","onNewRow","onNewHeaderColumn","onNewBodyRow","onNewBodyColumn","rowHeight","onNewColumnAccumulator","bind","rowIndex","column","nameForCol","extractHeaderValue","HEADER","createCell","parse","longestRow","reduce","Math","max","data","name","sheetName","table","columns","createExcel","excelFactory","node","valueForCell","extractRowCellValue","EXPORT_TYPE_EXCEL","BODY","excelStyleId","key","join","addNewMixedStyle","excelID","getDataTypeForValue","isNumeric","excelId","resultantStyle","styleId","excelStyle","mergeDeep","deepCloneObject","result","styleExists","type","value","actualStyle","getType","dataType","console","warn","typeTransformed","massageText","val","suppressTextAsCDATA","escape","cdataStart","cdataEnd","cdataEndRegex","RegExp","String","replace","convertBoolean","Number","valueOf","numOfCells","mergeAcross","columnWidth","width","smallestUsefulWidth","getActualWidth"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { Constants, _ } from '@ag-grid-community/core';\nimport { RowType, BaseGridSerializingSession } from \"@ag-grid-community/csv-export\";\nvar ExcelXmlSerializingSession = /** @class */ (function (_super) {\n    __extends(ExcelXmlSerializingSession, _super);\n    function ExcelXmlSerializingSession(config) {\n        var _this = _super.call(this, config) || this;\n        _this.mixedStyles = {};\n        _this.mixedStyleCounter = 0;\n        _this.rows = [];\n        _this.config = _.assign({}, config);\n        _this.stylesByIds = {};\n        _this.config.baseExcelStyles.forEach(function (style) {\n            _this.stylesByIds[style.id] = style;\n        });\n        _this.excelStyles = __spreadArrays(_this.config.baseExcelStyles);\n        return _this;\n    }\n    ExcelXmlSerializingSession.prototype.addCustomContent = function (customContent) {\n        var _this = this;\n        customContent.forEach(function (cells) { return _this.rows.push({ cells: cells }); });\n    };\n    ExcelXmlSerializingSession.prototype.prepare = function (columnsToExport) {\n        var _this = this;\n        _super.prototype.prepare.call(this, columnsToExport);\n        this.cols = columnsToExport.map(function (col, i) { return _this.convertColumnToExcel(col, i); });\n    };\n    ExcelXmlSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        var _this = this;\n        var currentCells = [];\n        this.rows.push({\n            cells: currentCells,\n            height: this.config.headerRowHeight\n        });\n        return {\n            onColumn: function (header, index, span) {\n                var styleIds = _this.config.styleLinker(RowType.HEADER_GROUPING, 1, index, \"grouping-\" + header, undefined, undefined);\n                currentCells.push(_this.createMergedCell((styleIds && styleIds.length > 0) ? styleIds[0] : undefined, \"String\", header, span));\n            }\n        };\n    };\n    ExcelXmlSerializingSession.prototype.onNewHeaderRow = function () {\n        return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);\n    };\n    ExcelXmlSerializingSession.prototype.onNewBodyRow = function () {\n        return this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);\n    };\n    ExcelXmlSerializingSession.prototype.onNewRow = function (onNewColumnAccumulator, height) {\n        var currentCells = [];\n        this.rows.push({\n            cells: currentCells,\n            height: height\n        });\n        return {\n            onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n        };\n    };\n    ExcelXmlSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n        var _this = this;\n        return function (column, index) {\n            var nameForCol = _this.extractHeaderValue(column);\n            var styleIds = _this.config.styleLinker(RowType.HEADER, rowIndex, index, nameForCol, column, undefined);\n            currentCells.push(_this.createCell((styleIds && styleIds.length > 0) ? styleIds[0] : undefined, 'String', nameForCol));\n        };\n    };\n    ExcelXmlSerializingSession.prototype.parse = function () {\n        // adding custom content might have made some rows wider than the grid, so add new columns\n        var longestRow = this.rows.reduce(function (a, b) { return Math.max(a, b.cells.length); }, 0);\n        while (this.cols.length < longestRow) {\n            this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));\n        }\n        var data = [{\n                name: this.config.sheetName,\n                table: {\n                    columns: this.cols,\n                    rows: this.rows\n                }\n            }];\n        return this.createExcel(data);\n    };\n    ExcelXmlSerializingSession.prototype.createExcel = function (data) {\n        return this.config.excelFactory.createExcel(this.excelStyles, data, []);\n    };\n    ExcelXmlSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {\n        var _this = this;\n        return function (column, index, node) {\n            var valueForCell = _this.extractRowCellValue(column, index, Constants.EXPORT_TYPE_EXCEL, node);\n            var styleIds = _this.config.styleLinker(RowType.BODY, rowIndex, index, valueForCell, column, node);\n            var excelStyleId;\n            if (styleIds && styleIds.length == 1) {\n                excelStyleId = styleIds[0];\n            }\n            else if (styleIds && styleIds.length > 1) {\n                var key = styleIds.join(\"-\");\n                if (!_this.mixedStyles[key]) {\n                    _this.addNewMixedStyle(styleIds);\n                }\n                excelStyleId = _this.mixedStyles[key].excelID;\n            }\n            currentCells.push(_this.createCell(excelStyleId, _this.getDataTypeForValue(valueForCell), valueForCell));\n        };\n    };\n    ExcelXmlSerializingSession.prototype.getDataTypeForValue = function (valueForCell) {\n        return _.isNumeric(valueForCell) ? 'Number' : 'String';\n    };\n    ExcelXmlSerializingSession.prototype.addNewMixedStyle = function (styleIds) {\n        var _this = this;\n        this.mixedStyleCounter += 1;\n        var excelId = 'mixedStyle' + this.mixedStyleCounter;\n        var resultantStyle = {};\n        styleIds.forEach(function (styleId) {\n            _this.excelStyles.forEach(function (excelStyle) {\n                if (excelStyle.id === styleId) {\n                    _.mergeDeep(resultantStyle, _.deepCloneObject(excelStyle));\n                }\n            });\n        });\n        resultantStyle.id = excelId;\n        resultantStyle.name = excelId;\n        var key = styleIds.join(\"-\");\n        this.mixedStyles[key] = {\n            excelID: excelId,\n            key: key,\n            result: resultantStyle\n        };\n        this.excelStyles.push(resultantStyle);\n        this.stylesByIds[excelId] = resultantStyle;\n    };\n    ExcelXmlSerializingSession.prototype.styleExists = function (styleId) {\n        if (styleId == null) {\n            return false;\n        }\n        return this.stylesByIds[styleId];\n    };\n    ExcelXmlSerializingSession.prototype.createCell = function (styleId, type, value) {\n        var _this = this;\n        var actualStyle = styleId && this.stylesByIds[styleId];\n        var styleExists = actualStyle !== undefined;\n        function getType() {\n            if (styleExists &&\n                actualStyle.dataType) {\n                switch (actualStyle.dataType) {\n                    case 'string':\n                        return 'String';\n                    case 'number':\n                        return 'Number';\n                    case 'dateTime':\n                        return 'DateTime';\n                    case 'error':\n                        return 'Error';\n                    case 'boolean':\n                        return 'Boolean';\n                    default:\n                        console.warn(\"ag-grid: Unrecognized data type for excel export [\" + actualStyle.id + \".dataType=\" + actualStyle.dataType + \"]\");\n                }\n            }\n            return type;\n        }\n        var typeTransformed = getType();\n        var massageText = function (val) {\n            if (_this.config.suppressTextAsCDATA) {\n                return _.escape(val);\n            }\n            var cdataStart = '<![CDATA[';\n            var cdataEnd = ']]>';\n            var cdataEndRegex = new RegExp(cdataEnd, \"g\");\n            return cdataStart\n                // CDATA sections are closed by the character sequence ']]>' and there is no\n                // way of escaping this, so if the text contains the offending sequence, emit\n                // multiple CDATA sections and split the characters between them.\n                + String(val).replace(cdataEndRegex, ']]' + cdataEnd + cdataStart + '>')\n                + cdataEnd;\n        };\n        var convertBoolean = function (val) {\n            if (!val || val === '0' || val === 'false') {\n                return '0';\n            }\n            return '1';\n        };\n        return {\n            styleId: styleExists ? styleId : undefined,\n            data: {\n                type: typeTransformed,\n                value: typeTransformed === 'String' ? massageText(value) :\n                    typeTransformed === 'Number' ? Number(value).valueOf() + '' :\n                        typeTransformed === 'Boolean' ? convertBoolean(value) :\n                            value\n            }\n        };\n    };\n    ExcelXmlSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n        return {\n            styleId: this.styleExists(styleId) ? styleId : undefined,\n            data: {\n                type: type,\n                value: value\n            },\n            mergeAcross: numOfCells\n        };\n    };\n    ExcelXmlSerializingSession.prototype.convertColumnToExcel = function (column, index) {\n        var columnWidth = this.config.columnWidth;\n        if (columnWidth) {\n            if (typeof columnWidth === 'number') {\n                return { width: columnWidth };\n            }\n            else {\n                return { width: columnWidth({ column: column, index: index }) };\n            }\n        }\n        if (column) {\n            var smallestUsefulWidth = 75;\n            return { width: Math.max(column.getActualWidth(), smallestUsefulWidth) };\n        }\n        return {};\n    };\n    return ExcelXmlSerializingSession;\n}(BaseGridSerializingSession));\nexport { ExcelXmlSerializingSession };\n"]},"metadata":{},"sourceType":"module"}