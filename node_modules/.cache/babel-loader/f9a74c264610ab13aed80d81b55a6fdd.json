{"ast":null,"code":"import { CartesianChart } from \"./chart/cartesianChart\";\nimport { PolarChart } from \"./chart/polarChart\";\nimport { LineSeries } from \"./chart/series/cartesian/lineSeries\";\nimport { ScatterSeries } from \"./chart/series/cartesian/scatterSeries\";\nimport { BarSeries } from \"./chart/series/cartesian/barSeries\";\nimport { AreaSeries } from \"./chart/series/cartesian/areaSeries\";\nimport { HistogramSeries } from \"./chart/series/cartesian/histogramSeries\";\nimport { PieSeries } from \"./chart/series/polar/pieSeries\";\nimport { DropShadow } from \"./scene/dropShadow\";\nimport { CategoryAxis } from \"./chart/axis/categoryAxis\";\nimport { NumberAxis } from \"./chart/axis/numberAxis\";\nimport { Padding } from \"./util/padding\";\nimport { Caption } from \"./caption\";\nimport { GroupedCategoryAxis } from \"./chart/axis/groupedCategoryAxis\";\nimport { GroupedCategoryChart } from \"./chart/groupedCategoryChart\";\nimport { Circle } from \"./chart/marker/circle\";\nimport { Cross } from \"./chart/marker/cross\";\nimport { Diamond } from \"./chart/marker/diamond\";\nimport { Plus } from \"./chart/marker/plus\";\nimport { Square } from \"./chart/marker/square\";\nimport { Triangle } from \"./chart/marker/triangle\";\nimport { ChartAxisPosition } from \"./chart/chartAxis\";\nimport { convertToMap } from \"./util/map\";\nimport { TimeAxis } from \"./chart/axis/timeAxis\";\n\nvar ChartBuilder =\n/** @class */\nfunction () {\n  function ChartBuilder() {}\n\n  ChartBuilder.createCartesianChart = function (container, xAxis, yAxis, document) {\n    var chart = new CartesianChart(document);\n    chart.container = container;\n    xAxis.position = ChartAxisPosition.Bottom;\n    yAxis.position = ChartAxisPosition.Left;\n    chart.axes = [xAxis, yAxis];\n    return chart;\n  };\n\n  ChartBuilder.createGroupedCategoryChart = function (container, xAxis, yAxis, document) {\n    var chart = new GroupedCategoryChart(document);\n    chart.container = container;\n    xAxis.position = ChartAxisPosition.Bottom;\n    yAxis.position = ChartAxisPosition.Left;\n    chart.axes = [xAxis, yAxis];\n    return chart;\n  };\n\n  ChartBuilder.createBarChart = function (container, options) {\n    var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'number'), ChartBuilder.createAxis(options.yAxis, 'category'), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initBarSeries(new BarSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createGroupedBarChart = function (container, options) {\n    var chart = this.createGroupedCategoryChart(container, ChartBuilder.createAxis(options.xAxis, 'number'), ChartBuilder.createGroupedCategoryAxis(options.yAxis), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initBarSeries(new BarSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createColumnChart = function (container, options) {\n    var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'category'), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initBarSeries(new BarSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createGroupedColumnChart = function (container, options) {\n    var chart = this.createGroupedCategoryChart(container, ChartBuilder.createGroupedCategoryAxis(options.xAxis), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initBarSeries(new BarSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createLineChart = function (container, options) {\n    var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'category'), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initLineSeries(new LineSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createGroupedLineChart = function (container, options) {\n    var chart = this.createGroupedCategoryChart(container, ChartBuilder.createGroupedCategoryAxis(options.xAxis), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initLineSeries(new LineSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createScatterChart = function (container, options) {\n    var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'number'), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initScatterSeries(new ScatterSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createAreaChart = function (container, options) {\n    var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'category'), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initAreaSeries(new AreaSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createGroupedAreaChart = function (container, options) {\n    var chart = this.createGroupedCategoryChart(container, ChartBuilder.createGroupedCategoryAxis(options.xAxis), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initAreaSeries(new AreaSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createHistogramChart = function (container, options) {\n    var chart = this.createCartesianChart(container, ChartBuilder.createNumberAxis(options.xAxis), ChartBuilder.createNumberAxis(options.yAxis), options.document);\n    ChartBuilder.initCartesianChart(chart, options);\n    return chart;\n  };\n\n  ChartBuilder.createPolarChart = function (container) {\n    var chart = new PolarChart();\n    chart.container = container;\n    return chart;\n  };\n\n  ChartBuilder.createDoughnutChart = function (container, options) {\n    return this.createPieChart(container, options);\n  };\n\n  ChartBuilder.createPieChart = function (container, options) {\n    var chart = this.createPolarChart(container);\n    ChartBuilder.initChart(chart, options);\n\n    if (options.series) {\n      chart.series = options.series.map(function (s) {\n        return ChartBuilder.initPieSeries(new PieSeries(), s);\n      });\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.createSeries = function (options) {\n    switch (options && options.type) {\n      case 'line':\n        return ChartBuilder.initLineSeries(new LineSeries(), options);\n\n      case 'scatter':\n        return ChartBuilder.initScatterSeries(new ScatterSeries(), options);\n\n      case 'bar':\n        return ChartBuilder.initBarSeries(new BarSeries(), options);\n\n      case 'area':\n        return ChartBuilder.initAreaSeries(new AreaSeries(), options);\n\n      case 'pie':\n        return ChartBuilder.initPieSeries(new PieSeries(), options);\n\n      case 'histogram':\n        return ChartBuilder.initHistogramSeries(new HistogramSeries(), options);\n\n      default:\n        return null;\n    }\n  };\n\n  ChartBuilder.initCartesianChart = function (chart, options) {\n    if (options.navigator !== undefined) {\n      ChartBuilder.initNavigator(chart.navigator, options.navigator);\n    }\n\n    return this.initChart(chart, options);\n  };\n\n  ChartBuilder.initChart = function (chart, options) {\n    this.setValueIfExists(chart, 'width', options.width);\n    this.setValueIfExists(chart, 'height', options.height);\n    this.setValueIfExists(chart, 'tooltipClass', options.tooltipClass);\n    this.setTransformedValueIfExists(chart, 'title', function (t) {\n      return ChartBuilder.createTitle(t);\n    }, options.title);\n    this.setTransformedValueIfExists(chart, 'subtitle', function (t) {\n      return ChartBuilder.createSubtitle(t);\n    }, options.subtitle);\n    this.setTransformedValueIfExists(chart, 'padding', function (p) {\n      return new Padding(p.top, p.right, p.bottom, p.left);\n    }, options.padding);\n\n    if (options.background) {\n      this.setValueIfExists(chart.background, 'fill', options.background.fill);\n      this.setValueIfExists(chart.background, 'visible', options.background.visible);\n    }\n\n    if (options.legend !== undefined) {\n      ChartBuilder.initLegend(chart.legend, options.legend);\n    }\n\n    var listeners = options.listeners;\n\n    if (listeners) {\n      for (var key in listeners) {\n        if (listeners.hasOwnProperty(key)) {\n          var listener = listeners[key];\n\n          if (typeof listener === 'function') {\n            chart.addEventListener(key, listener);\n          }\n        }\n      }\n    }\n\n    return chart;\n  };\n\n  ChartBuilder.initSeries = function (series, options) {\n    this.setValueIfExists(series, 'visible', options.visible);\n    this.setValueIfExists(series, 'showInLegend', options.showInLegend);\n    this.setValueIfExists(series, 'data', options.data);\n    var listeners = options.listeners;\n\n    if (listeners) {\n      for (var key in listeners) {\n        if (listeners.hasOwnProperty(key)) {\n          var listener = listeners[key];\n\n          if (typeof listener === 'function') {\n            series.addEventListener(key, listener);\n          }\n        }\n      }\n    }\n\n    return series;\n  };\n\n  ChartBuilder.initLineSeries = function (series, options) {\n    ChartBuilder.initSeries(series, options);\n    this.setValueIfExists(series, 'title', options.title);\n    var field = options.field,\n        fill = options.fill,\n        stroke = options.stroke,\n        highlightStyle = options.highlightStyle,\n        marker = options.marker,\n        tooltip = options.tooltip;\n\n    if (field) {\n      this.setValueIfExists(series, 'xKey', field.xKey);\n      this.setValueIfExists(series, 'xName', field.xName);\n      this.setValueIfExists(series, 'yKey', field.yKey);\n      this.setValueIfExists(series, 'yName', field.yName);\n    }\n\n    if (fill) {\n      this.setValueIfExists(series.marker, 'fill', fill.color); // default marker to same fill as series\n      // this.setValueIfExists(series.marker, 'fill', fill.color);\n    }\n\n    if (stroke) {\n      this.setValueIfExists(series, 'stroke', stroke.color);\n      this.setValueIfExists(series, 'strokeWidth', stroke.width); // default marker to same stroke as series\n      // this.setValueIfExists(series.marker, 'stroke', stroke.color);\n      // this.setValueIfExists(series.marker, 'strokeWidth', stroke.width);\n    }\n\n    if (highlightStyle) {\n      this.initHighlightStyle(series.highlightStyle, highlightStyle);\n    }\n\n    if (marker) {\n      this.initMarker(series.marker, marker);\n    }\n\n    if (tooltip) {\n      this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n      this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n    }\n\n    return series;\n  };\n\n  ChartBuilder.initScatterSeries = function (series, options) {\n    ChartBuilder.initSeries(series, options);\n    this.setValueIfExists(series, 'title', options.title);\n    var field = options.field,\n        fill = options.fill,\n        stroke = options.stroke,\n        highlightStyle = options.highlightStyle,\n        marker = options.marker,\n        tooltip = options.tooltip;\n\n    if (field) {\n      this.setValueIfExists(series, 'xKey', field.xKey);\n      this.setValueIfExists(series, 'xName', field.xName);\n      this.setValueIfExists(series, 'yKey', field.yKey);\n      this.setValueIfExists(series, 'yName', field.yName);\n      this.setValueIfExists(series, 'sizeKey', field.sizeKey);\n      this.setValueIfExists(series, 'sizeName', field.sizeName);\n      this.setValueIfExists(series, 'labelKey', field.labelKey);\n      this.setValueIfExists(series, 'labelName', field.labelName);\n    }\n\n    if (fill) {\n      // default marker to same fill as series\n      this.setValueIfExists(series.marker, 'fill', fill.color);\n    }\n\n    if (stroke) {\n      // default marker to same stroke as series\n      this.setValueIfExists(series.marker, 'stroke', stroke.color);\n      this.setValueIfExists(series.marker, 'strokeWidth', stroke.width);\n    }\n\n    if (highlightStyle) {\n      this.initHighlightStyle(series.highlightStyle, highlightStyle);\n    }\n\n    if (marker) {\n      this.initMarker(series.marker, marker);\n    }\n\n    if (tooltip) {\n      this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n      this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n    }\n\n    return series;\n  };\n\n  ChartBuilder.initLabelOptions = function (series, options) {\n    this.setValueIfExists(series, 'enabled', options.enabled);\n    this.setValueIfExists(series, 'fontStyle', options.fontStyle);\n    this.setValueIfExists(series, 'fontWeight', options.fontWeight);\n    this.setValueIfExists(series, 'fontSize', options.fontSize);\n    this.setValueIfExists(series, 'fontFamily', options.fontFamily);\n    this.setValueIfExists(series, 'color', options.color);\n  };\n\n  ChartBuilder.initBarSeries = function (series, options) {\n    ChartBuilder.initSeries(series, options);\n    this.setValueIfExists(series, 'grouped', options.grouped);\n    this.setValueIfExists(series, 'normalizedTo', options.normalizedTo);\n    var field = options.field,\n        fill = options.fill,\n        stroke = options.stroke,\n        highlightStyle = options.highlightStyle,\n        label = options.label,\n        tooltip = options.tooltip;\n\n    if (field) {\n      this.setValueIfExists(series, 'xKey', field.xKey);\n      this.setValueIfExists(series, 'yKeys', field.yKeys);\n      this.setValueIfExists(series, 'yNames', field.yNames);\n    }\n\n    if (fill) {\n      this.setValueIfExists(series, 'fills', fill.colors);\n      this.setValueIfExists(series, 'fillOpacity', fill.opacity);\n    }\n\n    if (stroke) {\n      this.setValueIfExists(series, 'strokes', stroke.colors);\n      this.setValueIfExists(series, 'strokeOpacity', stroke.opacity);\n      this.setValueIfExists(series, 'strokeWidth', stroke.width);\n    }\n\n    if (highlightStyle) {\n      this.initHighlightStyle(series.highlightStyle, highlightStyle);\n    }\n\n    if (label) {\n      ChartBuilder.initLabelOptions(series.label, label);\n      this.setValueIfExists(series.label, 'enabled', label.enabled);\n      this.setValueIfExists(series.label, 'formatter', label.formatter);\n    }\n\n    if (tooltip) {\n      this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n      this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n    }\n\n    this.setTransformedValueIfExists(series, 'shadow', function (s) {\n      return ChartBuilder.createDropShadow(s);\n    }, options.shadow);\n    return series;\n  };\n\n  ChartBuilder.initAreaSeries = function (series, options) {\n    ChartBuilder.initSeries(series, options);\n    this.setValueIfExists(series, 'normalizedTo', options.normalizedTo);\n    var field = options.field,\n        fill = options.fill,\n        stroke = options.stroke,\n        highlightStyle = options.highlightStyle,\n        marker = options.marker,\n        tooltip = options.tooltip;\n\n    if (field) {\n      this.setValueIfExists(series, 'xKey', field.xKey);\n      this.setValueIfExists(series, 'yKeys', field.yKeys);\n      this.setValueIfExists(series, 'yNames', field.yNames);\n    }\n\n    if (fill) {\n      this.setValueIfExists(series, 'fills', fill.colors);\n      this.setValueIfExists(series, 'fillOpacity', fill.opacity);\n    }\n\n    if (stroke) {\n      this.setValueIfExists(series, 'strokes', stroke.colors);\n      this.setValueIfExists(series, 'strokeOpacity', stroke.opacity);\n      this.setValueIfExists(series, 'strokeWidth', stroke.width);\n    }\n\n    if (highlightStyle) {\n      this.initHighlightStyle(series.highlightStyle, highlightStyle);\n    }\n\n    if (marker) {\n      this.initMarker(series.marker, marker);\n    }\n\n    if (tooltip) {\n      this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n      this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n    }\n\n    this.setTransformedValueIfExists(series, 'shadow', function (s) {\n      return ChartBuilder.createDropShadow(s);\n    }, options.shadow);\n    return series;\n  };\n\n  ChartBuilder.initPieSeries = function (series, options) {\n    ChartBuilder.initSeries(series, options);\n    this.setTransformedValueIfExists(series, 'title', function (t) {\n      return ChartBuilder.createPieTitle(t);\n    }, options.title);\n    this.setValueIfExists(series, 'rotation', options.rotation);\n    this.setValueIfExists(series, 'outerRadiusOffset', options.outerRadiusOffset);\n    this.setValueIfExists(series, 'innerRadiusOffset', options.innerRadiusOffset);\n    var field = options.field,\n        fill = options.fill,\n        stroke = options.stroke,\n        highlightStyle = options.highlightStyle,\n        callout = options.callout,\n        label = options.label,\n        tooltip = options.tooltip;\n\n    if (field) {\n      this.setValueIfExists(series, 'angleKey', field.angleKey);\n      this.setValueIfExists(series, 'angleName', field.angleName);\n      this.setValueIfExists(series, 'radiusKey', field.radiusKey);\n      this.setValueIfExists(series, 'radiusName', field.radiusName);\n      this.setValueIfExists(series, 'labelKey', field.labelKey);\n      this.setValueIfExists(series, 'labelName', field.labelName);\n    }\n\n    if (fill) {\n      this.setValueIfExists(series, 'fills', fill.colors);\n      this.setValueIfExists(series, 'fillOpacity', fill.opacity);\n    }\n\n    if (stroke) {\n      this.setValueIfExists(series, 'strokes', stroke.colors);\n      this.setValueIfExists(series, 'strokeOpacity', stroke.opacity);\n      this.setValueIfExists(series, 'strokeWidth', stroke.width);\n    }\n\n    if (highlightStyle) {\n      this.initHighlightStyle(series.highlightStyle, highlightStyle);\n    }\n\n    if (callout) {\n      this.setValueIfExists(series.callout, 'colors', callout.colors);\n      this.setValueIfExists(series.callout, 'strokeWidth', callout.strokeWidth);\n      this.setValueIfExists(series.callout, 'length', callout.length);\n    }\n\n    if (label) {\n      ChartBuilder.initLabelOptions(series.label, label);\n      this.setValueIfExists(series.label, 'enabled', label.enabled);\n      this.setValueIfExists(series.label, 'minAngle', label.minRequiredAngle);\n      this.setValueIfExists(series.label, 'offset', label.offset);\n    }\n\n    if (tooltip) {\n      this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n      this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n    }\n\n    this.setTransformedValueIfExists(series, 'shadow', function (s) {\n      return ChartBuilder.createDropShadow(s);\n    }, options.shadow);\n    return series;\n  };\n\n  ChartBuilder.initHistogramSeries = function (series, options) {\n    ChartBuilder.initSeries(series, options);\n    var field = options.field,\n        fill = options.fill,\n        stroke = options.stroke,\n        highlightStyle = options.highlightStyle,\n        tooltip = options.tooltip,\n        binCount = options.binCount;\n    this.setValueIfExists(series, 'binCount', binCount);\n\n    if (field) {\n      this.setValueIfExists(series, 'xKey', field.xKey);\n    }\n\n    if (fill) {\n      this.setValueIfExists(series, 'fill', fill.color);\n      this.setValueIfExists(series, 'fillOpacity', fill.opacity);\n    }\n\n    if (stroke) {\n      this.setValueIfExists(series, 'stroke', stroke.color);\n      this.setValueIfExists(series, 'strokeOpacity', stroke.opacity);\n      this.setValueIfExists(series, 'strokeWidth', stroke.width);\n    }\n\n    if (highlightStyle) {\n      this.initHighlightStyle(series.highlightStyle, highlightStyle);\n    }\n\n    if (tooltip) {\n      this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n      this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n    }\n\n    return series;\n  };\n\n  ChartBuilder.getMarkerByName = function (name) {\n    return this.markerShapes.get(name) || Square;\n  };\n\n  ChartBuilder.initLegend = function (legend, options) {\n    this.setValueIfExists(legend, 'enabled', options.enabled);\n    this.setValueIfExists(legend, 'position', options.position);\n    var item = options.item;\n\n    if (item) {\n      var label = item.label,\n          marker = item.marker;\n\n      if (label) {\n        this.setValueIfExists(legend, 'fontFamily', label.fontFamily);\n        this.setValueIfExists(legend, 'fontSize', label.fontSize);\n        this.setValueIfExists(legend, 'fontStyle', label.fontStyle);\n        this.setValueIfExists(legend, 'fontWeight', label.fontWeight);\n        this.setValueIfExists(legend, 'color', label.color);\n      }\n\n      if (marker) {\n        this.setValueIfExists(legend, 'markerShape', ChartBuilder.getMarkerByName(marker.shape));\n        this.setValueIfExists(legend, 'strokeWidth', marker.strokeWidth);\n        this.setValueIfExists(legend, 'markerSize', marker.size);\n        this.setValueIfExists(legend, 'itemSpacing', marker.padding);\n      }\n\n      this.setValueIfExists(legend, 'layoutHorizontalSpacing', item.paddingX);\n      this.setValueIfExists(legend, 'layoutVerticalSpacing', item.paddingY);\n    }\n  };\n\n  ChartBuilder.initNavigator = function (navigator, options) {\n    this.setValueIfExists(navigator, 'enabled', options.enabled);\n    this.setValueIfExists(navigator, 'height', options.height);\n    this.setValueIfExists(navigator, 'min', options.min);\n    this.setValueIfExists(navigator, 'max', options.max);\n    this.initNavigatorMask(navigator.mask, options.mask);\n    this.initNavigatorHandle(navigator.minHandle, options.minHandle);\n    this.initNavigatorHandle(navigator.maxHandle, options.maxHandle);\n  };\n\n  ChartBuilder.initNavigatorMask = function (mask, options) {\n    if (options) {\n      this.setValueIfExists(mask, 'fill', options.fill);\n      this.setValueIfExists(mask, 'stroke', options.stroke);\n      this.setValueIfExists(mask, 'strokeWidth', options.strokeWidth);\n      this.setValueIfExists(mask, 'fillOpacity', options.fillOpacity);\n    }\n  };\n\n  ChartBuilder.initNavigatorHandle = function (handle, options) {\n    if (options) {\n      this.setValueIfExists(handle, 'fill', options.fill);\n      this.setValueIfExists(handle, 'stroke', options.stroke);\n      this.setValueIfExists(handle, 'strokeWidth', options.strokeWidth);\n      this.setValueIfExists(handle, 'width', options.width);\n      this.setValueIfExists(handle, 'height', options.height);\n      this.setValueIfExists(handle, 'gripLineGap', options.gripLineGap);\n      this.setValueIfExists(handle, 'gripLineLength', options.gripLineLength);\n    }\n  };\n\n  ChartBuilder.initMarker = function (marker, options) {\n    marker.shape = ChartBuilder.getMarkerByName(options.shape);\n    this.setValueIfExists(marker, 'enabled', options.enabled);\n    this.setValueIfExists(marker, 'size', options.size);\n    this.setValueIfExists(marker, 'minSize', options.minSize);\n    this.setValueIfExists(marker, 'fill', options.fill);\n    this.setValueIfExists(marker, 'stroke', options.stroke);\n    this.setValueIfExists(marker, 'strokeWidth', options.strokeWidth);\n  };\n\n  ChartBuilder.initHighlightStyle = function (highlightStyle, options) {\n    this.setValueIfExists(highlightStyle, 'fill', options.fill);\n    this.setValueIfExists(highlightStyle, 'stroke', options.stroke);\n  };\n\n  ChartBuilder.setDefaultFontOptions = function (options, fontSize, fontWeight, fontFamily) {\n    if (fontSize === void 0) {\n      fontSize = 16;\n    }\n\n    if (fontWeight === void 0) {\n      fontWeight = 'bold';\n    }\n\n    if (fontFamily === void 0) {\n      fontFamily = 'Verdana, sans-serif';\n    }\n\n    if (options.fontSize === undefined) {\n      options.fontSize = fontSize;\n    }\n\n    if (options.fontWeight === undefined) {\n      options.fontWeight = fontWeight;\n    }\n\n    if (options.fontFamily === undefined) {\n      options.fontFamily = fontFamily;\n    }\n  };\n\n  ChartBuilder.createTitle = function (options) {\n    options = Object.create(options);\n\n    if (options.text === undefined) {\n      options.text = '';\n    }\n\n    this.setDefaultFontOptions(options);\n    return ChartBuilder.createCaption(options);\n  };\n\n  ChartBuilder.createSubtitle = function (options) {\n    options = Object.create(options);\n\n    if (options.text === undefined) {\n      options.text = '';\n    }\n\n    this.setDefaultFontOptions(options, 12);\n    return ChartBuilder.createCaption(options);\n  };\n\n  ChartBuilder.createPieTitle = function (options) {\n    options = Object.create(options);\n    this.setDefaultFontOptions(options, 12);\n    return ChartBuilder.createCaption(options);\n  };\n\n  ChartBuilder.createCaption = function (options) {\n    var caption = new Caption();\n    this.setValueIfExists(caption, 'enabled', options.enabled);\n    this.setValueIfExists(caption, 'text', options.text);\n    this.setValueIfExists(caption, 'fontStyle', options.fontStyle);\n    this.setValueIfExists(caption, 'fontWeight', options.fontWeight);\n    this.setValueIfExists(caption, 'fontSize', options.fontSize);\n    this.setValueIfExists(caption, 'fontFamily', options.fontFamily);\n    this.setValueIfExists(caption, 'color', options.color);\n    return caption;\n  };\n\n  ChartBuilder.initAxis = function (axis, options) {\n    this.setTransformedValueIfExists(axis, 'title', function (t) {\n      return ChartBuilder.createTitle(t);\n    }, options.title);\n    this.setValueIfExists(axis, 'gridStyle', options.gridStyle);\n    var line = options.line,\n        tick = options.tick,\n        label = options.label;\n\n    if (line) {\n      this.setValueIfExists(axis.line, 'width', line.width);\n      this.setValueIfExists(axis.line, 'color', line.color);\n    }\n\n    if (tick) {\n      this.setValueIfExists(axis.tick, 'width', tick.width);\n      this.setValueIfExists(axis.tick, 'size', tick.size);\n      this.setValueIfExists(axis.tick, 'color', tick.color);\n    }\n\n    if (label) {\n      this.setValueIfExists(axis.label, 'fontStyle', label.fontStyle);\n      this.setValueIfExists(axis.label, 'fontWeight', label.fontWeight);\n      this.setValueIfExists(axis.label, 'fontSize', label.fontSize);\n      this.setValueIfExists(axis.label, 'fontFamily', label.fontFamily);\n      this.setValueIfExists(axis.label, 'color', label.color);\n      this.setValueIfExists(axis.label, 'padding', label.padding);\n      this.setValueIfExists(axis.label, 'rotation', label.rotation);\n      this.setValueIfExists(axis.label, 'format', label.format);\n      this.setValueIfExists(axis.label, 'formatter', label.formatter);\n    }\n  };\n\n  ChartBuilder.createNumberAxis = function (options) {\n    var axis = new NumberAxis();\n    this.initAxis(axis, options);\n    return axis;\n  };\n\n  ChartBuilder.createCategoryAxis = function (options) {\n    var axis = new CategoryAxis();\n    this.initAxis(axis, options);\n    return axis;\n  };\n\n  ChartBuilder.createGroupedCategoryAxis = function (options) {\n    var axis = new GroupedCategoryAxis();\n    this.initAxis(axis, options);\n    return axis;\n  };\n\n  ChartBuilder.createTimeAxis = function (options) {\n    var axis = new TimeAxis();\n    this.initAxis(axis, options);\n    return axis;\n  };\n\n  ChartBuilder.createAxis = function (options, defaultType) {\n    var AxisClass = this.toAxisClass(options.type || defaultType);\n\n    if (!AxisClass) {\n      throw new Error('Unknown axis type');\n    }\n\n    var axis = new AxisClass();\n    this.initAxis(axis, options);\n    return axis;\n  };\n\n  ChartBuilder.toAxisClass = function (type) {\n    return this.types.get(type);\n  };\n\n  ChartBuilder.setValueIfExists = function (target, property, value, transform) {\n    if (value === undefined) {\n      return;\n    }\n\n    target[property] = transform ? transform(value) : value;\n  };\n\n  ChartBuilder.setTransformedValueIfExists = function (target, property, transform, value) {\n    if (value === undefined) {\n      return;\n    }\n\n    target[property] = transform(value);\n  };\n\n  ChartBuilder.markerShapes = convertToMap([['circle', Circle], ['cross', Cross], ['diamond', Diamond], ['plus', Plus], ['square', Square], ['triangle', Triangle]]);\n\n  ChartBuilder.createDropShadow = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var shadow = new DropShadow();\n    shadow.enabled = options.enabled == null ? true : options.enabled;\n    shadow.xOffset = options.xOffset || 0;\n    shadow.yOffset = options.yOffset || 0;\n    shadow.blur = options.blur || 5;\n    shadow.color = options.color || 'rgba(0, 0, 0, 0.5)';\n    return shadow;\n  };\n\n  ChartBuilder.types = function () {\n    var types = new Map();\n    types.set('category', CategoryAxis);\n    types.set('number', NumberAxis);\n    types.set('time', TimeAxis);\n    return types;\n  }();\n\n  return ChartBuilder;\n}();\n\nexport { ChartBuilder };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/ag-charts-community/dist/es6/chartBuilder.js"],"names":["CartesianChart","PolarChart","LineSeries","ScatterSeries","BarSeries","AreaSeries","HistogramSeries","PieSeries","DropShadow","CategoryAxis","NumberAxis","Padding","Caption","GroupedCategoryAxis","GroupedCategoryChart","Circle","Cross","Diamond","Plus","Square","Triangle","ChartAxisPosition","convertToMap","TimeAxis","ChartBuilder","createCartesianChart","container","xAxis","yAxis","document","chart","position","Bottom","Left","axes","createGroupedCategoryChart","createBarChart","options","createAxis","initCartesianChart","series","map","s","initBarSeries","createGroupedBarChart","createGroupedCategoryAxis","createColumnChart","createGroupedColumnChart","createLineChart","initLineSeries","createGroupedLineChart","createScatterChart","initScatterSeries","createAreaChart","initAreaSeries","createGroupedAreaChart","createHistogramChart","createNumberAxis","createPolarChart","createDoughnutChart","createPieChart","initChart","initPieSeries","createSeries","type","initHistogramSeries","navigator","undefined","initNavigator","setValueIfExists","width","height","tooltipClass","setTransformedValueIfExists","t","createTitle","title","createSubtitle","subtitle","p","top","right","bottom","left","padding","background","fill","visible","legend","initLegend","listeners","key","hasOwnProperty","listener","addEventListener","initSeries","showInLegend","data","field","stroke","highlightStyle","marker","tooltip","xKey","xName","yKey","yName","color","initHighlightStyle","initMarker","enabled","renderer","sizeKey","sizeName","labelKey","labelName","initLabelOptions","fontStyle","fontWeight","fontSize","fontFamily","grouped","normalizedTo","label","yKeys","yNames","colors","opacity","formatter","createDropShadow","shadow","createPieTitle","rotation","outerRadiusOffset","innerRadiusOffset","callout","angleKey","angleName","radiusKey","radiusName","strokeWidth","length","minRequiredAngle","offset","binCount","getMarkerByName","name","markerShapes","get","item","shape","size","paddingX","paddingY","min","max","initNavigatorMask","mask","initNavigatorHandle","minHandle","maxHandle","fillOpacity","handle","gripLineGap","gripLineLength","minSize","setDefaultFontOptions","Object","create","text","createCaption","caption","initAxis","axis","gridStyle","line","tick","format","createCategoryAxis","createTimeAxis","defaultType","AxisClass","toAxisClass","Error","types","target","property","value","transform","xOffset","yOffset","blur","Map","set"],"mappings":"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","sourcesContent":["import { CartesianChart } from \"./chart/cartesianChart\";\nimport { PolarChart } from \"./chart/polarChart\";\nimport { LineSeries } from \"./chart/series/cartesian/lineSeries\";\nimport { ScatterSeries } from \"./chart/series/cartesian/scatterSeries\";\nimport { BarSeries } from \"./chart/series/cartesian/barSeries\";\nimport { AreaSeries } from \"./chart/series/cartesian/areaSeries\";\nimport { HistogramSeries } from \"./chart/series/cartesian/histogramSeries\";\nimport { PieSeries } from \"./chart/series/polar/pieSeries\";\nimport { DropShadow } from \"./scene/dropShadow\";\nimport { CategoryAxis } from \"./chart/axis/categoryAxis\";\nimport { NumberAxis } from \"./chart/axis/numberAxis\";\nimport { Padding } from \"./util/padding\";\nimport { Caption } from \"./caption\";\nimport { GroupedCategoryAxis } from \"./chart/axis/groupedCategoryAxis\";\nimport { GroupedCategoryChart } from \"./chart/groupedCategoryChart\";\nimport { Circle } from \"./chart/marker/circle\";\nimport { Cross } from \"./chart/marker/cross\";\nimport { Diamond } from \"./chart/marker/diamond\";\nimport { Plus } from \"./chart/marker/plus\";\nimport { Square } from \"./chart/marker/square\";\nimport { Triangle } from \"./chart/marker/triangle\";\nimport { ChartAxisPosition } from \"./chart/chartAxis\";\nimport { convertToMap } from \"./util/map\";\nimport { TimeAxis } from \"./chart/axis/timeAxis\";\nvar ChartBuilder = /** @class */ (function () {\n    function ChartBuilder() {\n    }\n    ChartBuilder.createCartesianChart = function (container, xAxis, yAxis, document) {\n        var chart = new CartesianChart(document);\n        chart.container = container;\n        xAxis.position = ChartAxisPosition.Bottom;\n        yAxis.position = ChartAxisPosition.Left;\n        chart.axes = [xAxis, yAxis];\n        return chart;\n    };\n    ChartBuilder.createGroupedCategoryChart = function (container, xAxis, yAxis, document) {\n        var chart = new GroupedCategoryChart(document);\n        chart.container = container;\n        xAxis.position = ChartAxisPosition.Bottom;\n        yAxis.position = ChartAxisPosition.Left;\n        chart.axes = [xAxis, yAxis];\n        return chart;\n    };\n    ChartBuilder.createBarChart = function (container, options) {\n        var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'number'), ChartBuilder.createAxis(options.yAxis, 'category'), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initBarSeries(new BarSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createGroupedBarChart = function (container, options) {\n        var chart = this.createGroupedCategoryChart(container, ChartBuilder.createAxis(options.xAxis, 'number'), ChartBuilder.createGroupedCategoryAxis(options.yAxis), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initBarSeries(new BarSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createColumnChart = function (container, options) {\n        var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'category'), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initBarSeries(new BarSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createGroupedColumnChart = function (container, options) {\n        var chart = this.createGroupedCategoryChart(container, ChartBuilder.createGroupedCategoryAxis(options.xAxis), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initBarSeries(new BarSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createLineChart = function (container, options) {\n        var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'category'), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initLineSeries(new LineSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createGroupedLineChart = function (container, options) {\n        var chart = this.createGroupedCategoryChart(container, ChartBuilder.createGroupedCategoryAxis(options.xAxis), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initLineSeries(new LineSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createScatterChart = function (container, options) {\n        var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'number'), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initScatterSeries(new ScatterSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createAreaChart = function (container, options) {\n        var chart = this.createCartesianChart(container, ChartBuilder.createAxis(options.xAxis, 'category'), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initAreaSeries(new AreaSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createGroupedAreaChart = function (container, options) {\n        var chart = this.createGroupedCategoryChart(container, ChartBuilder.createGroupedCategoryAxis(options.xAxis), ChartBuilder.createAxis(options.yAxis, 'number'), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initAreaSeries(new AreaSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createHistogramChart = function (container, options) {\n        var chart = this.createCartesianChart(container, ChartBuilder.createNumberAxis(options.xAxis), ChartBuilder.createNumberAxis(options.yAxis), options.document);\n        ChartBuilder.initCartesianChart(chart, options);\n        return chart;\n    };\n    ChartBuilder.createPolarChart = function (container) {\n        var chart = new PolarChart();\n        chart.container = container;\n        return chart;\n    };\n    ChartBuilder.createDoughnutChart = function (container, options) {\n        return this.createPieChart(container, options);\n    };\n    ChartBuilder.createPieChart = function (container, options) {\n        var chart = this.createPolarChart(container);\n        ChartBuilder.initChart(chart, options);\n        if (options.series) {\n            chart.series = options.series.map(function (s) { return ChartBuilder.initPieSeries(new PieSeries(), s); });\n        }\n        return chart;\n    };\n    ChartBuilder.createSeries = function (options) {\n        switch (options && options.type) {\n            case 'line':\n                return ChartBuilder.initLineSeries(new LineSeries(), options);\n            case 'scatter':\n                return ChartBuilder.initScatterSeries(new ScatterSeries(), options);\n            case 'bar':\n                return ChartBuilder.initBarSeries(new BarSeries(), options);\n            case 'area':\n                return ChartBuilder.initAreaSeries(new AreaSeries(), options);\n            case 'pie':\n                return ChartBuilder.initPieSeries(new PieSeries(), options);\n            case 'histogram':\n                return ChartBuilder.initHistogramSeries(new HistogramSeries(), options);\n            default:\n                return null;\n        }\n    };\n    ChartBuilder.initCartesianChart = function (chart, options) {\n        if (options.navigator !== undefined) {\n            ChartBuilder.initNavigator(chart.navigator, options.navigator);\n        }\n        return this.initChart(chart, options);\n    };\n    ChartBuilder.initChart = function (chart, options) {\n        this.setValueIfExists(chart, 'width', options.width);\n        this.setValueIfExists(chart, 'height', options.height);\n        this.setValueIfExists(chart, 'tooltipClass', options.tooltipClass);\n        this.setTransformedValueIfExists(chart, 'title', function (t) { return ChartBuilder.createTitle(t); }, options.title);\n        this.setTransformedValueIfExists(chart, 'subtitle', function (t) { return ChartBuilder.createSubtitle(t); }, options.subtitle);\n        this.setTransformedValueIfExists(chart, 'padding', function (p) { return new Padding(p.top, p.right, p.bottom, p.left); }, options.padding);\n        if (options.background) {\n            this.setValueIfExists(chart.background, 'fill', options.background.fill);\n            this.setValueIfExists(chart.background, 'visible', options.background.visible);\n        }\n        if (options.legend !== undefined) {\n            ChartBuilder.initLegend(chart.legend, options.legend);\n        }\n        var listeners = options.listeners;\n        if (listeners) {\n            for (var key in listeners) {\n                if (listeners.hasOwnProperty(key)) {\n                    var listener = listeners[key];\n                    if (typeof listener === 'function') {\n                        chart.addEventListener(key, listener);\n                    }\n                }\n            }\n        }\n        return chart;\n    };\n    ChartBuilder.initSeries = function (series, options) {\n        this.setValueIfExists(series, 'visible', options.visible);\n        this.setValueIfExists(series, 'showInLegend', options.showInLegend);\n        this.setValueIfExists(series, 'data', options.data);\n        var listeners = options.listeners;\n        if (listeners) {\n            for (var key in listeners) {\n                if (listeners.hasOwnProperty(key)) {\n                    var listener = listeners[key];\n                    if (typeof listener === 'function') {\n                        series.addEventListener(key, listener);\n                    }\n                }\n            }\n        }\n        return series;\n    };\n    ChartBuilder.initLineSeries = function (series, options) {\n        ChartBuilder.initSeries(series, options);\n        this.setValueIfExists(series, 'title', options.title);\n        var field = options.field, fill = options.fill, stroke = options.stroke, highlightStyle = options.highlightStyle, marker = options.marker, tooltip = options.tooltip;\n        if (field) {\n            this.setValueIfExists(series, 'xKey', field.xKey);\n            this.setValueIfExists(series, 'xName', field.xName);\n            this.setValueIfExists(series, 'yKey', field.yKey);\n            this.setValueIfExists(series, 'yName', field.yName);\n        }\n        if (fill) {\n            this.setValueIfExists(series.marker, 'fill', fill.color);\n            // default marker to same fill as series\n            // this.setValueIfExists(series.marker, 'fill', fill.color);\n        }\n        if (stroke) {\n            this.setValueIfExists(series, 'stroke', stroke.color);\n            this.setValueIfExists(series, 'strokeWidth', stroke.width);\n            // default marker to same stroke as series\n            // this.setValueIfExists(series.marker, 'stroke', stroke.color);\n            // this.setValueIfExists(series.marker, 'strokeWidth', stroke.width);\n        }\n        if (highlightStyle) {\n            this.initHighlightStyle(series.highlightStyle, highlightStyle);\n        }\n        if (marker) {\n            this.initMarker(series.marker, marker);\n        }\n        if (tooltip) {\n            this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n            this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n        }\n        return series;\n    };\n    ChartBuilder.initScatterSeries = function (series, options) {\n        ChartBuilder.initSeries(series, options);\n        this.setValueIfExists(series, 'title', options.title);\n        var field = options.field, fill = options.fill, stroke = options.stroke, highlightStyle = options.highlightStyle, marker = options.marker, tooltip = options.tooltip;\n        if (field) {\n            this.setValueIfExists(series, 'xKey', field.xKey);\n            this.setValueIfExists(series, 'xName', field.xName);\n            this.setValueIfExists(series, 'yKey', field.yKey);\n            this.setValueIfExists(series, 'yName', field.yName);\n            this.setValueIfExists(series, 'sizeKey', field.sizeKey);\n            this.setValueIfExists(series, 'sizeName', field.sizeName);\n            this.setValueIfExists(series, 'labelKey', field.labelKey);\n            this.setValueIfExists(series, 'labelName', field.labelName);\n        }\n        if (fill) {\n            // default marker to same fill as series\n            this.setValueIfExists(series.marker, 'fill', fill.color);\n        }\n        if (stroke) {\n            // default marker to same stroke as series\n            this.setValueIfExists(series.marker, 'stroke', stroke.color);\n            this.setValueIfExists(series.marker, 'strokeWidth', stroke.width);\n        }\n        if (highlightStyle) {\n            this.initHighlightStyle(series.highlightStyle, highlightStyle);\n        }\n        if (marker) {\n            this.initMarker(series.marker, marker);\n        }\n        if (tooltip) {\n            this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n            this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n        }\n        return series;\n    };\n    ChartBuilder.initLabelOptions = function (series, options) {\n        this.setValueIfExists(series, 'enabled', options.enabled);\n        this.setValueIfExists(series, 'fontStyle', options.fontStyle);\n        this.setValueIfExists(series, 'fontWeight', options.fontWeight);\n        this.setValueIfExists(series, 'fontSize', options.fontSize);\n        this.setValueIfExists(series, 'fontFamily', options.fontFamily);\n        this.setValueIfExists(series, 'color', options.color);\n    };\n    ChartBuilder.initBarSeries = function (series, options) {\n        ChartBuilder.initSeries(series, options);\n        this.setValueIfExists(series, 'grouped', options.grouped);\n        this.setValueIfExists(series, 'normalizedTo', options.normalizedTo);\n        var field = options.field, fill = options.fill, stroke = options.stroke, highlightStyle = options.highlightStyle, label = options.label, tooltip = options.tooltip;\n        if (field) {\n            this.setValueIfExists(series, 'xKey', field.xKey);\n            this.setValueIfExists(series, 'yKeys', field.yKeys);\n            this.setValueIfExists(series, 'yNames', field.yNames);\n        }\n        if (fill) {\n            this.setValueIfExists(series, 'fills', fill.colors);\n            this.setValueIfExists(series, 'fillOpacity', fill.opacity);\n        }\n        if (stroke) {\n            this.setValueIfExists(series, 'strokes', stroke.colors);\n            this.setValueIfExists(series, 'strokeOpacity', stroke.opacity);\n            this.setValueIfExists(series, 'strokeWidth', stroke.width);\n        }\n        if (highlightStyle) {\n            this.initHighlightStyle(series.highlightStyle, highlightStyle);\n        }\n        if (label) {\n            ChartBuilder.initLabelOptions(series.label, label);\n            this.setValueIfExists(series.label, 'enabled', label.enabled);\n            this.setValueIfExists(series.label, 'formatter', label.formatter);\n        }\n        if (tooltip) {\n            this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n            this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n        }\n        this.setTransformedValueIfExists(series, 'shadow', function (s) { return ChartBuilder.createDropShadow(s); }, options.shadow);\n        return series;\n    };\n    ChartBuilder.initAreaSeries = function (series, options) {\n        ChartBuilder.initSeries(series, options);\n        this.setValueIfExists(series, 'normalizedTo', options.normalizedTo);\n        var field = options.field, fill = options.fill, stroke = options.stroke, highlightStyle = options.highlightStyle, marker = options.marker, tooltip = options.tooltip;\n        if (field) {\n            this.setValueIfExists(series, 'xKey', field.xKey);\n            this.setValueIfExists(series, 'yKeys', field.yKeys);\n            this.setValueIfExists(series, 'yNames', field.yNames);\n        }\n        if (fill) {\n            this.setValueIfExists(series, 'fills', fill.colors);\n            this.setValueIfExists(series, 'fillOpacity', fill.opacity);\n        }\n        if (stroke) {\n            this.setValueIfExists(series, 'strokes', stroke.colors);\n            this.setValueIfExists(series, 'strokeOpacity', stroke.opacity);\n            this.setValueIfExists(series, 'strokeWidth', stroke.width);\n        }\n        if (highlightStyle) {\n            this.initHighlightStyle(series.highlightStyle, highlightStyle);\n        }\n        if (marker) {\n            this.initMarker(series.marker, marker);\n        }\n        if (tooltip) {\n            this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n            this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n        }\n        this.setTransformedValueIfExists(series, 'shadow', function (s) { return ChartBuilder.createDropShadow(s); }, options.shadow);\n        return series;\n    };\n    ChartBuilder.initPieSeries = function (series, options) {\n        ChartBuilder.initSeries(series, options);\n        this.setTransformedValueIfExists(series, 'title', function (t) { return ChartBuilder.createPieTitle(t); }, options.title);\n        this.setValueIfExists(series, 'rotation', options.rotation);\n        this.setValueIfExists(series, 'outerRadiusOffset', options.outerRadiusOffset);\n        this.setValueIfExists(series, 'innerRadiusOffset', options.innerRadiusOffset);\n        var field = options.field, fill = options.fill, stroke = options.stroke, highlightStyle = options.highlightStyle, callout = options.callout, label = options.label, tooltip = options.tooltip;\n        if (field) {\n            this.setValueIfExists(series, 'angleKey', field.angleKey);\n            this.setValueIfExists(series, 'angleName', field.angleName);\n            this.setValueIfExists(series, 'radiusKey', field.radiusKey);\n            this.setValueIfExists(series, 'radiusName', field.radiusName);\n            this.setValueIfExists(series, 'labelKey', field.labelKey);\n            this.setValueIfExists(series, 'labelName', field.labelName);\n        }\n        if (fill) {\n            this.setValueIfExists(series, 'fills', fill.colors);\n            this.setValueIfExists(series, 'fillOpacity', fill.opacity);\n        }\n        if (stroke) {\n            this.setValueIfExists(series, 'strokes', stroke.colors);\n            this.setValueIfExists(series, 'strokeOpacity', stroke.opacity);\n            this.setValueIfExists(series, 'strokeWidth', stroke.width);\n        }\n        if (highlightStyle) {\n            this.initHighlightStyle(series.highlightStyle, highlightStyle);\n        }\n        if (callout) {\n            this.setValueIfExists(series.callout, 'colors', callout.colors);\n            this.setValueIfExists(series.callout, 'strokeWidth', callout.strokeWidth);\n            this.setValueIfExists(series.callout, 'length', callout.length);\n        }\n        if (label) {\n            ChartBuilder.initLabelOptions(series.label, label);\n            this.setValueIfExists(series.label, 'enabled', label.enabled);\n            this.setValueIfExists(series.label, 'minAngle', label.minRequiredAngle);\n            this.setValueIfExists(series.label, 'offset', label.offset);\n        }\n        if (tooltip) {\n            this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n            this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n        }\n        this.setTransformedValueIfExists(series, 'shadow', function (s) { return ChartBuilder.createDropShadow(s); }, options.shadow);\n        return series;\n    };\n    ChartBuilder.initHistogramSeries = function (series, options) {\n        ChartBuilder.initSeries(series, options);\n        var field = options.field, fill = options.fill, stroke = options.stroke, highlightStyle = options.highlightStyle, tooltip = options.tooltip, binCount = options.binCount;\n        this.setValueIfExists(series, 'binCount', binCount);\n        if (field) {\n            this.setValueIfExists(series, 'xKey', field.xKey);\n        }\n        if (fill) {\n            this.setValueIfExists(series, 'fill', fill.color);\n            this.setValueIfExists(series, 'fillOpacity', fill.opacity);\n        }\n        if (stroke) {\n            this.setValueIfExists(series, 'stroke', stroke.color);\n            this.setValueIfExists(series, 'strokeOpacity', stroke.opacity);\n            this.setValueIfExists(series, 'strokeWidth', stroke.width);\n        }\n        if (highlightStyle) {\n            this.initHighlightStyle(series.highlightStyle, highlightStyle);\n        }\n        if (tooltip) {\n            this.setValueIfExists(series, 'tooltipEnabled', tooltip.enabled);\n            this.setValueIfExists(series, 'tooltipRenderer', tooltip.renderer);\n        }\n        return series;\n    };\n    ChartBuilder.getMarkerByName = function (name) {\n        return this.markerShapes.get(name) || Square;\n    };\n    ChartBuilder.initLegend = function (legend, options) {\n        this.setValueIfExists(legend, 'enabled', options.enabled);\n        this.setValueIfExists(legend, 'position', options.position);\n        var item = options.item;\n        if (item) {\n            var label = item.label, marker = item.marker;\n            if (label) {\n                this.setValueIfExists(legend, 'fontFamily', label.fontFamily);\n                this.setValueIfExists(legend, 'fontSize', label.fontSize);\n                this.setValueIfExists(legend, 'fontStyle', label.fontStyle);\n                this.setValueIfExists(legend, 'fontWeight', label.fontWeight);\n                this.setValueIfExists(legend, 'color', label.color);\n            }\n            if (marker) {\n                this.setValueIfExists(legend, 'markerShape', ChartBuilder.getMarkerByName(marker.shape));\n                this.setValueIfExists(legend, 'strokeWidth', marker.strokeWidth);\n                this.setValueIfExists(legend, 'markerSize', marker.size);\n                this.setValueIfExists(legend, 'itemSpacing', marker.padding);\n            }\n            this.setValueIfExists(legend, 'layoutHorizontalSpacing', item.paddingX);\n            this.setValueIfExists(legend, 'layoutVerticalSpacing', item.paddingY);\n        }\n    };\n    ChartBuilder.initNavigator = function (navigator, options) {\n        this.setValueIfExists(navigator, 'enabled', options.enabled);\n        this.setValueIfExists(navigator, 'height', options.height);\n        this.setValueIfExists(navigator, 'min', options.min);\n        this.setValueIfExists(navigator, 'max', options.max);\n        this.initNavigatorMask(navigator.mask, options.mask);\n        this.initNavigatorHandle(navigator.minHandle, options.minHandle);\n        this.initNavigatorHandle(navigator.maxHandle, options.maxHandle);\n    };\n    ChartBuilder.initNavigatorMask = function (mask, options) {\n        if (options) {\n            this.setValueIfExists(mask, 'fill', options.fill);\n            this.setValueIfExists(mask, 'stroke', options.stroke);\n            this.setValueIfExists(mask, 'strokeWidth', options.strokeWidth);\n            this.setValueIfExists(mask, 'fillOpacity', options.fillOpacity);\n        }\n    };\n    ChartBuilder.initNavigatorHandle = function (handle, options) {\n        if (options) {\n            this.setValueIfExists(handle, 'fill', options.fill);\n            this.setValueIfExists(handle, 'stroke', options.stroke);\n            this.setValueIfExists(handle, 'strokeWidth', options.strokeWidth);\n            this.setValueIfExists(handle, 'width', options.width);\n            this.setValueIfExists(handle, 'height', options.height);\n            this.setValueIfExists(handle, 'gripLineGap', options.gripLineGap);\n            this.setValueIfExists(handle, 'gripLineLength', options.gripLineLength);\n        }\n    };\n    ChartBuilder.initMarker = function (marker, options) {\n        marker.shape = ChartBuilder.getMarkerByName(options.shape);\n        this.setValueIfExists(marker, 'enabled', options.enabled);\n        this.setValueIfExists(marker, 'size', options.size);\n        this.setValueIfExists(marker, 'minSize', options.minSize);\n        this.setValueIfExists(marker, 'fill', options.fill);\n        this.setValueIfExists(marker, 'stroke', options.stroke);\n        this.setValueIfExists(marker, 'strokeWidth', options.strokeWidth);\n    };\n    ChartBuilder.initHighlightStyle = function (highlightStyle, options) {\n        this.setValueIfExists(highlightStyle, 'fill', options.fill);\n        this.setValueIfExists(highlightStyle, 'stroke', options.stroke);\n    };\n    ChartBuilder.setDefaultFontOptions = function (options, fontSize, fontWeight, fontFamily) {\n        if (fontSize === void 0) { fontSize = 16; }\n        if (fontWeight === void 0) { fontWeight = 'bold'; }\n        if (fontFamily === void 0) { fontFamily = 'Verdana, sans-serif'; }\n        if (options.fontSize === undefined) {\n            options.fontSize = fontSize;\n        }\n        if (options.fontWeight === undefined) {\n            options.fontWeight = fontWeight;\n        }\n        if (options.fontFamily === undefined) {\n            options.fontFamily = fontFamily;\n        }\n    };\n    ChartBuilder.createTitle = function (options) {\n        options = Object.create(options);\n        if (options.text === undefined) {\n            options.text = '';\n        }\n        this.setDefaultFontOptions(options);\n        return ChartBuilder.createCaption(options);\n    };\n    ChartBuilder.createSubtitle = function (options) {\n        options = Object.create(options);\n        if (options.text === undefined) {\n            options.text = '';\n        }\n        this.setDefaultFontOptions(options, 12);\n        return ChartBuilder.createCaption(options);\n    };\n    ChartBuilder.createPieTitle = function (options) {\n        options = Object.create(options);\n        this.setDefaultFontOptions(options, 12);\n        return ChartBuilder.createCaption(options);\n    };\n    ChartBuilder.createCaption = function (options) {\n        var caption = new Caption();\n        this.setValueIfExists(caption, 'enabled', options.enabled);\n        this.setValueIfExists(caption, 'text', options.text);\n        this.setValueIfExists(caption, 'fontStyle', options.fontStyle);\n        this.setValueIfExists(caption, 'fontWeight', options.fontWeight);\n        this.setValueIfExists(caption, 'fontSize', options.fontSize);\n        this.setValueIfExists(caption, 'fontFamily', options.fontFamily);\n        this.setValueIfExists(caption, 'color', options.color);\n        return caption;\n    };\n    ChartBuilder.initAxis = function (axis, options) {\n        this.setTransformedValueIfExists(axis, 'title', function (t) { return ChartBuilder.createTitle(t); }, options.title);\n        this.setValueIfExists(axis, 'gridStyle', options.gridStyle);\n        var line = options.line, tick = options.tick, label = options.label;\n        if (line) {\n            this.setValueIfExists(axis.line, 'width', line.width);\n            this.setValueIfExists(axis.line, 'color', line.color);\n        }\n        if (tick) {\n            this.setValueIfExists(axis.tick, 'width', tick.width);\n            this.setValueIfExists(axis.tick, 'size', tick.size);\n            this.setValueIfExists(axis.tick, 'color', tick.color);\n        }\n        if (label) {\n            this.setValueIfExists(axis.label, 'fontStyle', label.fontStyle);\n            this.setValueIfExists(axis.label, 'fontWeight', label.fontWeight);\n            this.setValueIfExists(axis.label, 'fontSize', label.fontSize);\n            this.setValueIfExists(axis.label, 'fontFamily', label.fontFamily);\n            this.setValueIfExists(axis.label, 'color', label.color);\n            this.setValueIfExists(axis.label, 'padding', label.padding);\n            this.setValueIfExists(axis.label, 'rotation', label.rotation);\n            this.setValueIfExists(axis.label, 'format', label.format);\n            this.setValueIfExists(axis.label, 'formatter', label.formatter);\n        }\n    };\n    ChartBuilder.createNumberAxis = function (options) {\n        var axis = new NumberAxis();\n        this.initAxis(axis, options);\n        return axis;\n    };\n    ChartBuilder.createCategoryAxis = function (options) {\n        var axis = new CategoryAxis();\n        this.initAxis(axis, options);\n        return axis;\n    };\n    ChartBuilder.createGroupedCategoryAxis = function (options) {\n        var axis = new GroupedCategoryAxis();\n        this.initAxis(axis, options);\n        return axis;\n    };\n    ChartBuilder.createTimeAxis = function (options) {\n        var axis = new TimeAxis();\n        this.initAxis(axis, options);\n        return axis;\n    };\n    ChartBuilder.createAxis = function (options, defaultType) {\n        var AxisClass = this.toAxisClass(options.type || defaultType);\n        if (!AxisClass) {\n            throw new Error('Unknown axis type');\n        }\n        var axis = new AxisClass();\n        this.initAxis(axis, options);\n        return axis;\n    };\n    ChartBuilder.toAxisClass = function (type) {\n        return this.types.get(type);\n    };\n    ChartBuilder.setValueIfExists = function (target, property, value, transform) {\n        if (value === undefined) {\n            return;\n        }\n        target[property] = transform ? transform(value) : value;\n    };\n    ChartBuilder.setTransformedValueIfExists = function (target, property, transform, value) {\n        if (value === undefined) {\n            return;\n        }\n        target[property] = transform(value);\n    };\n    ChartBuilder.markerShapes = convertToMap([\n        ['circle', Circle],\n        ['cross', Cross],\n        ['diamond', Diamond],\n        ['plus', Plus],\n        ['square', Square],\n        ['triangle', Triangle]\n    ]);\n    ChartBuilder.createDropShadow = function (options) {\n        if (options === void 0) { options = {}; }\n        var shadow = new DropShadow();\n        shadow.enabled = options.enabled == null ? true : options.enabled;\n        shadow.xOffset = options.xOffset || 0;\n        shadow.yOffset = options.yOffset || 0;\n        shadow.blur = options.blur || 5;\n        shadow.color = options.color || 'rgba(0, 0, 0, 0.5)';\n        return shadow;\n    };\n    ChartBuilder.types = (function () {\n        var types = new Map();\n        types.set('category', CategoryAxis);\n        types.set('number', NumberAxis);\n        types.set('time', TimeAxis);\n        return types;\n    })();\n    return ChartBuilder;\n}());\nexport { ChartBuilder };\n"]},"metadata":{},"sourceType":"module"}