{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { _ } from \"../utils\";\n/**\n * There are many instances of this component covering each of the areas a row can be entered\n * eg body, pinned left, fullWidth. The component differs from others in that it's given the\n * elements, there is no template. All of the elements are part of the GridPanel.\n */\n\nvar RowContainerComponent =\n/** @class */\nfunction () {\n  function RowContainerComponent(params) {\n    this.childCount = 0;\n    this.rowTemplatesToAdd = [];\n    this.afterGuiAttachedCallbacks = []; // this is to cater for a 'strange behaviour' where when a panel is made visible, it is firing a scroll\n    // event which we want to ignore. see gridPanel.onAnyBodyScroll()\n\n    this.lastMadeVisibleTime = 0;\n    this.eContainer = params.eContainer;\n    this.eViewport = params.eViewport;\n\n    if (params.eWrapper) {\n      this.eWrapper = params.eWrapper;\n    }\n\n    this.hideWhenNoChildren = params.hideWhenNoChildren;\n  }\n\n  RowContainerComponent.prototype.setVerticalScrollPosition = function (verticalScrollPosition) {\n    this.scrollTop = verticalScrollPosition;\n  };\n\n  RowContainerComponent.prototype.postConstruct = function () {\n    this.checkDomOrder();\n    this.checkVisibility();\n    this.gridOptionsWrapper.addEventListener(GridOptionsWrapper.PROP_DOM_LAYOUT, this.checkDomOrder.bind(this));\n  };\n\n  RowContainerComponent.prototype.checkDomOrder = function () {\n    this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder();\n  };\n\n  RowContainerComponent.prototype.getRowElement = function (compId) {\n    return this.eContainer.querySelector(\"[comp-id=\\\"\" + compId + \"\\\"]\");\n  };\n\n  RowContainerComponent.prototype.setHeight = function (height) {\n    if (height == null) {\n      this.eContainer.style.height = '';\n      return;\n    }\n\n    this.eContainer.style.height = height + \"px\";\n\n    if (this.eWrapper) {\n      this.eWrapper.style.height = height + \"px\";\n    }\n  };\n\n  RowContainerComponent.prototype.flushRowTemplates = function () {\n    // if doing dom order, then rowTemplates will be empty,\n    // or if no rows added since last time also empty.\n    if (this.rowTemplatesToAdd.length !== 0) {\n      var htmlToAdd = this.rowTemplatesToAdd.join('');\n\n      _.appendHtml(this.eContainer, htmlToAdd);\n\n      this.rowTemplatesToAdd.length = 0;\n    } // this only empty if no rows since last time, as when\n    // doing dom order, we still have callbacks to process\n\n\n    this.afterGuiAttachedCallbacks.forEach(function (func) {\n      return func();\n    });\n    this.afterGuiAttachedCallbacks.length = 0;\n    this.lastPlacedElement = null;\n  };\n\n  RowContainerComponent.prototype.appendRowTemplate = function (rowTemplate, callback) {\n    if (this.domOrder) {\n      this.lastPlacedElement = _.insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);\n    } else {\n      this.rowTemplatesToAdd.push(rowTemplate);\n    }\n\n    this.afterGuiAttachedCallbacks.push(callback); // it is important we put items in in order, so that when we open a row group,\n    // the new rows are inserted after the opened group, but before the rows below.\n    // that way, the rows below are over the new rows (as dom renders last in dom over\n    // items previous in dom), otherwise the child rows would cover the row below and\n    // that meant the user doesn't see the rows below slide away.\n\n    this.childCount++;\n    this.checkVisibility();\n  };\n\n  RowContainerComponent.prototype.ensureDomOrder = function (eRow) {\n    if (this.domOrder) {\n      _.ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n\n      this.lastPlacedElement = eRow;\n    }\n  };\n\n  RowContainerComponent.prototype.removeRowElement = function (eRow) {\n    this.eContainer.removeChild(eRow);\n    this.childCount--;\n    this.checkVisibility();\n  };\n\n  RowContainerComponent.prototype.checkVisibility = function () {\n    if (!this.hideWhenNoChildren) {\n      return;\n    }\n\n    var eGui = this.eViewport ? this.eViewport : this.eContainer;\n    var visible = this.childCount > 0;\n\n    if (this.visible !== visible) {\n      this.visible = visible;\n      this.lastMadeVisibleTime = new Date().getTime();\n\n      _.setDisplayed(eGui, visible); // if we are showing the viewport, then the scroll is always zero,\n      // so we need to align with the other sections (ie if this is full\n      // width container, and first time showing a full width row, we need to\n      // scroll it so full width rows are show in right place alongside the\n      // body rows). without this, there was an issue with 'loading rows' for\n      // server side row model, as loading rows are full width, and they were\n      // not getting displayed in the right location when rows were expanded.\n\n\n      if (visible && this.eViewport) {\n        this.eViewport.scrollTop = this.scrollTop;\n      }\n    }\n  };\n\n  RowContainerComponent.prototype.isMadeVisibleRecently = function () {\n    var now = new Date().getTime();\n    var millisSinceVisible = now - this.lastMadeVisibleTime;\n    return millisSinceVisible < 500;\n  };\n\n  __decorate([Autowired('gridOptionsWrapper')], RowContainerComponent.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([PostConstruct], RowContainerComponent.prototype, \"postConstruct\", null);\n\n  return RowContainerComponent;\n}();\n\nexport { RowContainerComponent };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/rendering/rowContainerComponent.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Autowired","PostConstruct","GridOptionsWrapper","_","RowContainerComponent","params","childCount","rowTemplatesToAdd","afterGuiAttachedCallbacks","lastMadeVisibleTime","eContainer","eViewport","eWrapper","hideWhenNoChildren","prototype","setVerticalScrollPosition","verticalScrollPosition","scrollTop","postConstruct","checkDomOrder","checkVisibility","gridOptionsWrapper","addEventListener","PROP_DOM_LAYOUT","bind","domOrder","isEnsureDomOrder","getRowElement","compId","querySelector","setHeight","height","style","flushRowTemplates","htmlToAdd","join","appendHtml","forEach","func","lastPlacedElement","appendRowTemplate","rowTemplate","callback","insertTemplateWithDomOrder","push","ensureDomOrder","eRow","removeRowElement","removeChild","eGui","visible","Date","getTime","setDisplayed","isMadeVisibleRecently","now","millisSinceVisible"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { _ } from \"../utils\";\n/**\n * There are many instances of this component covering each of the areas a row can be entered\n * eg body, pinned left, fullWidth. The component differs from others in that it's given the\n * elements, there is no template. All of the elements are part of the GridPanel.\n */\nvar RowContainerComponent = /** @class */ (function () {\n    function RowContainerComponent(params) {\n        this.childCount = 0;\n        this.rowTemplatesToAdd = [];\n        this.afterGuiAttachedCallbacks = [];\n        // this is to cater for a 'strange behaviour' where when a panel is made visible, it is firing a scroll\n        // event which we want to ignore. see gridPanel.onAnyBodyScroll()\n        this.lastMadeVisibleTime = 0;\n        this.eContainer = params.eContainer;\n        this.eViewport = params.eViewport;\n        if (params.eWrapper) {\n            this.eWrapper = params.eWrapper;\n        }\n        this.hideWhenNoChildren = params.hideWhenNoChildren;\n    }\n    RowContainerComponent.prototype.setVerticalScrollPosition = function (verticalScrollPosition) {\n        this.scrollTop = verticalScrollPosition;\n    };\n    RowContainerComponent.prototype.postConstruct = function () {\n        this.checkDomOrder();\n        this.checkVisibility();\n        this.gridOptionsWrapper.addEventListener(GridOptionsWrapper.PROP_DOM_LAYOUT, this.checkDomOrder.bind(this));\n    };\n    RowContainerComponent.prototype.checkDomOrder = function () {\n        this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder();\n    };\n    RowContainerComponent.prototype.getRowElement = function (compId) {\n        return this.eContainer.querySelector(\"[comp-id=\\\"\" + compId + \"\\\"]\");\n    };\n    RowContainerComponent.prototype.setHeight = function (height) {\n        if (height == null) {\n            this.eContainer.style.height = '';\n            return;\n        }\n        this.eContainer.style.height = height + \"px\";\n        if (this.eWrapper) {\n            this.eWrapper.style.height = height + \"px\";\n        }\n    };\n    RowContainerComponent.prototype.flushRowTemplates = function () {\n        // if doing dom order, then rowTemplates will be empty,\n        // or if no rows added since last time also empty.\n        if (this.rowTemplatesToAdd.length !== 0) {\n            var htmlToAdd = this.rowTemplatesToAdd.join('');\n            _.appendHtml(this.eContainer, htmlToAdd);\n            this.rowTemplatesToAdd.length = 0;\n        }\n        // this only empty if no rows since last time, as when\n        // doing dom order, we still have callbacks to process\n        this.afterGuiAttachedCallbacks.forEach(function (func) { return func(); });\n        this.afterGuiAttachedCallbacks.length = 0;\n        this.lastPlacedElement = null;\n    };\n    RowContainerComponent.prototype.appendRowTemplate = function (rowTemplate, callback) {\n        if (this.domOrder) {\n            this.lastPlacedElement = _.insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);\n        }\n        else {\n            this.rowTemplatesToAdd.push(rowTemplate);\n        }\n        this.afterGuiAttachedCallbacks.push(callback);\n        // it is important we put items in in order, so that when we open a row group,\n        // the new rows are inserted after the opened group, but before the rows below.\n        // that way, the rows below are over the new rows (as dom renders last in dom over\n        // items previous in dom), otherwise the child rows would cover the row below and\n        // that meant the user doesn't see the rows below slide away.\n        this.childCount++;\n        this.checkVisibility();\n    };\n    RowContainerComponent.prototype.ensureDomOrder = function (eRow) {\n        if (this.domOrder) {\n            _.ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    };\n    RowContainerComponent.prototype.removeRowElement = function (eRow) {\n        this.eContainer.removeChild(eRow);\n        this.childCount--;\n        this.checkVisibility();\n    };\n    RowContainerComponent.prototype.checkVisibility = function () {\n        if (!this.hideWhenNoChildren) {\n            return;\n        }\n        var eGui = this.eViewport ? this.eViewport : this.eContainer;\n        var visible = this.childCount > 0;\n        if (this.visible !== visible) {\n            this.visible = visible;\n            this.lastMadeVisibleTime = new Date().getTime();\n            _.setDisplayed(eGui, visible);\n            // if we are showing the viewport, then the scroll is always zero,\n            // so we need to align with the other sections (ie if this is full\n            // width container, and first time showing a full width row, we need to\n            // scroll it so full width rows are show in right place alongside the\n            // body rows). without this, there was an issue with 'loading rows' for\n            // server side row model, as loading rows are full width, and they were\n            // not getting displayed in the right location when rows were expanded.\n            if (visible && this.eViewport) {\n                this.eViewport.scrollTop = this.scrollTop;\n            }\n        }\n    };\n    RowContainerComponent.prototype.isMadeVisibleRecently = function () {\n        var now = new Date().getTime();\n        var millisSinceVisible = now - this.lastMadeVisibleTime;\n        return millisSinceVisible < 500;\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], RowContainerComponent.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], RowContainerComponent.prototype, \"postConstruct\", null);\n    return RowContainerComponent;\n}());\nexport { RowContainerComponent };\n"]},"metadata":{},"sourceType":"module"}