{"ast":null,"code":"import { RowNode, Events, _ } from \"@ag-grid-community/core\";\n\nvar ClientSideNodeManager =\n/** @class */\nfunction () {\n  function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {\n    this.nextId = 0; // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n\n    this.allNodesMap = {};\n    this.rootNode = rootNode;\n    this.gridOptionsWrapper = gridOptionsWrapper;\n    this.context = context;\n    this.eventService = eventService;\n    this.columnController = columnController;\n    this.gridApi = gridApi;\n    this.columnApi = columnApi;\n    this.selectionController = selectionController;\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n    this.rootNode.allLeafChildren = [];\n    this.rootNode.childrenAfterGroup = [];\n    this.rootNode.childrenAfterSort = [];\n    this.rootNode.childrenAfterFilter = []; // if we make this class a bean, then can annotate postConstruct\n\n    this.postConstruct();\n  } // @PostConstruct - this is not a bean, so postConstruct called by constructor\n\n\n  ClientSideNodeManager.prototype.postConstruct = function () {\n    // func below doesn't have 'this' pointer, so need to pull out these bits\n    this.getNodeChildDetails = this.gridOptionsWrapper.getNodeChildDetailsFunc();\n    this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n    this.doesDataFlower = this.gridOptionsWrapper.getDoesDataFlowerFunc();\n    this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n    this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n    this.doingLegacyTreeData = !this.doingTreeData && _.exists(this.getNodeChildDetails);\n    this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n\n    if (this.getNodeChildDetails) {\n      console.warn(\"ag-Grid: the callback nodeChildDetailsFunc() is now deprecated. The new way of doing\\n                                    tree data in ag-Grid was introduced in v14 (released November 2017). In the next\\n                                    major release of ag-Grid we will be dropping support for the old version of\\n                                    tree data. If you are reading this message, please go to the docs to see how\\n                                    to implement Tree Data without using nodeChildDetailsFunc().\");\n    }\n  };\n\n  ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n    var result = _.cloneObject(this.allNodesMap);\n\n    return result;\n  };\n\n  ClientSideNodeManager.prototype.getRowNode = function (id) {\n    return this.allNodesMap[id];\n  };\n\n  ClientSideNodeManager.prototype.setRowData = function (rowData) {\n    this.rootNode.childrenAfterFilter = null;\n    this.rootNode.childrenAfterGroup = null;\n    this.rootNode.childrenAfterSort = null;\n    this.rootNode.childrenMapped = null;\n    this.nextId = 0;\n    this.allNodesMap = {};\n\n    if (!rowData) {\n      this.rootNode.allLeafChildren = [];\n      this.rootNode.childrenAfterGroup = [];\n      return;\n    } // kick off recursion\n    // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n    // sets the parent node on each row (even if we are not grouping). so setting parent node\n    // here is for benefit of ag-grid-community users\n\n\n    var result = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n\n    if (this.doingLegacyTreeData) {\n      this.rootNode.childrenAfterGroup = result;\n      this.setLeafChildren(this.rootNode);\n    } else {\n      this.rootNode.allLeafChildren = result;\n    }\n  };\n\n  ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n    if (this.isLegacyTreeData()) {\n      return null;\n    }\n\n    var rowNodeTransaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    var nodesToUnselect = [];\n    this.executeAdd(rowDataTran, rowNodeTransaction);\n    this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.updateSelection(nodesToUnselect);\n\n    if (rowNodeOrder) {\n      _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n    }\n\n    return rowNodeTransaction;\n  };\n\n  ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n    var selectionChanged = nodesToUnselect.length > 0;\n\n    if (selectionChanged) {\n      nodesToUnselect.forEach(function (rowNode) {\n        rowNode.setSelected(false, false, true);\n      });\n    } // we do this regardless of nodes to unselect or not, as it's possible\n    // a new node was inserted, so a parent that was previously selected (as all\n    // children were selected) should not be tri-state (as new one unselected against\n    // all other selected children).\n\n\n    this.selectionController.updateGroupsFromChildrenSelections();\n\n    if (selectionChanged) {\n      var event_1 = {\n        type: Events.EVENT_SELECTION_CHANGED,\n        api: this.gridApi,\n        columnApi: this.columnApi\n      };\n      this.eventService.dispatchEvent(event_1);\n    }\n  };\n\n  ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n    var _this = this;\n\n    var add = rowDataTran.add,\n        addIndex = rowDataTran.addIndex;\n\n    if (!add) {\n      return;\n    }\n\n    var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n\n    if (useIndex) {\n      // items get inserted in reverse order for index insertion\n      add.reverse().forEach(function (item) {\n        var newRowNode = _this.addRowNode(item, addIndex);\n\n        rowNodeTransaction.add.push(newRowNode);\n      });\n    } else {\n      add.forEach(function (item) {\n        var newRowNode = _this.addRowNode(item);\n\n        rowNodeTransaction.add.push(newRowNode);\n      });\n    }\n  };\n\n  ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    var _this = this;\n\n    var remove = rowDataTran.remove;\n\n    if (!remove) {\n      return;\n    }\n\n    var rowIdsRemoved = {};\n    remove.forEach(function (item) {\n      var rowNode = _this.lookupRowNode(item);\n\n      if (!rowNode) {\n        return;\n      } // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n      // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n\n\n      if (rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      } // so row renderer knows to fade row out (and not reposition it)\n\n\n      rowNode.clearRowTop(); // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n      // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n\n      rowIdsRemoved[rowNode.id] = true; // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n\n      delete _this.allNodesMap[rowNode.id];\n      rowNodeTransaction.remove.push(rowNode);\n    });\n    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) {\n      return !rowIdsRemoved[rowNode.id];\n    });\n  };\n\n  ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    var _this = this;\n\n    var update = rowDataTran.update;\n\n    if (!update) {\n      return;\n    }\n\n    update.forEach(function (item) {\n      var rowNode = _this.lookupRowNode(item);\n\n      if (!rowNode) {\n        return;\n      }\n\n      rowNode.updateData(item);\n\n      if (!rowNode.selectable && rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n\n      _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n\n      rowNodeTransaction.update.push(rowNode);\n    });\n  };\n\n  ClientSideNodeManager.prototype.addRowNode = function (data, index) {\n    var newNode = this.createNode(data, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n\n    if (_.exists(index)) {\n      _.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);\n    } else {\n      this.rootNode.allLeafChildren.push(newNode);\n    }\n\n    return newNode;\n  };\n\n  ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n    var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n    var rowNode;\n\n    if (_.exists(rowNodeIdFunc)) {\n      // find rowNode using id\n      var id = rowNodeIdFunc(data);\n      rowNode = this.allNodesMap[id];\n\n      if (!rowNode) {\n        console.error(\"ag-Grid: could not find row id=\" + id + \", data item was not found for this id\");\n        return null;\n      }\n    } else {\n      // find rowNode using object references\n      rowNode = _.find(this.rootNode.allLeafChildren, function (rowNode) {\n        return rowNode.data === data;\n      });\n\n      if (!rowNode) {\n        console.error(\"ag-Grid: could not find data item as object was not found\", data);\n        return null;\n      }\n    }\n\n    return rowNode;\n  };\n\n  ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {\n    var _this = this; // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum\n\n\n    if (typeof rowData === 'string') {\n      console.warn('ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n      return;\n    }\n\n    var rowNodes = [];\n    rowData.forEach(function (dataItem) {\n      var node = _this.createNode(dataItem, parent, level);\n\n      rowNodes.push(node);\n    });\n    return rowNodes;\n  };\n\n  ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n    var node = new RowNode();\n    this.context.createBean(node);\n    var nodeChildDetails = this.doingLegacyTreeData ? this.getNodeChildDetails(dataItem) : null;\n\n    if (nodeChildDetails && nodeChildDetails.group) {\n      node.group = true;\n      node.childrenAfterGroup = this.recursiveFunction(nodeChildDetails.children, node, level + 1);\n      node.expanded = nodeChildDetails.expanded === true;\n      node.field = nodeChildDetails.field;\n      node.key = nodeChildDetails.key; // pull out all the leaf children and add to our node\n\n      this.setLeafChildren(node);\n    } else {\n      node.group = false;\n      this.setMasterForRow(node, dataItem, level, true);\n    } // support for backwards compatibility, canFlow is now called 'master'\n\n    /** @deprecated is now 'master' */\n\n\n    node.canFlower = node.master;\n\n    if (parent && !this.suppressParentsInRowNodes) {\n      node.parent = parent;\n    }\n\n    node.level = level;\n    node.setDataAndId(dataItem, this.nextId.toString());\n\n    if (this.allNodesMap[node.id]) {\n      console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n    }\n\n    this.allNodesMap[node.id] = node;\n    this.nextId++;\n    return node;\n  };\n\n  ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n    if (this.doingTreeData) {\n      rowNode.setMaster(false);\n\n      if (setExpanded) {\n        rowNode.expanded = false;\n      }\n    } else {\n      // this is the default, for when doing grid data\n      if (this.doesDataFlower) {\n        rowNode.setMaster(this.doesDataFlower(data));\n      } else if (this.doingMasterDetail) {\n        // if we are doing master detail, then the\n        // default is that everything can be a Master Row.\n        if (this.isRowMasterFunc) {\n          rowNode.setMaster(this.isRowMasterFunc(data));\n        } else {\n          rowNode.setMaster(true);\n        }\n      } else {\n        rowNode.setMaster(false);\n      }\n\n      if (setExpanded) {\n        var rowGroupColumns = this.columnController.getRowGroupColumns();\n        var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0; // need to take row group into account when determining level\n\n        var masterRowLevel = level + numRowGroupColumns;\n        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n      }\n    }\n  };\n\n  ClientSideNodeManager.prototype.isExpanded = function (level) {\n    var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n\n    if (expandByDefault === -1) {\n      return true;\n    } else {\n      return level < expandByDefault;\n    }\n  }; // this is only used for doing legacy tree data\n\n\n  ClientSideNodeManager.prototype.setLeafChildren = function (node) {\n    node.allLeafChildren = [];\n\n    if (node.childrenAfterGroup) {\n      node.childrenAfterGroup.forEach(function (childAfterGroup) {\n        if (childAfterGroup.group) {\n          if (childAfterGroup.allLeafChildren) {\n            childAfterGroup.allLeafChildren.forEach(function (leafChild) {\n              return node.allLeafChildren.push(leafChild);\n            });\n          }\n        } else {\n          node.allLeafChildren.push(childAfterGroup);\n        }\n      });\n    }\n  };\n\n  ClientSideNodeManager.prototype.isLegacyTreeData = function () {\n    var rowsAlreadyGrouped = _.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n\n    if (rowsAlreadyGrouped) {\n      console.warn('ag-Grid: adding and removing rows is not supported when using nodeChildDetailsFunc, ie it is not ' + 'supported for legacy tree data. Please see the docs on the new preferred way of providing tree data that works with delta updates.');\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ClientSideNodeManager.TOP_LEVEL = 0;\n  ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n  return ClientSideNodeManager;\n}();\n\nexport { ClientSideNodeManager };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideNodeManager.js"],"names":["RowNode","Events","_","ClientSideNodeManager","rootNode","gridOptionsWrapper","context","eventService","columnController","gridApi","columnApi","selectionController","nextId","allNodesMap","group","level","id","ROOT_NODE_ID","allLeafChildren","childrenAfterGroup","childrenAfterSort","childrenAfterFilter","postConstruct","prototype","getNodeChildDetails","getNodeChildDetailsFunc","suppressParentsInRowNodes","isSuppressParentsInRowNodes","doesDataFlower","getDoesDataFlowerFunc","isRowMasterFunc","getIsRowMasterFunc","doingTreeData","isTreeData","doingLegacyTreeData","exists","doingMasterDetail","isMasterDetail","console","warn","getCopyOfNodesMap","result","cloneObject","getRowNode","setRowData","rowData","childrenMapped","recursiveFunction","TOP_LEVEL","setLeafChildren","updateRowData","rowDataTran","rowNodeOrder","isLegacyTreeData","rowNodeTransaction","remove","update","add","nodesToUnselect","executeAdd","executeRemove","executeUpdate","updateSelection","sortRowNodesByOrder","selectionChanged","length","forEach","rowNode","setSelected","updateGroupsFromChildrenSelections","event_1","type","EVENT_SELECTION_CHANGED","api","dispatchEvent","_this","addIndex","useIndex","reverse","item","newRowNode","addRowNode","push","rowIdsRemoved","lookupRowNode","isSelected","clearRowTop","filter","updateData","selectable","setMasterForRow","data","index","newNode","createNode","insertIntoArray","rowNodeIdFunc","getRowNodeIdFunc","error","find","parent","rowNodes","dataItem","node","createBean","nodeChildDetails","children","expanded","field","key","canFlower","master","setDataAndId","toString","setExpanded","setMaster","rowGroupColumns","getRowGroupColumns","numRowGroupColumns","masterRowLevel","isExpanded","expandByDefault","getGroupDefaultExpanded","childAfterGroup","leafChild","rowsAlreadyGrouped"],"mappings":"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","sourcesContent":["import { RowNode, Events, _ } from \"@ag-grid-community/core\";\nvar ClientSideNodeManager = /** @class */ (function () {\n    function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {\n        this.nextId = 0;\n        // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n        this.allNodesMap = {};\n        this.rootNode = rootNode;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.context = context;\n        this.eventService = eventService;\n        this.columnController = columnController;\n        this.gridApi = gridApi;\n        this.columnApi = columnApi;\n        this.selectionController = selectionController;\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n        this.rootNode.allLeafChildren = [];\n        this.rootNode.childrenAfterGroup = [];\n        this.rootNode.childrenAfterSort = [];\n        this.rootNode.childrenAfterFilter = [];\n        // if we make this class a bean, then can annotate postConstruct\n        this.postConstruct();\n    }\n    // @PostConstruct - this is not a bean, so postConstruct called by constructor\n    ClientSideNodeManager.prototype.postConstruct = function () {\n        // func below doesn't have 'this' pointer, so need to pull out these bits\n        this.getNodeChildDetails = this.gridOptionsWrapper.getNodeChildDetailsFunc();\n        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n        this.doesDataFlower = this.gridOptionsWrapper.getDoesDataFlowerFunc();\n        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n        this.doingLegacyTreeData = !this.doingTreeData && _.exists(this.getNodeChildDetails);\n        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n        if (this.getNodeChildDetails) {\n            console.warn(\"ag-Grid: the callback nodeChildDetailsFunc() is now deprecated. The new way of doing\\n                                    tree data in ag-Grid was introduced in v14 (released November 2017). In the next\\n                                    major release of ag-Grid we will be dropping support for the old version of\\n                                    tree data. If you are reading this message, please go to the docs to see how\\n                                    to implement Tree Data without using nodeChildDetailsFunc().\");\n        }\n    };\n    ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n        var result = _.cloneObject(this.allNodesMap);\n        return result;\n    };\n    ClientSideNodeManager.prototype.getRowNode = function (id) {\n        return this.allNodesMap[id];\n    };\n    ClientSideNodeManager.prototype.setRowData = function (rowData) {\n        this.rootNode.childrenAfterFilter = null;\n        this.rootNode.childrenAfterGroup = null;\n        this.rootNode.childrenAfterSort = null;\n        this.rootNode.childrenMapped = null;\n        this.nextId = 0;\n        this.allNodesMap = {};\n        if (!rowData) {\n            this.rootNode.allLeafChildren = [];\n            this.rootNode.childrenAfterGroup = [];\n            return;\n        }\n        // kick off recursion\n        // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n        // sets the parent node on each row (even if we are not grouping). so setting parent node\n        // here is for benefit of ag-grid-community users\n        var result = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n        if (this.doingLegacyTreeData) {\n            this.rootNode.childrenAfterGroup = result;\n            this.setLeafChildren(this.rootNode);\n        }\n        else {\n            this.rootNode.allLeafChildren = result;\n        }\n    };\n    ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        if (this.isLegacyTreeData()) {\n            return null;\n        }\n        var rowNodeTransaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var nodesToUnselect = [];\n        this.executeAdd(rowDataTran, rowNodeTransaction);\n        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.updateSelection(nodesToUnselect);\n        if (rowNodeOrder) {\n            _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n        }\n        return rowNodeTransaction;\n    };\n    ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n        var selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            nodesToUnselect.forEach(function (rowNode) {\n                rowNode.setSelected(false, false, true);\n            });\n        }\n        // we do this regardless of nodes to unselect or not, as it's possible\n        // a new node was inserted, so a parent that was previously selected (as all\n        // children were selected) should not be tri-state (as new one unselected against\n        // all other selected children).\n        this.selectionController.updateGroupsFromChildrenSelections();\n        if (selectionChanged) {\n            var event_1 = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;\n        if (!add) {\n            return;\n        }\n        var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // items get inserted in reverse order for index insertion\n            add.reverse().forEach(function (item) {\n                var newRowNode = _this.addRowNode(item, addIndex);\n                rowNodeTransaction.add.push(newRowNode);\n            });\n        }\n        else {\n            add.forEach(function (item) {\n                var newRowNode = _this.addRowNode(item);\n                rowNodeTransaction.add.push(newRowNode);\n            });\n        }\n    };\n    ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var remove = rowDataTran.remove;\n        if (!remove) {\n            return;\n        }\n        var rowIdsRemoved = {};\n        remove.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTop();\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete _this.allNodesMap[rowNode.id];\n            rowNodeTransaction.remove.push(rowNode);\n        });\n        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) { return !rowIdsRemoved[rowNode.id]; });\n    };\n    ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var update = rowDataTran.update;\n        if (!update) {\n            return;\n        }\n        update.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            rowNode.updateData(item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n            rowNodeTransaction.update.push(rowNode);\n        });\n    };\n    ClientSideNodeManager.prototype.addRowNode = function (data, index) {\n        var newNode = this.createNode(data, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n        if (_.exists(index)) {\n            _.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);\n        }\n        else {\n            this.rootNode.allLeafChildren.push(newNode);\n        }\n        return newNode;\n    };\n    ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        var rowNode;\n        if (_.exists(rowNodeIdFunc)) {\n            // find rowNode using id\n            var id = rowNodeIdFunc(data);\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(\"ag-Grid: could not find row id=\" + id + \", data item was not found for this id\");\n                return null;\n            }\n        }\n        else {\n            // find rowNode using object references\n            rowNode = _.find(this.rootNode.allLeafChildren, function (rowNode) { return rowNode.data === data; });\n            if (!rowNode) {\n                console.error(\"ag-Grid: could not find data item as object was not found\", data);\n                return null;\n            }\n        }\n        return rowNode;\n    };\n    ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {\n        var _this = this;\n        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum\n        if (typeof rowData === 'string') {\n            console.warn('ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n            return;\n        }\n        var rowNodes = [];\n        rowData.forEach(function (dataItem) {\n            var node = _this.createNode(dataItem, parent, level);\n            rowNodes.push(node);\n        });\n        return rowNodes;\n    };\n    ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n        var node = new RowNode();\n        this.context.createBean(node);\n        var nodeChildDetails = this.doingLegacyTreeData ? this.getNodeChildDetails(dataItem) : null;\n        if (nodeChildDetails && nodeChildDetails.group) {\n            node.group = true;\n            node.childrenAfterGroup = this.recursiveFunction(nodeChildDetails.children, node, level + 1);\n            node.expanded = nodeChildDetails.expanded === true;\n            node.field = nodeChildDetails.field;\n            node.key = nodeChildDetails.key;\n            // pull out all the leaf children and add to our node\n            this.setLeafChildren(node);\n        }\n        else {\n            node.group = false;\n            this.setMasterForRow(node, dataItem, level, true);\n        }\n        // support for backwards compatibility, canFlow is now called 'master'\n        /** @deprecated is now 'master' */\n        node.canFlower = node.master;\n        if (parent && !this.suppressParentsInRowNodes) {\n            node.parent = parent;\n        }\n        node.level = level;\n        node.setDataAndId(dataItem, this.nextId.toString());\n        if (this.allNodesMap[node.id]) {\n            console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n        }\n        this.allNodesMap[node.id] = node;\n        this.nextId++;\n        return node;\n    };\n    ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n        if (this.doingTreeData) {\n            rowNode.setMaster(false);\n            if (setExpanded) {\n                rowNode.expanded = false;\n            }\n        }\n        else {\n            // this is the default, for when doing grid data\n            if (this.doesDataFlower) {\n                rowNode.setMaster(this.doesDataFlower(data));\n            }\n            else if (this.doingMasterDetail) {\n                // if we are doing master detail, then the\n                // default is that everything can be a Master Row.\n                if (this.isRowMasterFunc) {\n                    rowNode.setMaster(this.isRowMasterFunc(data));\n                }\n                else {\n                    rowNode.setMaster(true);\n                }\n            }\n            else {\n                rowNode.setMaster(false);\n            }\n            if (setExpanded) {\n                var rowGroupColumns = this.columnController.getRowGroupColumns();\n                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n                // need to take row group into account when determining level\n                var masterRowLevel = level + numRowGroupColumns;\n                rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n            }\n        }\n    };\n    ClientSideNodeManager.prototype.isExpanded = function (level) {\n        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n        if (expandByDefault === -1) {\n            return true;\n        }\n        else {\n            return level < expandByDefault;\n        }\n    };\n    // this is only used for doing legacy tree data\n    ClientSideNodeManager.prototype.setLeafChildren = function (node) {\n        node.allLeafChildren = [];\n        if (node.childrenAfterGroup) {\n            node.childrenAfterGroup.forEach(function (childAfterGroup) {\n                if (childAfterGroup.group) {\n                    if (childAfterGroup.allLeafChildren) {\n                        childAfterGroup.allLeafChildren.forEach(function (leafChild) { return node.allLeafChildren.push(leafChild); });\n                    }\n                }\n                else {\n                    node.allLeafChildren.push(childAfterGroup);\n                }\n            });\n        }\n    };\n    ClientSideNodeManager.prototype.isLegacyTreeData = function () {\n        var rowsAlreadyGrouped = _.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n        if (rowsAlreadyGrouped) {\n            console.warn('ag-Grid: adding and removing rows is not supported when using nodeChildDetailsFunc, ie it is not ' +\n                'supported for legacy tree data. Please see the docs on the new preferred way of providing tree data that works with delta updates.');\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    ClientSideNodeManager.TOP_LEVEL = 0;\n    ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n    return ClientSideNodeManager;\n}());\nexport { ClientSideNodeManager };\n"]},"metadata":{},"sourceType":"module"}