{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { _, Autowired, Bean, BeanStub, Constants, Events, NumberSequence, PostConstruct, PreDestroy, Qualifier, RowNode, RowNodeBlockLoader, RowNodeCache } from \"@ag-grid-community/core\";\nimport { ServerSideCache } from \"./serverSideCache\";\nimport { ServerSideBlock } from \"./serverSideBlock\";\n\nvar ServerSideRowModel =\n/** @class */\nfunction (_super) {\n  __extends(ServerSideRowModel, _super);\n\n  function ServerSideRowModel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // we don't implement as lazy row heights is not supported in this row model\n\n\n  ServerSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    return false;\n  };\n\n  ServerSideRowModel.prototype.postConstruct = function () {\n    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n    this.addEventListeners();\n  };\n\n  ServerSideRowModel.prototype.start = function () {\n    var datasource = this.gridOptionsWrapper.getServerSideDatasource();\n\n    if (datasource) {\n      this.setDatasource(datasource);\n    }\n  };\n\n  ServerSideRowModel.prototype.destroyDatasource = function () {\n    if (!this.datasource) {\n      return;\n    }\n\n    if (this.datasource.destroy) {\n      this.datasource.destroy();\n    }\n\n    this.rowRenderer.datasourceChanged();\n    this.datasource = undefined;\n  };\n\n  ServerSideRowModel.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('ServerSideRowModel');\n  };\n\n  ServerSideRowModel.prototype.addEventListeners = function () {\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n  };\n\n  ServerSideRowModel.prototype.setDatasource = function (datasource) {\n    this.destroyDatasource();\n    this.datasource = datasource;\n    this.reset();\n  };\n\n  ServerSideRowModel.prototype.isLastRowFound = function () {\n    if (this.cacheExists()) {\n      return this.rootNode.childrenCache.isMaxRowFound();\n    }\n\n    return false;\n  };\n\n  ServerSideRowModel.prototype.onColumnEverything = function () {\n    // this is a hack for one customer only, so they can suppress the resetting of the columns.\n    // The problem the customer had was they were api.setColumnDefs() after the data source came\n    // back with data. So this stops the reload from the grid after the data comes back.\n    // Once we have \"AG-1591 Allow delta changes to columns\" fixed, then this hack can be taken out.\n    if (this.gridOptionsWrapper.isSuppressEnterpriseResetOnNewColumns()) {\n      return;\n    } // every other customer can continue as normal and have it working!!!\n    // check if anything pertaining to fetching data has changed, and if it has, reset, but if\n    // it has not, don't reset\n\n\n    var resetRequired;\n\n    if (!this.cacheParams) {\n      resetRequired = true;\n    } else {\n      var rowGroupColumnVos = this.toValueObjects(this.columnController.getRowGroupColumns());\n      var valueColumnVos = this.toValueObjects(this.columnController.getValueColumns());\n      var pivotColumnVos = this.toValueObjects(this.columnController.getPivotColumns());\n      var sortModelDifferent = !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n      var rowGroupDifferent = !_.jsonEquals(this.cacheParams.rowGroupCols, rowGroupColumnVos);\n      var pivotDifferent = !_.jsonEquals(this.cacheParams.pivotCols, pivotColumnVos);\n      var valuesDifferent = !_.jsonEquals(this.cacheParams.valueCols, valueColumnVos);\n      resetRequired = sortModelDifferent || rowGroupDifferent || pivotDifferent || valuesDifferent;\n    }\n\n    if (resetRequired) {\n      this.reset();\n    }\n  };\n\n  ServerSideRowModel.prototype.onFilterChanged = function () {\n    this.reset();\n  }; // returns back all the cols that were effected by the sorting. eg if we were sorting by col A,\n  // and now we are sorting by col B, the list of impacted cols should be A and B. so if a cache\n  // is impacted by sorting on A or B then it needs to be refreshed. this includes where the cache\n  // was previously sorted by A and then the A sort now needs to be cleared.\n\n\n  ServerSideRowModel.prototype.findChangedColumnsInSort = function (newSortModel, oldSortModel) {\n    var allColsInBothSorts = [];\n    [newSortModel, oldSortModel].forEach(function (sortModel) {\n      if (sortModel) {\n        var ids = sortModel.map(function (sm) {\n          return sm.colId;\n        });\n        allColsInBothSorts = allColsInBothSorts.concat(ids);\n      }\n    });\n\n    var differentSorts = function (oldSortItem, newSortItem) {\n      var oldSort = oldSortItem ? oldSortItem.sort : null;\n      var newSort = newSortItem ? newSortItem.sort : null;\n      return oldSort !== newSort;\n    };\n\n    var differentIndexes = function (oldSortItem, newSortItem) {\n      var oldIndex = oldSortModel.indexOf(oldSortItem);\n      var newIndex = newSortModel.indexOf(newSortItem);\n      return oldIndex !== newIndex;\n    };\n\n    return allColsInBothSorts.filter(function (colId) {\n      var oldSortItem = _.find(oldSortModel, function (sm) {\n        return sm.colId === colId;\n      });\n\n      var newSortItem = _.find(newSortModel, function (sm) {\n        return sm.colId === colId;\n      });\n\n      return differentSorts(oldSortItem, newSortItem) || differentIndexes(oldSortItem, newSortItem);\n    });\n  };\n\n  ServerSideRowModel.prototype.onSortChanged = function () {\n    if (!this.cacheExists()) {\n      return;\n    }\n\n    var newSortModel = this.extractSortModel();\n    var oldSortModel = this.cacheParams.sortModel;\n    var changedColumnsInSort = this.findChangedColumnsInSort(newSortModel, oldSortModel);\n    this.cacheParams.sortModel = newSortModel;\n    var rowGroupColIds = this.columnController.getRowGroupColumns().map(function (col) {\n      return col.getId();\n    });\n    var serverSideCache = this.rootNode.childrenCache;\n    var sortingWithValueCol = this.isSortingWithValueColumn(changedColumnsInSort);\n    var sortingWithSecondaryCol = this.isSortingWithSecondaryColumn(changedColumnsInSort);\n    var sortAlwaysResets = this.gridOptionsWrapper.isServerSideSortingAlwaysResets();\n\n    if (sortAlwaysResets || sortingWithValueCol || sortingWithSecondaryCol) {\n      this.reset();\n    } else {\n      serverSideCache.refreshCacheAfterSort(changedColumnsInSort, rowGroupColIds);\n    }\n  };\n\n  ServerSideRowModel.prototype.onValueChanged = function () {\n    this.reset();\n  };\n\n  ServerSideRowModel.prototype.onColumnRowGroupChanged = function () {\n    this.reset();\n  };\n\n  ServerSideRowModel.prototype.onColumnPivotChanged = function () {\n    this.reset();\n  };\n\n  ServerSideRowModel.prototype.onPivotModeChanged = function () {\n    this.reset();\n  };\n\n  ServerSideRowModel.prototype.onRowGroupOpened = function (event) {\n    var _this = this;\n\n    var rowNode = event.node;\n\n    if (rowNode.expanded) {\n      if (rowNode.master) {\n        this.createDetailNode(rowNode);\n      } else if (_.missing(rowNode.childrenCache)) {\n        this.createNodeCache(rowNode);\n      }\n    } else if (this.gridOptionsWrapper.isPurgeClosedRowNodes() && _.exists(rowNode.childrenCache)) {\n      rowNode.childrenCache = this.destroyBean(rowNode.childrenCache);\n    }\n\n    var shouldAnimate = function () {\n      var rowAnimationEnabled = _this.gridOptionsWrapper.isAnimateRows();\n\n      if (rowNode.master) {\n        return rowAnimationEnabled && rowNode.expanded;\n      }\n\n      return rowAnimationEnabled;\n    };\n\n    this.updateRowIndexesAndBounds();\n    var modelUpdatedEvent = {\n      type: Events.EVENT_MODEL_UPDATED,\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      newPage: false,\n      newData: false,\n      animate: shouldAnimate(),\n      keepRenderedRows: true\n    };\n    this.eventService.dispatchEvent(modelUpdatedEvent);\n  };\n\n  ServerSideRowModel.prototype.reset = function () {\n    this.rootNode = new RowNode();\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.createBean(this.rootNode);\n\n    if (this.datasource) {\n      this.createNewRowNodeBlockLoader();\n      this.cacheParams = this.createCacheParams();\n      this.createNodeCache(this.rootNode);\n      this.updateRowIndexesAndBounds();\n    } // this event: 1) clears selection 2) updates filters 3) shows/hides 'no rows' overlay\n\n\n    var rowDataChangedEvent = {\n      type: Events.EVENT_ROW_DATA_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(rowDataChangedEvent); // this gets the row to render rows (or remove the previously rendered rows, as it's blank to start).\n    // important to NOT pass in an event with keepRenderedRows or animate, as we want the renderer\n    // to treat the rows as new rows, as it's all new data\n\n    var modelUpdatedEvent = {\n      type: Events.EVENT_MODEL_UPDATED,\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      animate: false,\n      keepRenderedRows: false,\n      newData: false,\n      newPage: false\n    };\n    this.eventService.dispatchEvent(modelUpdatedEvent);\n  };\n\n  ServerSideRowModel.prototype.createNewRowNodeBlockLoader = function () {\n    this.destroyRowNodeBlockLoader();\n    var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n    var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();\n    this.rowNodeBlockLoader = new RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis);\n    this.createBean(this.rowNodeBlockLoader);\n  };\n\n  ServerSideRowModel.prototype.destroyRowNodeBlockLoader = function () {\n    if (this.rowNodeBlockLoader) {\n      this.destroyBean(this.rowNodeBlockLoader);\n      this.rowNodeBlockLoader = undefined;\n    }\n  };\n\n  ServerSideRowModel.prototype.toValueObjects = function (columns) {\n    var _this = this;\n\n    return columns.map(function (col) {\n      return {\n        id: col.getId(),\n        aggFunc: col.getAggFunc(),\n        displayName: _this.columnController.getDisplayNameForColumn(col, 'model'),\n        field: col.getColDef().field\n      };\n    });\n  };\n\n  ServerSideRowModel.prototype.createCacheParams = function () {\n    var rowGroupColumnVos = this.toValueObjects(this.columnController.getRowGroupColumns());\n    var valueColumnVos = this.toValueObjects(this.columnController.getValueColumns());\n    var pivotColumnVos = this.toValueObjects(this.columnController.getPivotColumns());\n    var dynamicRowHeight = this.gridOptionsWrapper.isDynamicRowHeight();\n    var maxBlocksInCache = this.gridOptionsWrapper.getMaxBlocksInCache();\n\n    if (dynamicRowHeight && maxBlocksInCache >= 0) {\n      console.warn('ag-Grid: Server Side Row Model does not support Dynamic Row Height and Cache Purging. ' + 'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.');\n      maxBlocksInCache = undefined;\n    }\n\n    if (maxBlocksInCache >= 0 && this.columnController.isAutoRowHeightActive()) {\n      console.warn('ag-Grid: Server Side Row Model does not support Auto Row Height and Cache Purging. ' + 'Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.');\n      maxBlocksInCache = undefined;\n    }\n\n    var params = {\n      // the columns the user has grouped and aggregated by\n      valueCols: valueColumnVos,\n      rowGroupCols: rowGroupColumnVos,\n      pivotCols: pivotColumnVos,\n      pivotMode: this.columnController.isPivotMode(),\n      // sort and filter model\n      filterModel: this.filterManager.getFilterModel(),\n      sortModel: this.extractSortModel(),\n      rowNodeBlockLoader: this.rowNodeBlockLoader,\n      datasource: this.datasource,\n      lastAccessedSequence: new NumberSequence(),\n      overflowSize: 1,\n      initialRowCount: 1,\n      maxConcurrentRequests: this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests() || 0,\n      maxBlocksInCache: maxBlocksInCache,\n      blockSize: this.gridOptionsWrapper.getCacheBlockSize(),\n      rowHeight: this.rowHeight,\n      dynamicRowHeight: dynamicRowHeight\n    }; // set defaults\n\n    if (!(params.maxConcurrentRequests >= 1)) {\n      params.maxConcurrentRequests = 2;\n    } // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n    // server for one page at a time. so the default if not specified is 100.\n\n\n    if (!(params.blockSize >= 1)) {\n      params.blockSize = ServerSideBlock.DefaultBlockSize;\n    } // if user doesn't give initial rows to display, we assume zero\n\n\n    if (!(params.initialRowCount >= 1)) {\n      params.initialRowCount = 0;\n    } // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n    // the current page and request first row of next page\n\n\n    if (!(params.overflowSize >= 1)) {\n      params.overflowSize = 1;\n    }\n\n    return params;\n  };\n\n  ServerSideRowModel.prototype.createNodeCache = function (rowNode) {\n    var cache = new ServerSideCache(this.cacheParams, rowNode);\n    this.getContext().createBean(cache);\n    cache.addEventListener(RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));\n    rowNode.childrenCache = cache;\n  };\n\n  ServerSideRowModel.prototype.onCacheUpdated = function () {\n    this.updateRowIndexesAndBounds();\n    var modelUpdatedEvent = {\n      type: Events.EVENT_MODEL_UPDATED,\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      animate: this.gridOptionsWrapper.isAnimateRows(),\n      keepRenderedRows: true,\n      newPage: false,\n      newData: false\n    };\n    this.eventService.dispatchEvent(modelUpdatedEvent);\n  };\n\n  ServerSideRowModel.prototype.onRowHeightChanged = function () {\n    this.updateRowIndexesAndBounds();\n    var modelUpdatedEvent = {\n      type: Events.EVENT_MODEL_UPDATED,\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      newPage: false,\n      newData: false,\n      animate: true,\n      keepRenderedRows: true\n    };\n    this.eventService.dispatchEvent(modelUpdatedEvent);\n  };\n\n  ServerSideRowModel.prototype.updateRowIndexesAndBounds = function () {\n    if (this.cacheExists()) {\n      // NOTE: should not be casting here, the RowModel should use IServerSideRowModel interface?\n      var serverSideCache = this.rootNode.childrenCache;\n      this.resetRowTops(serverSideCache);\n      this.setDisplayIndexes(serverSideCache);\n    }\n  };\n\n  ServerSideRowModel.prototype.setDisplayIndexes = function (cache) {\n    var numberSequence = new NumberSequence();\n    var nextRowTop = {\n      value: 0\n    };\n    cache.setDisplayIndexes(numberSequence, nextRowTop);\n  }; // resetting row tops is needed for animation, as part of the operation is saving the old location,\n  // which is needed for rows that are transitioning in\n\n\n  ServerSideRowModel.prototype.resetRowTops = function (cache) {\n    var numberSequence = new NumberSequence();\n    cache.forEachNodeDeep(function (rowNode) {\n      return rowNode.clearRowTop();\n    }, numberSequence);\n  };\n\n  ServerSideRowModel.prototype.getRow = function (index) {\n    if (this.cacheExists()) {\n      return this.rootNode.childrenCache.getRow(index);\n    }\n\n    return null;\n  };\n\n  ServerSideRowModel.prototype.getRowCount = function () {\n    if (!this.cacheExists()) {\n      return 1;\n    }\n\n    var serverSideCache = this.rootNode.childrenCache;\n    var res = serverSideCache.getDisplayIndexEnd();\n    return res;\n  };\n\n  ServerSideRowModel.prototype.getTopLevelRowCount = function () {\n    if (!this.cacheExists()) {\n      return 1;\n    }\n\n    var serverSideCache = this.rootNode.childrenCache;\n    return serverSideCache.getVirtualRowCount();\n  };\n\n  ServerSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n    if (!this.cacheExists()) {\n      return topLevelIndex;\n    }\n\n    var serverSideCache = this.rootNode.childrenCache;\n    return serverSideCache.getTopLevelRowDisplayedIndex(topLevelIndex);\n  };\n\n  ServerSideRowModel.prototype.getRowBounds = function (index) {\n    if (!this.cacheExists()) {\n      return {\n        rowTop: 0,\n        rowHeight: this.rowHeight\n      };\n    }\n\n    var serverSideCache = this.rootNode.childrenCache;\n    return serverSideCache.getRowBounds(index);\n  };\n\n  ServerSideRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n    if (pixel === 0) {\n      return 0;\n    }\n\n    if (!this.cacheExists()) {\n      return 0;\n    }\n\n    var serverSideCache = this.rootNode.childrenCache;\n    return serverSideCache.getRowIndexAtPixel(pixel);\n  };\n\n  ServerSideRowModel.prototype.getCurrentPageHeight = function () {\n    return this.rowHeight * this.getRowCount();\n  };\n\n  ServerSideRowModel.prototype.isEmpty = function () {\n    return false;\n  };\n\n  ServerSideRowModel.prototype.isRowsToRender = function () {\n    return this.cacheExists() && this.getRowCount() > 0;\n  };\n\n  ServerSideRowModel.prototype.getType = function () {\n    return Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n  };\n\n  ServerSideRowModel.prototype.forEachNode = function (callback) {\n    if (this.cacheExists()) {\n      this.rootNode.childrenCache.forEachNodeDeep(callback);\n    }\n  };\n\n  ServerSideRowModel.prototype.executeOnCache = function (route, callback) {\n    if (!this.cacheExists()) {\n      return;\n    }\n\n    var topLevelCache = this.rootNode.childrenCache;\n    var cacheToPurge = topLevelCache.getChildCache(route);\n\n    if (cacheToPurge) {\n      callback(cacheToPurge);\n    }\n  };\n\n  ServerSideRowModel.prototype.purgeCache = function (route) {\n    if (route === void 0) {\n      route = [];\n    }\n\n    this.executeOnCache(route, function (cache) {\n      return cache.purgeCache();\n    });\n  };\n\n  ServerSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n    if (_.exists(lastInRange) && firstInRange.parent !== lastInRange.parent) {\n      return [];\n    }\n\n    return firstInRange.parent.childrenCache.getRowNodesInRange(lastInRange, firstInRange);\n  };\n\n  ServerSideRowModel.prototype.getRowNode = function (id) {\n    var result = null;\n    this.forEachNode(function (rowNode) {\n      if (rowNode.id === id) {\n        result = rowNode;\n      }\n\n      if (rowNode.detailNode && rowNode.detailNode.id === id) {\n        result = rowNode.detailNode;\n      }\n    });\n    return result;\n  };\n\n  ServerSideRowModel.prototype.getBlockState = function () {\n    if (this.rowNodeBlockLoader) {\n      return this.rowNodeBlockLoader.getBlockState();\n    }\n\n    return null;\n  }; // always returns true - this is used by the\n\n\n  ServerSideRowModel.prototype.isRowPresent = function (rowNode) {\n    var foundRowNode = this.getRowNode(rowNode.id);\n    return !!foundRowNode;\n  };\n\n  ServerSideRowModel.prototype.extractSortModel = function () {\n    var sortModel = this.sortController.getSortModel(); // when using tree data we just return the sort model with the 'ag-Grid-AutoColumn' as is, i.e not broken out\n    // into it's constitute group columns as they are not defined up front and can vary per node.\n\n    if (this.gridOptionsWrapper.isTreeData()) {\n      return sortModel;\n    }\n\n    var rowGroupCols = this.toValueObjects(this.columnController.getRowGroupColumns()); // find index of auto group column in sort model\n\n    var autoGroupIndex = -1;\n\n    for (var i = 0; i < sortModel.length; ++i) {\n      if (sortModel[i].colId === Constants.GROUP_AUTO_COLUMN_ID) {\n        autoGroupIndex = i;\n        break;\n      }\n    } // replace auto column with individual group columns\n\n\n    if (autoGroupIndex > -1) {\n      var individualGroupCols = rowGroupCols.map(function (group) {\n        return {\n          colId: group.id,\n          sort: sortModel[autoGroupIndex].sort\n        };\n      }); // remove auto group column\n\n      sortModel.splice(autoGroupIndex, 1);\n\n      var _loop_1 = function (i) {\n        var individualGroupCol = individualGroupCols[i]; // don't add individual group column if non group column already exists as it gets precedence\n\n        var sameNonGroupColumnExists = sortModel.some(function (sm) {\n          return sm.colId === individualGroupCol.colId;\n        });\n\n        if (sameNonGroupColumnExists) {\n          return \"continue\";\n        }\n\n        sortModel.splice(autoGroupIndex++, 0, individualGroupCol);\n      }; // insert individual group columns\n\n\n      for (var i = 0; i < individualGroupCols.length; i++) {\n        _loop_1(i);\n      }\n    } // strip out multi-column prefix on colId's\n\n\n    if (this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n      var multiColumnPrefix = Constants.GROUP_AUTO_COLUMN_ID + \"-\";\n\n      for (var i = 0; i < sortModel.length; ++i) {\n        if (sortModel[i].colId.indexOf(multiColumnPrefix) > -1) {\n          sortModel[i].colId = sortModel[i].colId.substr(multiColumnPrefix.length);\n        }\n      }\n    }\n\n    return sortModel;\n  };\n\n  ServerSideRowModel.prototype.isSortingWithValueColumn = function (changedColumnsInSort) {\n    var valueColIds = this.columnController.getValueColumns().map(function (col) {\n      return col.getColId();\n    });\n\n    for (var i = 0; i < changedColumnsInSort.length; i++) {\n      if (valueColIds.indexOf(changedColumnsInSort[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ServerSideRowModel.prototype.isSortingWithSecondaryColumn = function (changedColumnsInSort) {\n    if (!this.columnController.getSecondaryColumns()) {\n      return false;\n    }\n\n    var secondaryColIds = this.columnController.getSecondaryColumns().map(function (col) {\n      return col.getColId();\n    });\n\n    for (var i = 0; i < changedColumnsInSort.length; i++) {\n      if (secondaryColIds.indexOf(changedColumnsInSort[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ServerSideRowModel.prototype.cacheExists = function () {\n    return _.exists(this.rootNode) && _.exists(this.rootNode.childrenCache);\n  };\n\n  ServerSideRowModel.prototype.createDetailNode = function (masterNode) {\n    if (_.exists(masterNode.detailNode)) {\n      return masterNode.detailNode;\n    }\n\n    var detailNode = new RowNode();\n    this.getContext().createBean(detailNode);\n    detailNode.detail = true;\n    detailNode.selectable = false;\n    detailNode.parent = masterNode;\n\n    if (_.exists(masterNode.id)) {\n      detailNode.id = 'detail_' + masterNode.id;\n    }\n\n    detailNode.data = masterNode.data;\n    detailNode.level = masterNode.level + 1;\n    var defaultDetailRowHeight = 200;\n    var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(detailNode).height;\n    detailNode.rowHeight = rowHeight ? rowHeight : defaultDetailRowHeight;\n    masterNode.detailNode = detailNode;\n    return detailNode;\n  };\n\n  ServerSideRowModel.prototype.isLoading = function () {\n    return this.rowNodeBlockLoader ? this.rowNodeBlockLoader.isLoading() : false;\n  };\n\n  __decorate([Autowired('gridOptionsWrapper')], ServerSideRowModel.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnController')], ServerSideRowModel.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('filterManager')], ServerSideRowModel.prototype, \"filterManager\", void 0);\n\n  __decorate([Autowired('sortController')], ServerSideRowModel.prototype, \"sortController\", void 0);\n\n  __decorate([Autowired('gridApi')], ServerSideRowModel.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], ServerSideRowModel.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('rowRenderer')], ServerSideRowModel.prototype, \"rowRenderer\", void 0);\n\n  __decorate([PostConstruct], ServerSideRowModel.prototype, \"postConstruct\", null);\n\n  __decorate([PreDestroy], ServerSideRowModel.prototype, \"destroyDatasource\", null);\n\n  __decorate([__param(0, Qualifier('loggerFactory'))], ServerSideRowModel.prototype, \"setBeans\", null);\n\n  __decorate([PreDestroy], ServerSideRowModel.prototype, \"destroyRowNodeBlockLoader\", null);\n\n  ServerSideRowModel = __decorate([Bean('rowModel')], ServerSideRowModel);\n  return ServerSideRowModel;\n}(BeanStub);\n\nexport { ServerSideRowModel };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/server-side-row-model/dist/es6/serverSideRowModel/serverSideRowModel.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","_","Autowired","Bean","BeanStub","Constants","Events","NumberSequence","PostConstruct","PreDestroy","Qualifier","RowNode","RowNodeBlockLoader","RowNodeCache","ServerSideCache","ServerSideBlock","ServerSideRowModel","_super","apply","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","postConstruct","rowHeight","gridOptionsWrapper","getRowHeightAsNumber","addEventListeners","start","datasource","getServerSideDatasource","setDatasource","destroyDatasource","destroy","rowRenderer","datasourceChanged","undefined","setBeans","loggerFactory","logger","addManagedListener","eventService","EVENT_COLUMN_ROW_GROUP_CHANGED","onColumnRowGroupChanged","bind","EVENT_ROW_GROUP_OPENED","onRowGroupOpened","EVENT_COLUMN_PIVOT_MODE_CHANGED","onPivotModeChanged","EVENT_COLUMN_EVERYTHING_CHANGED","onColumnEverything","EVENT_COLUMN_VALUE_CHANGED","onValueChanged","EVENT_COLUMN_PIVOT_CHANGED","onColumnPivotChanged","EVENT_FILTER_CHANGED","onFilterChanged","EVENT_SORT_CHANGED","onSortChanged","reset","isLastRowFound","cacheExists","rootNode","childrenCache","isMaxRowFound","isSuppressEnterpriseResetOnNewColumns","resetRequired","cacheParams","rowGroupColumnVos","toValueObjects","columnController","getRowGroupColumns","valueColumnVos","getValueColumns","pivotColumnVos","getPivotColumns","sortModelDifferent","jsonEquals","sortModel","sortController","getSortModel","rowGroupDifferent","rowGroupCols","pivotDifferent","pivotCols","valuesDifferent","valueCols","findChangedColumnsInSort","newSortModel","oldSortModel","allColsInBothSorts","forEach","ids","map","sm","colId","concat","differentSorts","oldSortItem","newSortItem","oldSort","sort","newSort","differentIndexes","oldIndex","indexOf","newIndex","filter","find","extractSortModel","changedColumnsInSort","rowGroupColIds","col","getId","serverSideCache","sortingWithValueCol","isSortingWithValueColumn","sortingWithSecondaryCol","isSortingWithSecondaryColumn","sortAlwaysResets","isServerSideSortingAlwaysResets","refreshCacheAfterSort","event","_this","rowNode","node","expanded","master","createDetailNode","missing","createNodeCache","isPurgeClosedRowNodes","exists","destroyBean","shouldAnimate","rowAnimationEnabled","isAnimateRows","updateRowIndexesAndBounds","modelUpdatedEvent","type","EVENT_MODEL_UPDATED","api","getApi","columnApi","getColumnApi","newPage","newData","animate","keepRenderedRows","dispatchEvent","group","level","createBean","createNewRowNodeBlockLoader","createCacheParams","rowDataChangedEvent","EVENT_ROW_DATA_CHANGED","gridApi","destroyRowNodeBlockLoader","maxConcurrentRequests","getMaxConcurrentDatasourceRequests","blockLoadDebounceMillis","getBlockLoadDebounceMillis","rowNodeBlockLoader","columns","id","aggFunc","getAggFunc","displayName","getDisplayNameForColumn","field","getColDef","dynamicRowHeight","isDynamicRowHeight","maxBlocksInCache","getMaxBlocksInCache","console","warn","isAutoRowHeightActive","params","pivotMode","isPivotMode","filterModel","filterManager","getFilterModel","lastAccessedSequence","overflowSize","initialRowCount","blockSize","getCacheBlockSize","DefaultBlockSize","cache","getContext","addEventListener","EVENT_CACHE_UPDATED","onCacheUpdated","onRowHeightChanged","resetRowTops","setDisplayIndexes","numberSequence","nextRowTop","value","forEachNodeDeep","clearRowTop","getRow","index","getRowCount","res","getDisplayIndexEnd","getTopLevelRowCount","getVirtualRowCount","getTopLevelRowDisplayedIndex","topLevelIndex","getRowBounds","rowTop","getRowIndexAtPixel","pixel","getCurrentPageHeight","isEmpty","isRowsToRender","getType","ROW_MODEL_TYPE_SERVER_SIDE","forEachNode","callback","executeOnCache","route","topLevelCache","cacheToPurge","getChildCache","purgeCache","getNodesInRangeForSelection","firstInRange","lastInRange","parent","getRowNodesInRange","getRowNode","result","detailNode","getBlockState","isRowPresent","foundRowNode","isTreeData","autoGroupIndex","GROUP_AUTO_COLUMN_ID","individualGroupCols","splice","_loop_1","individualGroupCol","sameNonGroupColumnExists","some","isGroupMultiAutoColumn","multiColumnPrefix","substr","valueColIds","getColId","getSecondaryColumns","secondaryColIds","masterNode","detail","selectable","data","defaultDetailRowHeight","getRowHeightForNode","height","isLoading"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { _, Autowired, Bean, BeanStub, Constants, Events, NumberSequence, PostConstruct, PreDestroy, Qualifier, RowNode, RowNodeBlockLoader, RowNodeCache } from \"@ag-grid-community/core\";\nimport { ServerSideCache } from \"./serverSideCache\";\nimport { ServerSideBlock } from \"./serverSideBlock\";\nvar ServerSideRowModel = /** @class */ (function (_super) {\n    __extends(ServerSideRowModel, _super);\n    function ServerSideRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // we don't implement as lazy row heights is not supported in this row model\n    ServerSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) { return false; };\n    ServerSideRowModel.prototype.postConstruct = function () {\n        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        this.addEventListeners();\n    };\n    ServerSideRowModel.prototype.start = function () {\n        var datasource = this.gridOptionsWrapper.getServerSideDatasource();\n        if (datasource) {\n            this.setDatasource(datasource);\n        }\n    };\n    ServerSideRowModel.prototype.destroyDatasource = function () {\n        if (!this.datasource) {\n            return;\n        }\n        if (this.datasource.destroy) {\n            this.datasource.destroy();\n        }\n        this.rowRenderer.datasourceChanged();\n        this.datasource = undefined;\n    };\n    ServerSideRowModel.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('ServerSideRowModel');\n    };\n    ServerSideRowModel.prototype.addEventListeners = function () {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    };\n    ServerSideRowModel.prototype.setDatasource = function (datasource) {\n        this.destroyDatasource();\n        this.datasource = datasource;\n        this.reset();\n    };\n    ServerSideRowModel.prototype.isLastRowFound = function () {\n        if (this.cacheExists()) {\n            return this.rootNode.childrenCache.isMaxRowFound();\n        }\n        return false;\n    };\n    ServerSideRowModel.prototype.onColumnEverything = function () {\n        // this is a hack for one customer only, so they can suppress the resetting of the columns.\n        // The problem the customer had was they were api.setColumnDefs() after the data source came\n        // back with data. So this stops the reload from the grid after the data comes back.\n        // Once we have \"AG-1591 Allow delta changes to columns\" fixed, then this hack can be taken out.\n        if (this.gridOptionsWrapper.isSuppressEnterpriseResetOnNewColumns()) {\n            return;\n        }\n        // every other customer can continue as normal and have it working!!!\n        // check if anything pertaining to fetching data has changed, and if it has, reset, but if\n        // it has not, don't reset\n        var resetRequired;\n        if (!this.cacheParams) {\n            resetRequired = true;\n        }\n        else {\n            var rowGroupColumnVos = this.toValueObjects(this.columnController.getRowGroupColumns());\n            var valueColumnVos = this.toValueObjects(this.columnController.getValueColumns());\n            var pivotColumnVos = this.toValueObjects(this.columnController.getPivotColumns());\n            var sortModelDifferent = !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n            var rowGroupDifferent = !_.jsonEquals(this.cacheParams.rowGroupCols, rowGroupColumnVos);\n            var pivotDifferent = !_.jsonEquals(this.cacheParams.pivotCols, pivotColumnVos);\n            var valuesDifferent = !_.jsonEquals(this.cacheParams.valueCols, valueColumnVos);\n            resetRequired = sortModelDifferent || rowGroupDifferent || pivotDifferent || valuesDifferent;\n        }\n        if (resetRequired) {\n            this.reset();\n        }\n    };\n    ServerSideRowModel.prototype.onFilterChanged = function () {\n        this.reset();\n    };\n    // returns back all the cols that were effected by the sorting. eg if we were sorting by col A,\n    // and now we are sorting by col B, the list of impacted cols should be A and B. so if a cache\n    // is impacted by sorting on A or B then it needs to be refreshed. this includes where the cache\n    // was previously sorted by A and then the A sort now needs to be cleared.\n    ServerSideRowModel.prototype.findChangedColumnsInSort = function (newSortModel, oldSortModel) {\n        var allColsInBothSorts = [];\n        [newSortModel, oldSortModel].forEach(function (sortModel) {\n            if (sortModel) {\n                var ids = sortModel.map(function (sm) { return sm.colId; });\n                allColsInBothSorts = allColsInBothSorts.concat(ids);\n            }\n        });\n        var differentSorts = function (oldSortItem, newSortItem) {\n            var oldSort = oldSortItem ? oldSortItem.sort : null;\n            var newSort = newSortItem ? newSortItem.sort : null;\n            return oldSort !== newSort;\n        };\n        var differentIndexes = function (oldSortItem, newSortItem) {\n            var oldIndex = oldSortModel.indexOf(oldSortItem);\n            var newIndex = newSortModel.indexOf(newSortItem);\n            return oldIndex !== newIndex;\n        };\n        return allColsInBothSorts.filter(function (colId) {\n            var oldSortItem = _.find(oldSortModel, function (sm) { return sm.colId === colId; });\n            var newSortItem = _.find(newSortModel, function (sm) { return sm.colId === colId; });\n            return differentSorts(oldSortItem, newSortItem) || differentIndexes(oldSortItem, newSortItem);\n        });\n    };\n    ServerSideRowModel.prototype.onSortChanged = function () {\n        if (!this.cacheExists()) {\n            return;\n        }\n        var newSortModel = this.extractSortModel();\n        var oldSortModel = this.cacheParams.sortModel;\n        var changedColumnsInSort = this.findChangedColumnsInSort(newSortModel, oldSortModel);\n        this.cacheParams.sortModel = newSortModel;\n        var rowGroupColIds = this.columnController.getRowGroupColumns().map(function (col) { return col.getId(); });\n        var serverSideCache = this.rootNode.childrenCache;\n        var sortingWithValueCol = this.isSortingWithValueColumn(changedColumnsInSort);\n        var sortingWithSecondaryCol = this.isSortingWithSecondaryColumn(changedColumnsInSort);\n        var sortAlwaysResets = this.gridOptionsWrapper.isServerSideSortingAlwaysResets();\n        if (sortAlwaysResets || sortingWithValueCol || sortingWithSecondaryCol) {\n            this.reset();\n        }\n        else {\n            serverSideCache.refreshCacheAfterSort(changedColumnsInSort, rowGroupColIds);\n        }\n    };\n    ServerSideRowModel.prototype.onValueChanged = function () {\n        this.reset();\n    };\n    ServerSideRowModel.prototype.onColumnRowGroupChanged = function () {\n        this.reset();\n    };\n    ServerSideRowModel.prototype.onColumnPivotChanged = function () {\n        this.reset();\n    };\n    ServerSideRowModel.prototype.onPivotModeChanged = function () {\n        this.reset();\n    };\n    ServerSideRowModel.prototype.onRowGroupOpened = function (event) {\n        var _this = this;\n        var rowNode = event.node;\n        if (rowNode.expanded) {\n            if (rowNode.master) {\n                this.createDetailNode(rowNode);\n            }\n            else if (_.missing(rowNode.childrenCache)) {\n                this.createNodeCache(rowNode);\n            }\n        }\n        else if (this.gridOptionsWrapper.isPurgeClosedRowNodes() && _.exists(rowNode.childrenCache)) {\n            rowNode.childrenCache = this.destroyBean(rowNode.childrenCache);\n        }\n        var shouldAnimate = function () {\n            var rowAnimationEnabled = _this.gridOptionsWrapper.isAnimateRows();\n            if (rowNode.master) {\n                return rowAnimationEnabled && rowNode.expanded;\n            }\n            return rowAnimationEnabled;\n        };\n        this.updateRowIndexesAndBounds();\n        var modelUpdatedEvent = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            newPage: false,\n            newData: false,\n            animate: shouldAnimate(),\n            keepRenderedRows: true\n        };\n        this.eventService.dispatchEvent(modelUpdatedEvent);\n    };\n    ServerSideRowModel.prototype.reset = function () {\n        this.rootNode = new RowNode();\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.createBean(this.rootNode);\n        if (this.datasource) {\n            this.createNewRowNodeBlockLoader();\n            this.cacheParams = this.createCacheParams();\n            this.createNodeCache(this.rootNode);\n            this.updateRowIndexesAndBounds();\n        }\n        // this event: 1) clears selection 2) updates filters 3) shows/hides 'no rows' overlay\n        var rowDataChangedEvent = {\n            type: Events.EVENT_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(rowDataChangedEvent);\n        // this gets the row to render rows (or remove the previously rendered rows, as it's blank to start).\n        // important to NOT pass in an event with keepRenderedRows or animate, as we want the renderer\n        // to treat the rows as new rows, as it's all new data\n        var modelUpdatedEvent = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            animate: false,\n            keepRenderedRows: false,\n            newData: false,\n            newPage: false\n        };\n        this.eventService.dispatchEvent(modelUpdatedEvent);\n    };\n    ServerSideRowModel.prototype.createNewRowNodeBlockLoader = function () {\n        this.destroyRowNodeBlockLoader();\n        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n        var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();\n        this.rowNodeBlockLoader = new RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis);\n        this.createBean(this.rowNodeBlockLoader);\n    };\n    ServerSideRowModel.prototype.destroyRowNodeBlockLoader = function () {\n        if (this.rowNodeBlockLoader) {\n            this.destroyBean(this.rowNodeBlockLoader);\n            this.rowNodeBlockLoader = undefined;\n        }\n    };\n    ServerSideRowModel.prototype.toValueObjects = function (columns) {\n        var _this = this;\n        return columns.map(function (col) { return ({\n            id: col.getId(),\n            aggFunc: col.getAggFunc(),\n            displayName: _this.columnController.getDisplayNameForColumn(col, 'model'),\n            field: col.getColDef().field\n        }); });\n    };\n    ServerSideRowModel.prototype.createCacheParams = function () {\n        var rowGroupColumnVos = this.toValueObjects(this.columnController.getRowGroupColumns());\n        var valueColumnVos = this.toValueObjects(this.columnController.getValueColumns());\n        var pivotColumnVos = this.toValueObjects(this.columnController.getPivotColumns());\n        var dynamicRowHeight = this.gridOptionsWrapper.isDynamicRowHeight();\n        var maxBlocksInCache = this.gridOptionsWrapper.getMaxBlocksInCache();\n        if (dynamicRowHeight && maxBlocksInCache >= 0) {\n            console.warn('ag-Grid: Server Side Row Model does not support Dynamic Row Height and Cache Purging. ' +\n                'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.');\n            maxBlocksInCache = undefined;\n        }\n        if (maxBlocksInCache >= 0 && this.columnController.isAutoRowHeightActive()) {\n            console.warn('ag-Grid: Server Side Row Model does not support Auto Row Height and Cache Purging. ' +\n                'Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.');\n            maxBlocksInCache = undefined;\n        }\n        var params = {\n            // the columns the user has grouped and aggregated by\n            valueCols: valueColumnVos,\n            rowGroupCols: rowGroupColumnVos,\n            pivotCols: pivotColumnVos,\n            pivotMode: this.columnController.isPivotMode(),\n            // sort and filter model\n            filterModel: this.filterManager.getFilterModel(),\n            sortModel: this.extractSortModel(),\n            rowNodeBlockLoader: this.rowNodeBlockLoader,\n            datasource: this.datasource,\n            lastAccessedSequence: new NumberSequence(),\n            overflowSize: 1,\n            initialRowCount: 1,\n            maxConcurrentRequests: this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests() || 0,\n            maxBlocksInCache: maxBlocksInCache,\n            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),\n            rowHeight: this.rowHeight,\n            dynamicRowHeight: dynamicRowHeight\n        };\n        // set defaults\n        if (!(params.maxConcurrentRequests >= 1)) {\n            params.maxConcurrentRequests = 2;\n        }\n        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n        // server for one page at a time. so the default if not specified is 100.\n        if (!(params.blockSize >= 1)) {\n            params.blockSize = ServerSideBlock.DefaultBlockSize;\n        }\n        // if user doesn't give initial rows to display, we assume zero\n        if (!(params.initialRowCount >= 1)) {\n            params.initialRowCount = 0;\n        }\n        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n        // the current page and request first row of next page\n        if (!(params.overflowSize >= 1)) {\n            params.overflowSize = 1;\n        }\n        return params;\n    };\n    ServerSideRowModel.prototype.createNodeCache = function (rowNode) {\n        var cache = new ServerSideCache(this.cacheParams, rowNode);\n        this.getContext().createBean(cache);\n        cache.addEventListener(RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));\n        rowNode.childrenCache = cache;\n    };\n    ServerSideRowModel.prototype.onCacheUpdated = function () {\n        this.updateRowIndexesAndBounds();\n        var modelUpdatedEvent = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            animate: this.gridOptionsWrapper.isAnimateRows(),\n            keepRenderedRows: true,\n            newPage: false,\n            newData: false\n        };\n        this.eventService.dispatchEvent(modelUpdatedEvent);\n    };\n    ServerSideRowModel.prototype.onRowHeightChanged = function () {\n        this.updateRowIndexesAndBounds();\n        var modelUpdatedEvent = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            newPage: false,\n            newData: false,\n            animate: true,\n            keepRenderedRows: true\n        };\n        this.eventService.dispatchEvent(modelUpdatedEvent);\n    };\n    ServerSideRowModel.prototype.updateRowIndexesAndBounds = function () {\n        if (this.cacheExists()) {\n            // NOTE: should not be casting here, the RowModel should use IServerSideRowModel interface?\n            var serverSideCache = this.rootNode.childrenCache;\n            this.resetRowTops(serverSideCache);\n            this.setDisplayIndexes(serverSideCache);\n        }\n    };\n    ServerSideRowModel.prototype.setDisplayIndexes = function (cache) {\n        var numberSequence = new NumberSequence();\n        var nextRowTop = { value: 0 };\n        cache.setDisplayIndexes(numberSequence, nextRowTop);\n    };\n    // resetting row tops is needed for animation, as part of the operation is saving the old location,\n    // which is needed for rows that are transitioning in\n    ServerSideRowModel.prototype.resetRowTops = function (cache) {\n        var numberSequence = new NumberSequence();\n        cache.forEachNodeDeep(function (rowNode) { return rowNode.clearRowTop(); }, numberSequence);\n    };\n    ServerSideRowModel.prototype.getRow = function (index) {\n        if (this.cacheExists()) {\n            return this.rootNode.childrenCache.getRow(index);\n        }\n        return null;\n    };\n    ServerSideRowModel.prototype.getRowCount = function () {\n        if (!this.cacheExists()) {\n            return 1;\n        }\n        var serverSideCache = this.rootNode.childrenCache;\n        var res = serverSideCache.getDisplayIndexEnd();\n        return res;\n    };\n    ServerSideRowModel.prototype.getTopLevelRowCount = function () {\n        if (!this.cacheExists()) {\n            return 1;\n        }\n        var serverSideCache = this.rootNode.childrenCache;\n        return serverSideCache.getVirtualRowCount();\n    };\n    ServerSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        if (!this.cacheExists()) {\n            return topLevelIndex;\n        }\n        var serverSideCache = this.rootNode.childrenCache;\n        return serverSideCache.getTopLevelRowDisplayedIndex(topLevelIndex);\n    };\n    ServerSideRowModel.prototype.getRowBounds = function (index) {\n        if (!this.cacheExists()) {\n            return {\n                rowTop: 0,\n                rowHeight: this.rowHeight\n            };\n        }\n        var serverSideCache = this.rootNode.childrenCache;\n        return serverSideCache.getRowBounds(index);\n    };\n    ServerSideRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n        if (pixel === 0) {\n            return 0;\n        }\n        if (!this.cacheExists()) {\n            return 0;\n        }\n        var serverSideCache = this.rootNode.childrenCache;\n        return serverSideCache.getRowIndexAtPixel(pixel);\n    };\n    ServerSideRowModel.prototype.getCurrentPageHeight = function () {\n        return this.rowHeight * this.getRowCount();\n    };\n    ServerSideRowModel.prototype.isEmpty = function () {\n        return false;\n    };\n    ServerSideRowModel.prototype.isRowsToRender = function () {\n        return this.cacheExists() && this.getRowCount() > 0;\n    };\n    ServerSideRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n    };\n    ServerSideRowModel.prototype.forEachNode = function (callback) {\n        if (this.cacheExists()) {\n            this.rootNode.childrenCache.forEachNodeDeep(callback);\n        }\n    };\n    ServerSideRowModel.prototype.executeOnCache = function (route, callback) {\n        if (!this.cacheExists()) {\n            return;\n        }\n        var topLevelCache = this.rootNode.childrenCache;\n        var cacheToPurge = topLevelCache.getChildCache(route);\n        if (cacheToPurge) {\n            callback(cacheToPurge);\n        }\n    };\n    ServerSideRowModel.prototype.purgeCache = function (route) {\n        if (route === void 0) { route = []; }\n        this.executeOnCache(route, function (cache) { return cache.purgeCache(); });\n    };\n    ServerSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        if (_.exists(lastInRange) && firstInRange.parent !== lastInRange.parent) {\n            return [];\n        }\n        return firstInRange.parent.childrenCache.getRowNodesInRange(lastInRange, firstInRange);\n    };\n    ServerSideRowModel.prototype.getRowNode = function (id) {\n        var result = null;\n        this.forEachNode(function (rowNode) {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n            if (rowNode.detailNode && rowNode.detailNode.id === id) {\n                result = rowNode.detailNode;\n            }\n        });\n        return result;\n    };\n    ServerSideRowModel.prototype.getBlockState = function () {\n        if (this.rowNodeBlockLoader) {\n            return this.rowNodeBlockLoader.getBlockState();\n        }\n        return null;\n    };\n    // always returns true - this is used by the\n    ServerSideRowModel.prototype.isRowPresent = function (rowNode) {\n        var foundRowNode = this.getRowNode(rowNode.id);\n        return !!foundRowNode;\n    };\n    ServerSideRowModel.prototype.extractSortModel = function () {\n        var sortModel = this.sortController.getSortModel();\n        // when using tree data we just return the sort model with the 'ag-Grid-AutoColumn' as is, i.e not broken out\n        // into it's constitute group columns as they are not defined up front and can vary per node.\n        if (this.gridOptionsWrapper.isTreeData()) {\n            return sortModel;\n        }\n        var rowGroupCols = this.toValueObjects(this.columnController.getRowGroupColumns());\n        // find index of auto group column in sort model\n        var autoGroupIndex = -1;\n        for (var i = 0; i < sortModel.length; ++i) {\n            if (sortModel[i].colId === Constants.GROUP_AUTO_COLUMN_ID) {\n                autoGroupIndex = i;\n                break;\n            }\n        }\n        // replace auto column with individual group columns\n        if (autoGroupIndex > -1) {\n            var individualGroupCols = rowGroupCols.map(function (group) {\n                return {\n                    colId: group.id,\n                    sort: sortModel[autoGroupIndex].sort\n                };\n            });\n            // remove auto group column\n            sortModel.splice(autoGroupIndex, 1);\n            var _loop_1 = function (i) {\n                var individualGroupCol = individualGroupCols[i];\n                // don't add individual group column if non group column already exists as it gets precedence\n                var sameNonGroupColumnExists = sortModel.some(function (sm) { return sm.colId === individualGroupCol.colId; });\n                if (sameNonGroupColumnExists) {\n                    return \"continue\";\n                }\n                sortModel.splice(autoGroupIndex++, 0, individualGroupCol);\n            };\n            // insert individual group columns\n            for (var i = 0; i < individualGroupCols.length; i++) {\n                _loop_1(i);\n            }\n        }\n        // strip out multi-column prefix on colId's\n        if (this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n            var multiColumnPrefix = Constants.GROUP_AUTO_COLUMN_ID + \"-\";\n            for (var i = 0; i < sortModel.length; ++i) {\n                if (sortModel[i].colId.indexOf(multiColumnPrefix) > -1) {\n                    sortModel[i].colId = sortModel[i].colId.substr(multiColumnPrefix.length);\n                }\n            }\n        }\n        return sortModel;\n    };\n    ServerSideRowModel.prototype.isSortingWithValueColumn = function (changedColumnsInSort) {\n        var valueColIds = this.columnController.getValueColumns().map(function (col) { return col.getColId(); });\n        for (var i = 0; i < changedColumnsInSort.length; i++) {\n            if (valueColIds.indexOf(changedColumnsInSort[i]) > -1) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ServerSideRowModel.prototype.isSortingWithSecondaryColumn = function (changedColumnsInSort) {\n        if (!this.columnController.getSecondaryColumns()) {\n            return false;\n        }\n        var secondaryColIds = this.columnController.getSecondaryColumns().map(function (col) { return col.getColId(); });\n        for (var i = 0; i < changedColumnsInSort.length; i++) {\n            if (secondaryColIds.indexOf(changedColumnsInSort[i]) > -1) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ServerSideRowModel.prototype.cacheExists = function () {\n        return _.exists(this.rootNode) && _.exists(this.rootNode.childrenCache);\n    };\n    ServerSideRowModel.prototype.createDetailNode = function (masterNode) {\n        if (_.exists(masterNode.detailNode)) {\n            return masterNode.detailNode;\n        }\n        var detailNode = new RowNode();\n        this.getContext().createBean(detailNode);\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        detailNode.parent = masterNode;\n        if (_.exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n        var defaultDetailRowHeight = 200;\n        var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(detailNode).height;\n        detailNode.rowHeight = rowHeight ? rowHeight : defaultDetailRowHeight;\n        masterNode.detailNode = detailNode;\n        return detailNode;\n    };\n    ServerSideRowModel.prototype.isLoading = function () {\n        return this.rowNodeBlockLoader ? this.rowNodeBlockLoader.isLoading() : false;\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ServerSideRowModel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], ServerSideRowModel.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('filterManager')\n    ], ServerSideRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], ServerSideRowModel.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ServerSideRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ServerSideRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], ServerSideRowModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        PostConstruct\n    ], ServerSideRowModel.prototype, \"postConstruct\", null);\n    __decorate([\n        PreDestroy\n    ], ServerSideRowModel.prototype, \"destroyDatasource\", null);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], ServerSideRowModel.prototype, \"setBeans\", null);\n    __decorate([\n        PreDestroy\n    ], ServerSideRowModel.prototype, \"destroyRowNodeBlockLoader\", null);\n    ServerSideRowModel = __decorate([\n        Bean('rowModel')\n    ], ServerSideRowModel);\n    return ServerSideRowModel;\n}(BeanStub));\nexport { ServerSideRowModel };\n"]},"metadata":{},"sourceType":"module"}