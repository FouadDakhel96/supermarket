{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Constants } from \"./constants\";\nimport { Events } from \"./events\";\n\nvar SortController =\n/** @class */\nfunction (_super) {\n  __extends(SortController, _super);\n\n  function SortController() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // used by the public api, for saving the sort model\n\n\n    _this.getSortModel = function () {\n      return _this.getColumnsWithSortingOrdered().map(function (column) {\n        return {\n          colId: column.getColId(),\n          sort: column.getSort()\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  SortController_1 = SortController;\n\n  SortController.prototype.progressSort = function (column, multiSort, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    var nextDirection = this.getNextSortDirection(column);\n    this.setSortForColumn(column, nextDirection, multiSort, source);\n  };\n\n  SortController.prototype.setSortForColumn = function (column, sort, multiSort, source) {\n    if (source === void 0) {\n      source = \"api\";\n    } // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n\n\n    if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {\n      sort = null;\n    } // update sort on current col\n\n\n    column.setSort(sort, source); // sortedAt used for knowing order of cols when multi-col sort\n\n    if (column.getSort()) {\n      var sortedAt = Number(new Date().valueOf());\n      column.setSortedAt(sortedAt);\n    } else {\n      column.setSortedAt(null);\n    }\n\n    var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort(); // clear sort on all columns except this one, and update the icons\n\n    if (!doingMultiSort) {\n      this.clearSortBarThisColumn(column, source);\n    }\n\n    this.dispatchSortChangedEvents();\n  }; // gets called by API, so if data changes, use can call this, which will end up\n  // working out the sort order again of the rows.\n\n\n  SortController.prototype.onSortChanged = function () {\n    this.dispatchSortChangedEvents();\n  };\n\n  SortController.prototype.dispatchSortChangedEvents = function () {\n    var event = {\n      type: Events.EVENT_SORT_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  SortController.prototype.clearSortBarThisColumn = function (columnToSkip, source) {\n    this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {\n      // Do not clear if either holding shift, or if column in question was clicked\n      if (!(columnToClear === columnToSkip)) {\n        // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n        // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n        columnToClear.setSort(undefined, source);\n      }\n    });\n  };\n\n  SortController.prototype.getNextSortDirection = function (column) {\n    var sortingOrder;\n\n    if (column.getColDef().sortingOrder) {\n      sortingOrder = column.getColDef().sortingOrder;\n    } else if (this.gridOptionsWrapper.getSortingOrder()) {\n      sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n    } else {\n      sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;\n    }\n\n    if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n      console.warn(\"ag-grid: sortingOrder must be an array with at least one element, currently it's \" + sortingOrder);\n      return null;\n    }\n\n    var currentIndex = sortingOrder.indexOf(column.getSort());\n    var notInArray = currentIndex < 0;\n    var lastItemInArray = currentIndex == sortingOrder.length - 1;\n    var result;\n\n    if (notInArray || lastItemInArray) {\n      result = sortingOrder[0];\n    } else {\n      result = sortingOrder[currentIndex + 1];\n    } // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n\n\n    if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n      console.warn('ag-grid: invalid sort type ' + result);\n      return null;\n    }\n\n    return result;\n  };\n\n  SortController.prototype.setSortModel = function (sortModel, source) {\n    var _this = this;\n\n    if (source === void 0) {\n      source = \"api\";\n    } // first up, clear any previous sort\n\n\n    var sortModelProvided = sortModel && sortModel.length > 0;\n    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n    allColumnsIncludingAuto.forEach(function (column) {\n      var sortForCol = null;\n      var sortedAt = -1;\n\n      if (sortModelProvided && column.getColDef().sortable) {\n        for (var j = 0; j < sortModel.length; j++) {\n          var sortModelEntry = sortModel[j];\n\n          if (typeof sortModelEntry.colId === 'string' && typeof column.getColId() === 'string' && _this.compareColIds(sortModelEntry, column)) {\n            sortForCol = sortModelEntry.sort;\n            sortedAt = j;\n          }\n        }\n      }\n\n      if (sortForCol) {\n        column.setSort(sortForCol, source);\n        column.setSortedAt(sortedAt);\n      } else {\n        column.setSort(null, source);\n        column.setSortedAt(null);\n      }\n    });\n    this.dispatchSortChangedEvents();\n  };\n\n  SortController.prototype.compareColIds = function (sortModelEntry, column) {\n    return sortModelEntry.colId === column.getColId();\n  };\n\n  SortController.prototype.getColumnsWithSortingOrdered = function () {\n    // pull out all the columns that have sorting set\n    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n    var columnsWithSorting = allColumnsIncludingAuto.filter(function (column) {\n      return !!column.getSort();\n    }); // put the columns in order of which one got sorted first\n\n    columnsWithSorting.sort(function (a, b) {\n      return a.sortedAt - b.sortedAt;\n    });\n    return columnsWithSorting;\n  }; // used by row controller, when doing the sorting\n\n\n  SortController.prototype.getSortForRowController = function () {\n    return this.getColumnsWithSortingOrdered().map(function (column) {\n      var isAscending = column.getSort() === Constants.SORT_ASC;\n      return {\n        inverter: isAscending ? 1 : -1,\n        column: column\n      };\n    });\n  };\n\n  var SortController_1;\n  SortController.DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];\n\n  __decorate([Autowired('gridOptionsWrapper')], SortController.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnController')], SortController.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('columnApi')], SortController.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], SortController.prototype, \"gridApi\", void 0);\n\n  SortController = SortController_1 = __decorate([Bean('sortController')], SortController);\n  return SortController;\n}(BeanStub);\n\nexport { SortController };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/sortController.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","BeanStub","Constants","Events","SortController","_super","_this","apply","getSortModel","getColumnsWithSortingOrdered","map","column","colId","getColId","sort","getSort","SortController_1","progressSort","multiSort","source","nextDirection","getNextSortDirection","setSortForColumn","SORT_ASC","SORT_DESC","setSort","sortedAt","Number","Date","valueOf","setSortedAt","doingMultiSort","gridOptionsWrapper","isSuppressMultiSort","clearSortBarThisColumn","dispatchSortChangedEvents","onSortChanged","event","type","EVENT_SORT_CHANGED","api","gridApi","columnApi","eventService","dispatchEvent","columnToSkip","columnController","getPrimaryAndSecondaryAndAutoColumns","forEach","columnToClear","undefined","sortingOrder","getColDef","getSortingOrder","DEFAULT_SORTING_ORDER","isArray","console","warn","currentIndex","indexOf","notInArray","lastItemInArray","result","setSortModel","sortModel","sortModelProvided","allColumnsIncludingAuto","sortForCol","sortable","j","sortModelEntry","compareColIds","columnsWithSorting","filter","a","getSortForRowController","isAscending","inverter"],"mappings":"AAAA;;;;;;AAMA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGd,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HhB,CAA3H;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACoB,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACc,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BpB,CAAC,CAACc,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAclB,MAAM,CAACuB,cAAP,CAAsBX,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASM,SAAT,EAAoBC,IAApB,QAAgC,mBAAhC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,UAAvB;;AACA,IAAIC,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAClDlC,EAAAA,SAAS,CAACiC,cAAD,EAAiBC,MAAjB,CAAT;;AACA,WAASD,cAAT,GAA0B;AACtB,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBhB,SAAnB,CAAnB,IAAoD,IAAhE,CADsB,CAEtB;;;AACAe,IAAAA,KAAK,CAACE,YAAN,GAAqB,YAAY;AAC7B,aAAOF,KAAK,CAACG,4BAAN,GAAqCC,GAArC,CAAyC,UAAUC,MAAV,EAAkB;AAAE,eAAQ;AACxEC,UAAAA,KAAK,EAAED,MAAM,CAACE,QAAP,EADiE;AAExEC,UAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP;AAFkE,SAAR;AAG/D,OAHE,CAAP;AAIH,KALD;;AAMA,WAAOT,KAAP;AACH;;AACDU,EAAAA,gBAAgB,GAAGZ,cAAnB;;AACAA,EAAAA,cAAc,CAACrB,SAAf,CAAyBkC,YAAzB,GAAwC,UAAUN,MAAV,EAAkBO,SAAlB,EAA6BC,MAA7B,EAAqC;AACzE,QAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,KAAT;AAAiB;;AAC1C,QAAIC,aAAa,GAAG,KAAKC,oBAAL,CAA0BV,MAA1B,CAApB;AACA,SAAKW,gBAAL,CAAsBX,MAAtB,EAA8BS,aAA9B,EAA6CF,SAA7C,EAAwDC,MAAxD;AACH,GAJD;;AAKAf,EAAAA,cAAc,CAACrB,SAAf,CAAyBuC,gBAAzB,GAA4C,UAAUX,MAAV,EAAkBG,IAAlB,EAAwBI,SAAxB,EAAmCC,MAAnC,EAA2C;AACnF,QAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,KAAT;AAAiB,KADyC,CAEnF;;;AACA,QAAIL,IAAI,KAAKZ,SAAS,CAACqB,QAAnB,IAA+BT,IAAI,KAAKZ,SAAS,CAACsB,SAAtD,EAAiE;AAC7DV,MAAAA,IAAI,GAAG,IAAP;AACH,KALkF,CAMnF;;;AACAH,IAAAA,MAAM,CAACc,OAAP,CAAeX,IAAf,EAAqBK,MAArB,EAPmF,CAQnF;;AACA,QAAIR,MAAM,CAACI,OAAP,EAAJ,EAAsB;AAClB,UAAIW,QAAQ,GAAGC,MAAM,CAAC,IAAIC,IAAJ,GAAWC,OAAX,EAAD,CAArB;AACAlB,MAAAA,MAAM,CAACmB,WAAP,CAAmBJ,QAAnB;AACH,KAHD,MAIK;AACDf,MAAAA,MAAM,CAACmB,WAAP,CAAmB,IAAnB;AACH;;AACD,QAAIC,cAAc,GAAGb,SAAS,IAAI,CAAC,KAAKc,kBAAL,CAAwBC,mBAAxB,EAAnC,CAhBmF,CAiBnF;;AACA,QAAI,CAACF,cAAL,EAAqB;AACjB,WAAKG,sBAAL,CAA4BvB,MAA5B,EAAoCQ,MAApC;AACH;;AACD,SAAKgB,yBAAL;AACH,GAtBD,CAnBkD,CA0ClD;AACA;;;AACA/B,EAAAA,cAAc,CAACrB,SAAf,CAAyBqD,aAAzB,GAAyC,YAAY;AACjD,SAAKD,yBAAL;AACH,GAFD;;AAGA/B,EAAAA,cAAc,CAACrB,SAAf,CAAyBoD,yBAAzB,GAAqD,YAAY;AAC7D,QAAIE,KAAK,GAAG;AACRC,MAAAA,IAAI,EAAEnC,MAAM,CAACoC,kBADL;AAERC,MAAAA,GAAG,EAAE,KAAKC,OAFF;AAGRC,MAAAA,SAAS,EAAE,KAAKA;AAHR,KAAZ;AAKA,SAAKC,YAAL,CAAkBC,aAAlB,CAAgCP,KAAhC;AACH,GAPD;;AAQAjC,EAAAA,cAAc,CAACrB,SAAf,CAAyBmD,sBAAzB,GAAkD,UAAUW,YAAV,EAAwB1B,MAAxB,EAAgC;AAC9E,SAAK2B,gBAAL,CAAsBC,oCAAtB,GAA6DC,OAA7D,CAAqE,UAAUC,aAAV,EAAyB;AAC1F;AACA,UAAI,EAAEA,aAAa,KAAKJ,YAApB,CAAJ,EAAuC;AACnC;AACA;AACAI,QAAAA,aAAa,CAACxB,OAAd,CAAsByB,SAAtB,EAAiC/B,MAAjC;AACH;AACJ,KAPD;AAQH,GATD;;AAUAf,EAAAA,cAAc,CAACrB,SAAf,CAAyBsC,oBAAzB,GAAgD,UAAUV,MAAV,EAAkB;AAC9D,QAAIwC,YAAJ;;AACA,QAAIxC,MAAM,CAACyC,SAAP,GAAmBD,YAAvB,EAAqC;AACjCA,MAAAA,YAAY,GAAGxC,MAAM,CAACyC,SAAP,GAAmBD,YAAlC;AACH,KAFD,MAGK,IAAI,KAAKnB,kBAAL,CAAwBqB,eAAxB,EAAJ,EAA+C;AAChDF,MAAAA,YAAY,GAAG,KAAKnB,kBAAL,CAAwBqB,eAAxB,EAAf;AACH,KAFI,MAGA;AACDF,MAAAA,YAAY,GAAGnC,gBAAgB,CAACsC,qBAAhC;AACH;;AACD,QAAI,CAAC5E,KAAK,CAAC6E,OAAN,CAAcJ,YAAd,CAAD,IAAgCA,YAAY,CAAC3D,MAAb,IAAuB,CAA3D,EAA8D;AAC1DgE,MAAAA,OAAO,CAACC,IAAR,CAAa,sFAAsFN,YAAnG;AACA,aAAO,IAAP;AACH;;AACD,QAAIO,YAAY,GAAGP,YAAY,CAACQ,OAAb,CAAqBhD,MAAM,CAACI,OAAP,EAArB,CAAnB;AACA,QAAI6C,UAAU,GAAGF,YAAY,GAAG,CAAhC;AACA,QAAIG,eAAe,GAAGH,YAAY,IAAIP,YAAY,CAAC3D,MAAb,GAAsB,CAA5D;AACA,QAAIsE,MAAJ;;AACA,QAAIF,UAAU,IAAIC,eAAlB,EAAmC;AAC/BC,MAAAA,MAAM,GAAGX,YAAY,CAAC,CAAD,CAArB;AACH,KAFD,MAGK;AACDW,MAAAA,MAAM,GAAGX,YAAY,CAACO,YAAY,GAAG,CAAhB,CAArB;AACH,KAxB6D,CAyB9D;;;AACA,QAAI1C,gBAAgB,CAACsC,qBAAjB,CAAuCK,OAAvC,CAA+CG,MAA/C,IAAyD,CAA7D,EAAgE;AAC5DN,MAAAA,OAAO,CAACC,IAAR,CAAa,gCAAgCK,MAA7C;AACA,aAAO,IAAP;AACH;;AACD,WAAOA,MAAP;AACH,GA/BD;;AAgCA1D,EAAAA,cAAc,CAACrB,SAAf,CAAyBgF,YAAzB,GAAwC,UAAUC,SAAV,EAAqB7C,MAArB,EAA6B;AACjE,QAAIb,KAAK,GAAG,IAAZ;;AACA,QAAIa,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,KAAT;AAAiB,KAFuB,CAGjE;;;AACA,QAAI8C,iBAAiB,GAAGD,SAAS,IAAIA,SAAS,CAACxE,MAAV,GAAmB,CAAxD;AACA,QAAI0E,uBAAuB,GAAG,KAAKpB,gBAAL,CAAsBC,oCAAtB,EAA9B;AACAmB,IAAAA,uBAAuB,CAAClB,OAAxB,CAAgC,UAAUrC,MAAV,EAAkB;AAC9C,UAAIwD,UAAU,GAAG,IAAjB;AACA,UAAIzC,QAAQ,GAAG,CAAC,CAAhB;;AACA,UAAIuC,iBAAiB,IAAItD,MAAM,CAACyC,SAAP,GAAmBgB,QAA5C,EAAsD;AAClD,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACxE,MAA9B,EAAsC6E,CAAC,EAAvC,EAA2C;AACvC,cAAIC,cAAc,GAAGN,SAAS,CAACK,CAAD,CAA9B;;AACA,cAAI,OAAOC,cAAc,CAAC1D,KAAtB,KAAgC,QAAhC,IACG,OAAOD,MAAM,CAACE,QAAP,EAAP,KAA6B,QADhC,IAEGP,KAAK,CAACiE,aAAN,CAAoBD,cAApB,EAAoC3D,MAApC,CAFP,EAEoD;AAChDwD,YAAAA,UAAU,GAAGG,cAAc,CAACxD,IAA5B;AACAY,YAAAA,QAAQ,GAAG2C,CAAX;AACH;AACJ;AACJ;;AACD,UAAIF,UAAJ,EAAgB;AACZxD,QAAAA,MAAM,CAACc,OAAP,CAAe0C,UAAf,EAA2BhD,MAA3B;AACAR,QAAAA,MAAM,CAACmB,WAAP,CAAmBJ,QAAnB;AACH,OAHD,MAIK;AACDf,QAAAA,MAAM,CAACc,OAAP,CAAe,IAAf,EAAqBN,MAArB;AACAR,QAAAA,MAAM,CAACmB,WAAP,CAAmB,IAAnB;AACH;AACJ,KAtBD;AAuBA,SAAKK,yBAAL;AACH,GA9BD;;AA+BA/B,EAAAA,cAAc,CAACrB,SAAf,CAAyBwF,aAAzB,GAAyC,UAAUD,cAAV,EAA0B3D,MAA1B,EAAkC;AACvE,WAAO2D,cAAc,CAAC1D,KAAf,KAAyBD,MAAM,CAACE,QAAP,EAAhC;AACH,GAFD;;AAGAT,EAAAA,cAAc,CAACrB,SAAf,CAAyB0B,4BAAzB,GAAwD,YAAY;AAChE;AACA,QAAIyD,uBAAuB,GAAG,KAAKpB,gBAAL,CAAsBC,oCAAtB,EAA9B;AACA,QAAIyB,kBAAkB,GAAGN,uBAAuB,CAACO,MAAxB,CAA+B,UAAU9D,MAAV,EAAkB;AAAE,aAAO,CAAC,CAACA,MAAM,CAACI,OAAP,EAAT;AAA4B,KAA/E,CAAzB,CAHgE,CAIhE;;AACAyD,IAAAA,kBAAkB,CAAC1D,IAAnB,CAAwB,UAAU4D,CAAV,EAAapG,CAAb,EAAgB;AAAE,aAAOoG,CAAC,CAAChD,QAAF,GAAapD,CAAC,CAACoD,QAAtB;AAAiC,KAA3E;AACA,WAAO8C,kBAAP;AACH,GAPD,CAnIkD,CA2IlD;;;AACApE,EAAAA,cAAc,CAACrB,SAAf,CAAyB4F,uBAAzB,GAAmD,YAAY;AAC3D,WAAO,KAAKlE,4BAAL,GAAoCC,GAApC,CAAwC,UAAUC,MAAV,EAAkB;AAC7D,UAAIiE,WAAW,GAAGjE,MAAM,CAACI,OAAP,OAAqBb,SAAS,CAACqB,QAAjD;AACA,aAAO;AACHsD,QAAAA,QAAQ,EAAED,WAAW,GAAG,CAAH,GAAO,CAAC,CAD1B;AAEHjE,QAAAA,MAAM,EAAEA;AAFL,OAAP;AAIH,KANM,CAAP;AAOH,GARD;;AASA,MAAIK,gBAAJ;AACAZ,EAAAA,cAAc,CAACkD,qBAAf,GAAuC,CAACpD,SAAS,CAACqB,QAAX,EAAqBrB,SAAS,CAACsB,SAA/B,EAA0C,IAA1C,CAAvC;;AACAvC,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,oBAAD,CADF,CAAD,EAEPK,cAAc,CAACrB,SAFR,EAEmB,oBAFnB,EAEyC,KAAK,CAF9C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,kBAAD,CADF,CAAD,EAEPK,cAAc,CAACrB,SAFR,EAEmB,kBAFnB,EAEuC,KAAK,CAF5C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,WAAD,CADF,CAAD,EAEPK,cAAc,CAACrB,SAFR,EAEmB,WAFnB,EAEgC,KAAK,CAFrC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,SAAD,CADF,CAAD,EAEPK,cAAc,CAACrB,SAFR,EAEmB,SAFnB,EAE8B,KAAK,CAFnC,CAAV;;AAGAqB,EAAAA,cAAc,GAAGY,gBAAgB,GAAG/B,UAAU,CAAC,CAC3Ce,IAAI,CAAC,gBAAD,CADuC,CAAD,EAE3CI,cAF2C,CAA9C;AAGA,SAAOA,cAAP;AACH,CAvKmC,CAuKlCH,QAvKkC,CAApC;;AAwKA,SAASG,cAAT","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Constants } from \"./constants\";\nimport { Events } from \"./events\";\nvar SortController = /** @class */ (function (_super) {\n    __extends(SortController, _super);\n    function SortController() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // used by the public api, for saving the sort model\n        _this.getSortModel = function () {\n            return _this.getColumnsWithSortingOrdered().map(function (column) { return ({\n                colId: column.getColId(),\n                sort: column.getSort()\n            }); });\n        };\n        return _this;\n    }\n    SortController_1 = SortController;\n    SortController.prototype.progressSort = function (column, multiSort, source) {\n        if (source === void 0) { source = \"api\"; }\n        var nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    };\n    SortController.prototype.setSortForColumn = function (column, sort, multiSort, source) {\n        if (source === void 0) { source = \"api\"; }\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {\n            sort = null;\n        }\n        // update sort on current col\n        column.setSort(sort, source);\n        // sortedAt used for knowing order of cols when multi-col sort\n        if (column.getSort()) {\n            var sortedAt = Number(new Date().valueOf());\n            column.setSortedAt(sortedAt);\n        }\n        else {\n            column.setSortedAt(null);\n        }\n        var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();\n        // clear sort on all columns except this one, and update the icons\n        if (!doingMultiSort) {\n            this.clearSortBarThisColumn(column, source);\n        }\n        this.dispatchSortChangedEvents();\n    };\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    SortController.prototype.onSortChanged = function () {\n        this.dispatchSortChangedEvents();\n    };\n    SortController.prototype.dispatchSortChangedEvents = function () {\n        var event = {\n            type: Events.EVENT_SORT_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    SortController.prototype.clearSortBarThisColumn = function (columnToSkip, source) {\n        this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (!(columnToClear === columnToSkip)) {\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n    };\n    SortController.prototype.getNextSortDirection = function (column) {\n        var sortingOrder;\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        }\n        else if (this.gridOptionsWrapper.getSortingOrder()) {\n            sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n        }\n        else {\n            sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;\n        }\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            console.warn(\"ag-grid: sortingOrder must be an array with at least one element, currently it's \" + sortingOrder);\n            return null;\n        }\n        var currentIndex = sortingOrder.indexOf(column.getSort());\n        var notInArray = currentIndex < 0;\n        var lastItemInArray = currentIndex == sortingOrder.length - 1;\n        var result;\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        }\n        else {\n            result = sortingOrder[currentIndex + 1];\n        }\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            console.warn('ag-grid: invalid sort type ' + result);\n            return null;\n        }\n        return result;\n    };\n    SortController.prototype.setSortModel = function (sortModel, source) {\n        var _this = this;\n        if (source === void 0) { source = \"api\"; }\n        // first up, clear any previous sort\n        var sortModelProvided = sortModel && sortModel.length > 0;\n        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n        allColumnsIncludingAuto.forEach(function (column) {\n            var sortForCol = null;\n            var sortedAt = -1;\n            if (sortModelProvided && column.getColDef().sortable) {\n                for (var j = 0; j < sortModel.length; j++) {\n                    var sortModelEntry = sortModel[j];\n                    if (typeof sortModelEntry.colId === 'string'\n                        && typeof column.getColId() === 'string'\n                        && _this.compareColIds(sortModelEntry, column)) {\n                        sortForCol = sortModelEntry.sort;\n                        sortedAt = j;\n                    }\n                }\n            }\n            if (sortForCol) {\n                column.setSort(sortForCol, source);\n                column.setSortedAt(sortedAt);\n            }\n            else {\n                column.setSort(null, source);\n                column.setSortedAt(null);\n            }\n        });\n        this.dispatchSortChangedEvents();\n    };\n    SortController.prototype.compareColIds = function (sortModelEntry, column) {\n        return sortModelEntry.colId === column.getColId();\n    };\n    SortController.prototype.getColumnsWithSortingOrdered = function () {\n        // pull out all the columns that have sorting set\n        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n        var columnsWithSorting = allColumnsIncludingAuto.filter(function (column) { return !!column.getSort(); });\n        // put the columns in order of which one got sorted first\n        columnsWithSorting.sort(function (a, b) { return a.sortedAt - b.sortedAt; });\n        return columnsWithSorting;\n    };\n    // used by row controller, when doing the sorting\n    SortController.prototype.getSortForRowController = function () {\n        return this.getColumnsWithSortingOrdered().map(function (column) {\n            var isAscending = column.getSort() === Constants.SORT_ASC;\n            return {\n                inverter: isAscending ? 1 : -1,\n                column: column\n            };\n        });\n    };\n    var SortController_1;\n    SortController.DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], SortController.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], SortController.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], SortController.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], SortController.prototype, \"gridApi\", void 0);\n    SortController = SortController_1 = __decorate([\n        Bean('sortController')\n    ], SortController);\n    return SortController;\n}(BeanStub));\nexport { SortController };\n"]},"metadata":{},"sourceType":"module"}