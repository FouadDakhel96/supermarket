{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"../context/context\";\n\nvar ColumnApi =\n/** @class */\nfunction () {\n  function ColumnApi() {}\n\n  ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) {\n    // AG-3403 validate that gridWidth is provided because this method has the same name as\n    // a method on the grid API that takes no arguments, and it's easy to confuse the two\n    if (typeof gridWidth === \"undefined\") {\n      console.error('ag-Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');\n    }\n\n    this.columnController.sizeColumnsToFit(gridWidth, 'api');\n  };\n\n  ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) {\n    this.columnController.setColumnGroupOpened(group, newValue, 'api');\n  };\n\n  ColumnApi.prototype.getColumnGroup = function (name, instanceId) {\n    return this.columnController.getColumnGroup(name, instanceId);\n  };\n\n  ColumnApi.prototype.getOriginalColumnGroup = function (name) {\n    return this.columnController.getOriginalColumnGroup(name);\n  };\n\n  ColumnApi.prototype.getDisplayNameForColumn = function (column, location) {\n    return this.columnController.getDisplayNameForColumn(column, location) || '';\n  };\n\n  ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {\n    return this.columnController.getDisplayNameForColumnGroup(columnGroup, location) || '';\n  };\n\n  ColumnApi.prototype.getColumn = function (key) {\n    return this.columnController.getPrimaryColumn(key);\n  };\n\n  ColumnApi.prototype.setColumnState = function (columnState) {\n    return this.columnController.setColumnState(columnState, false, 'api');\n  };\n\n  ColumnApi.prototype.getColumnState = function () {\n    return this.columnController.getColumnState();\n  };\n\n  ColumnApi.prototype.resetColumnState = function () {\n    this.columnController.resetColumnState(false, 'api');\n  };\n\n  ColumnApi.prototype.getColumnGroupState = function () {\n    return this.columnController.getColumnGroupState();\n  };\n\n  ColumnApi.prototype.setColumnGroupState = function (stateItems) {\n    this.columnController.setColumnGroupState(stateItems, 'api');\n  };\n\n  ColumnApi.prototype.resetColumnGroupState = function () {\n    this.columnController.resetColumnGroupState('api');\n  };\n\n  ColumnApi.prototype.isPinning = function () {\n    return this.columnController.isPinningLeft() || this.columnController.isPinningRight();\n  };\n\n  ColumnApi.prototype.isPinningLeft = function () {\n    return this.columnController.isPinningLeft();\n  };\n\n  ColumnApi.prototype.isPinningRight = function () {\n    return this.columnController.isPinningRight();\n  };\n\n  ColumnApi.prototype.getDisplayedColAfter = function (col) {\n    return this.columnController.getDisplayedColAfter(col);\n  };\n\n  ColumnApi.prototype.getDisplayedColBefore = function (col) {\n    return this.columnController.getDisplayedColBefore(col);\n  };\n\n  ColumnApi.prototype.setColumnVisible = function (key, visible) {\n    this.columnController.setColumnVisible(key, visible, 'api');\n  };\n\n  ColumnApi.prototype.setColumnsVisible = function (keys, visible) {\n    this.columnController.setColumnsVisible(keys, visible, 'api');\n  };\n\n  ColumnApi.prototype.setColumnPinned = function (key, pinned) {\n    this.columnController.setColumnPinned(key, pinned, 'api');\n  };\n\n  ColumnApi.prototype.setColumnsPinned = function (keys, pinned) {\n    this.columnController.setColumnsPinned(keys, pinned, 'api');\n  };\n\n  ColumnApi.prototype.getAllColumns = function () {\n    return this.columnController.getAllPrimaryColumns();\n  };\n\n  ColumnApi.prototype.getAllGridColumns = function () {\n    return this.columnController.getAllGridColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedLeftColumns = function () {\n    return this.columnController.getDisplayedLeftColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedCenterColumns = function () {\n    return this.columnController.getDisplayedCenterColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedRightColumns = function () {\n    return this.columnController.getDisplayedRightColumns();\n  };\n\n  ColumnApi.prototype.getAllDisplayedColumns = function () {\n    return this.columnController.getAllDisplayedColumns();\n  };\n\n  ColumnApi.prototype.getAllDisplayedVirtualColumns = function () {\n    return this.columnController.getAllDisplayedVirtualColumns();\n  };\n\n  ColumnApi.prototype.moveColumn = function (key, toIndex) {\n    if (typeof key === 'number') {\n      // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n      console.warn('ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n      this.columnController.moveColumnByIndex(key, toIndex, 'api');\n    } else {\n      this.columnController.moveColumn(key, toIndex, 'api');\n    }\n  };\n\n  ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) {\n    this.columnController.moveColumnByIndex(fromIndex, toIndex, 'api');\n  };\n\n  ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) {\n    this.columnController.moveColumns(columnsToMoveKeys, toIndex, 'api');\n  };\n\n  ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) {\n    this.columnController.moveRowGroupColumn(fromIndex, toIndex);\n  };\n\n  ColumnApi.prototype.setColumnAggFunc = function (column, aggFunc) {\n    this.columnController.setColumnAggFunc(column, aggFunc);\n  };\n\n  ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {\n    if (finished === void 0) {\n      finished = true;\n    }\n\n    this.columnController.setColumnWidths([{\n      key: key,\n      newWidth: newWidth\n    }], false, finished);\n  };\n\n  ColumnApi.prototype.setColumnWidths = function (columnWidths, finished) {\n    if (finished === void 0) {\n      finished = true;\n    }\n\n    this.columnController.setColumnWidths(columnWidths, false, finished);\n  };\n\n  ColumnApi.prototype.setPivotMode = function (pivotMode) {\n    this.columnController.setPivotMode(pivotMode);\n  };\n\n  ColumnApi.prototype.isPivotMode = function () {\n    return this.columnController.isPivotMode();\n  };\n\n  ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {\n    return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey);\n  };\n\n  ColumnApi.prototype.setValueColumns = function (colKeys) {\n    this.columnController.setValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getValueColumns = function () {\n    return this.columnController.getValueColumns();\n  };\n\n  ColumnApi.prototype.removeValueColumn = function (colKey) {\n    this.columnController.removeValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeValueColumns = function (colKeys) {\n    this.columnController.removeValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addValueColumn = function (colKey) {\n    this.columnController.addValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addValueColumns = function (colKeys) {\n    this.columnController.addValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.setRowGroupColumns = function (colKeys) {\n    this.columnController.setRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.removeRowGroupColumn = function (colKey) {\n    this.columnController.removeRowGroupColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeRowGroupColumns = function (colKeys) {\n    this.columnController.removeRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addRowGroupColumn = function (colKey) {\n    this.columnController.addRowGroupColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addRowGroupColumns = function (colKeys) {\n    this.columnController.addRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getRowGroupColumns = function () {\n    return this.columnController.getRowGroupColumns();\n  };\n\n  ColumnApi.prototype.setPivotColumns = function (colKeys) {\n    this.columnController.setPivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.removePivotColumn = function (colKey) {\n    this.columnController.removePivotColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removePivotColumns = function (colKeys) {\n    this.columnController.removePivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addPivotColumn = function (colKey) {\n    this.columnController.addPivotColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addPivotColumns = function (colKeys) {\n    this.columnController.addPivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getPivotColumns = function () {\n    return this.columnController.getPivotColumns();\n  };\n\n  ColumnApi.prototype.getLeftDisplayedColumnGroups = function () {\n    return this.columnController.getLeftDisplayedColumnGroups();\n  };\n\n  ColumnApi.prototype.getCenterDisplayedColumnGroups = function () {\n    return this.columnController.getCenterDisplayedColumnGroups();\n  };\n\n  ColumnApi.prototype.getRightDisplayedColumnGroups = function () {\n    return this.columnController.getRightDisplayedColumnGroups();\n  };\n\n  ColumnApi.prototype.getAllDisplayedColumnGroups = function () {\n    return this.columnController.getAllDisplayedColumnGroups();\n  };\n\n  ColumnApi.prototype.autoSizeColumn = function (key, skipHeader) {\n    return this.columnController.autoSizeColumn(key, skipHeader, 'api');\n  };\n\n  ColumnApi.prototype.autoSizeColumns = function (keys, skipHeader) {\n    return this.columnController.autoSizeColumns(keys, skipHeader, 'api');\n  };\n\n  ColumnApi.prototype.autoSizeAllColumns = function (skipHeader) {\n    this.columnController.autoSizeAllColumns(skipHeader, 'api');\n  };\n\n  ColumnApi.prototype.setSecondaryColumns = function (colDefs) {\n    this.columnController.setSecondaryColumns(colDefs, 'api');\n  };\n\n  ColumnApi.prototype.getSecondaryColumns = function () {\n    return this.columnController.getSecondaryColumns();\n  };\n\n  ColumnApi.prototype.getPrimaryColumns = function () {\n    return this.columnController.getAllPrimaryColumns();\n  }; // below goes through deprecated items, prints message to user, then calls the new version of the same method\n\n\n  ColumnApi.prototype.columnGroupOpened = function (group, newValue) {\n    console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n    this.setColumnGroupOpened(group, newValue);\n  };\n\n  ColumnApi.prototype.hideColumns = function (colIds, hide) {\n    console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');\n    this.columnController.setColumnsVisible(colIds, !hide, 'api');\n  };\n\n  ColumnApi.prototype.hideColumn = function (colId, hide) {\n    console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');\n    this.columnController.setColumnVisible(colId, !hide, 'api');\n  };\n\n  ColumnApi.prototype.setState = function (columnState) {\n    console.error('ag-Grid: setState is deprecated, use setColumnState');\n    return this.setColumnState(columnState);\n  };\n\n  ColumnApi.prototype.getState = function () {\n    console.error('ag-Grid: getState is deprecated, use getColumnState');\n    return this.getColumnState();\n  };\n\n  ColumnApi.prototype.resetState = function () {\n    console.error('ag-Grid: resetState is deprecated, use resetColumnState');\n    this.resetColumnState();\n  };\n\n  ColumnApi.prototype.getAggregationColumns = function () {\n    console.error('ag-Grid: getAggregationColumns is deprecated, use getValueColumns');\n    return this.columnController.getValueColumns();\n  };\n\n  ColumnApi.prototype.removeAggregationColumn = function (colKey) {\n    console.error('ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n    this.columnController.removeValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeAggregationColumns = function (colKeys) {\n    console.error('ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n    this.columnController.removeValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addAggregationColumn = function (colKey) {\n    console.error('ag-Grid: addAggregationColumn is deprecated, use addValueColumn');\n    this.columnController.addValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addAggregationColumns = function (colKeys) {\n    console.error('ag-Grid: addAggregationColumns is deprecated, use addValueColumns');\n    this.columnController.addValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {\n    console.error('ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n    this.columnController.setColumnAggFunc(column, aggFunc, 'api');\n  };\n\n  ColumnApi.prototype.getDisplayNameForCol = function (column) {\n    console.error('ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n    return this.getDisplayNameForColumn(column, null);\n  };\n\n  __decorate([Autowired('columnController')], ColumnApi.prototype, \"columnController\", void 0);\n\n  ColumnApi = __decorate([Bean('columnApi')], ColumnApi);\n  return ColumnApi;\n}();\n\nexport { ColumnApi };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/columnController/columnApi.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Autowired","Bean","ColumnApi","prototype","sizeColumnsToFit","gridWidth","console","error","columnController","setColumnGroupOpened","group","newValue","getColumnGroup","name","instanceId","getOriginalColumnGroup","getDisplayNameForColumn","column","location","getDisplayNameForColumnGroup","columnGroup","getColumn","getPrimaryColumn","setColumnState","columnState","getColumnState","resetColumnState","getColumnGroupState","setColumnGroupState","stateItems","resetColumnGroupState","isPinning","isPinningLeft","isPinningRight","getDisplayedColAfter","col","getDisplayedColBefore","setColumnVisible","visible","setColumnsVisible","keys","setColumnPinned","pinned","setColumnsPinned","getAllColumns","getAllPrimaryColumns","getAllGridColumns","getDisplayedLeftColumns","getDisplayedCenterColumns","getDisplayedRightColumns","getAllDisplayedColumns","getAllDisplayedVirtualColumns","moveColumn","toIndex","warn","moveColumnByIndex","fromIndex","moveColumns","columnsToMoveKeys","moveRowGroupColumn","setColumnAggFunc","aggFunc","setColumnWidth","newWidth","finished","setColumnWidths","columnWidths","setPivotMode","pivotMode","isPivotMode","getSecondaryPivotColumn","pivotKeys","valueColKey","setValueColumns","colKeys","getValueColumns","removeValueColumn","colKey","removeValueColumns","addValueColumn","addValueColumns","setRowGroupColumns","removeRowGroupColumn","removeRowGroupColumns","addRowGroupColumn","addRowGroupColumns","getRowGroupColumns","setPivotColumns","removePivotColumn","removePivotColumns","addPivotColumn","addPivotColumns","getPivotColumns","getLeftDisplayedColumnGroups","getCenterDisplayedColumnGroups","getRightDisplayedColumnGroups","getAllDisplayedColumnGroups","autoSizeColumn","skipHeader","autoSizeColumns","autoSizeAllColumns","setSecondaryColumns","colDefs","getSecondaryColumns","getPrimaryColumns","columnGroupOpened","hideColumns","colIds","hide","hideColumn","colId","setState","getState","resetState","getAggregationColumns","removeAggregationColumn","removeAggregationColumns","addAggregationColumn","addAggregationColumns","setColumnAggFunction","getDisplayNameForCol"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../context/context\";\nvar ColumnApi = /** @class */ (function () {\n    function ColumnApi() {\n    }\n    ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) {\n        // AG-3403 validate that gridWidth is provided because this method has the same name as\n        // a method on the grid API that takes no arguments, and it's easy to confuse the two\n        if (typeof gridWidth === \"undefined\") {\n            console.error('ag-Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');\n        }\n        this.columnController.sizeColumnsToFit(gridWidth, 'api');\n    };\n    ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) { this.columnController.setColumnGroupOpened(group, newValue, 'api'); };\n    ColumnApi.prototype.getColumnGroup = function (name, instanceId) { return this.columnController.getColumnGroup(name, instanceId); };\n    ColumnApi.prototype.getOriginalColumnGroup = function (name) { return this.columnController.getOriginalColumnGroup(name); };\n    ColumnApi.prototype.getDisplayNameForColumn = function (column, location) { return this.columnController.getDisplayNameForColumn(column, location) || ''; };\n    ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) { return this.columnController.getDisplayNameForColumnGroup(columnGroup, location) || ''; };\n    ColumnApi.prototype.getColumn = function (key) { return this.columnController.getPrimaryColumn(key); };\n    ColumnApi.prototype.setColumnState = function (columnState) { return this.columnController.setColumnState(columnState, false, 'api'); };\n    ColumnApi.prototype.getColumnState = function () { return this.columnController.getColumnState(); };\n    ColumnApi.prototype.resetColumnState = function () { this.columnController.resetColumnState(false, 'api'); };\n    ColumnApi.prototype.getColumnGroupState = function () { return this.columnController.getColumnGroupState(); };\n    ColumnApi.prototype.setColumnGroupState = function (stateItems) { this.columnController.setColumnGroupState(stateItems, 'api'); };\n    ColumnApi.prototype.resetColumnGroupState = function () { this.columnController.resetColumnGroupState('api'); };\n    ColumnApi.prototype.isPinning = function () { return this.columnController.isPinningLeft() || this.columnController.isPinningRight(); };\n    ColumnApi.prototype.isPinningLeft = function () { return this.columnController.isPinningLeft(); };\n    ColumnApi.prototype.isPinningRight = function () { return this.columnController.isPinningRight(); };\n    ColumnApi.prototype.getDisplayedColAfter = function (col) { return this.columnController.getDisplayedColAfter(col); };\n    ColumnApi.prototype.getDisplayedColBefore = function (col) { return this.columnController.getDisplayedColBefore(col); };\n    ColumnApi.prototype.setColumnVisible = function (key, visible) { this.columnController.setColumnVisible(key, visible, 'api'); };\n    ColumnApi.prototype.setColumnsVisible = function (keys, visible) { this.columnController.setColumnsVisible(keys, visible, 'api'); };\n    ColumnApi.prototype.setColumnPinned = function (key, pinned) { this.columnController.setColumnPinned(key, pinned, 'api'); };\n    ColumnApi.prototype.setColumnsPinned = function (keys, pinned) { this.columnController.setColumnsPinned(keys, pinned, 'api'); };\n    ColumnApi.prototype.getAllColumns = function () { return this.columnController.getAllPrimaryColumns(); };\n    ColumnApi.prototype.getAllGridColumns = function () { return this.columnController.getAllGridColumns(); };\n    ColumnApi.prototype.getDisplayedLeftColumns = function () { return this.columnController.getDisplayedLeftColumns(); };\n    ColumnApi.prototype.getDisplayedCenterColumns = function () { return this.columnController.getDisplayedCenterColumns(); };\n    ColumnApi.prototype.getDisplayedRightColumns = function () { return this.columnController.getDisplayedRightColumns(); };\n    ColumnApi.prototype.getAllDisplayedColumns = function () { return this.columnController.getAllDisplayedColumns(); };\n    ColumnApi.prototype.getAllDisplayedVirtualColumns = function () { return this.columnController.getAllDisplayedVirtualColumns(); };\n    ColumnApi.prototype.moveColumn = function (key, toIndex) {\n        if (typeof key === 'number') {\n            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n            console.warn('ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n            this.columnController.moveColumnByIndex(key, toIndex, 'api');\n        }\n        else {\n            this.columnController.moveColumn(key, toIndex, 'api');\n        }\n    };\n    ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) { this.columnController.moveColumnByIndex(fromIndex, toIndex, 'api'); };\n    ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) { this.columnController.moveColumns(columnsToMoveKeys, toIndex, 'api'); };\n    ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) { this.columnController.moveRowGroupColumn(fromIndex, toIndex); };\n    ColumnApi.prototype.setColumnAggFunc = function (column, aggFunc) { this.columnController.setColumnAggFunc(column, aggFunc); };\n    ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {\n        if (finished === void 0) { finished = true; }\n        this.columnController.setColumnWidths([{ key: key, newWidth: newWidth }], false, finished);\n    };\n    ColumnApi.prototype.setColumnWidths = function (columnWidths, finished) {\n        if (finished === void 0) { finished = true; }\n        this.columnController.setColumnWidths(columnWidths, false, finished);\n    };\n    ColumnApi.prototype.setPivotMode = function (pivotMode) { this.columnController.setPivotMode(pivotMode); };\n    ColumnApi.prototype.isPivotMode = function () { return this.columnController.isPivotMode(); };\n    ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) { return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey); };\n    ColumnApi.prototype.setValueColumns = function (colKeys) { this.columnController.setValueColumns(colKeys, 'api'); };\n    ColumnApi.prototype.getValueColumns = function () { return this.columnController.getValueColumns(); };\n    ColumnApi.prototype.removeValueColumn = function (colKey) { this.columnController.removeValueColumn(colKey, 'api'); };\n    ColumnApi.prototype.removeValueColumns = function (colKeys) { this.columnController.removeValueColumns(colKeys, 'api'); };\n    ColumnApi.prototype.addValueColumn = function (colKey) { this.columnController.addValueColumn(colKey, 'api'); };\n    ColumnApi.prototype.addValueColumns = function (colKeys) { this.columnController.addValueColumns(colKeys, 'api'); };\n    ColumnApi.prototype.setRowGroupColumns = function (colKeys) { this.columnController.setRowGroupColumns(colKeys, 'api'); };\n    ColumnApi.prototype.removeRowGroupColumn = function (colKey) { this.columnController.removeRowGroupColumn(colKey, 'api'); };\n    ColumnApi.prototype.removeRowGroupColumns = function (colKeys) { this.columnController.removeRowGroupColumns(colKeys, 'api'); };\n    ColumnApi.prototype.addRowGroupColumn = function (colKey) { this.columnController.addRowGroupColumn(colKey, 'api'); };\n    ColumnApi.prototype.addRowGroupColumns = function (colKeys) { this.columnController.addRowGroupColumns(colKeys, 'api'); };\n    ColumnApi.prototype.getRowGroupColumns = function () { return this.columnController.getRowGroupColumns(); };\n    ColumnApi.prototype.setPivotColumns = function (colKeys) { this.columnController.setPivotColumns(colKeys, 'api'); };\n    ColumnApi.prototype.removePivotColumn = function (colKey) { this.columnController.removePivotColumn(colKey, 'api'); };\n    ColumnApi.prototype.removePivotColumns = function (colKeys) { this.columnController.removePivotColumns(colKeys, 'api'); };\n    ColumnApi.prototype.addPivotColumn = function (colKey) { this.columnController.addPivotColumn(colKey, 'api'); };\n    ColumnApi.prototype.addPivotColumns = function (colKeys) { this.columnController.addPivotColumns(colKeys, 'api'); };\n    ColumnApi.prototype.getPivotColumns = function () { return this.columnController.getPivotColumns(); };\n    ColumnApi.prototype.getLeftDisplayedColumnGroups = function () { return this.columnController.getLeftDisplayedColumnGroups(); };\n    ColumnApi.prototype.getCenterDisplayedColumnGroups = function () { return this.columnController.getCenterDisplayedColumnGroups(); };\n    ColumnApi.prototype.getRightDisplayedColumnGroups = function () { return this.columnController.getRightDisplayedColumnGroups(); };\n    ColumnApi.prototype.getAllDisplayedColumnGroups = function () { return this.columnController.getAllDisplayedColumnGroups(); };\n    ColumnApi.prototype.autoSizeColumn = function (key, skipHeader) { return this.columnController.autoSizeColumn(key, skipHeader, 'api'); };\n    ColumnApi.prototype.autoSizeColumns = function (keys, skipHeader) { return this.columnController.autoSizeColumns(keys, skipHeader, 'api'); };\n    ColumnApi.prototype.autoSizeAllColumns = function (skipHeader) { this.columnController.autoSizeAllColumns(skipHeader, 'api'); };\n    ColumnApi.prototype.setSecondaryColumns = function (colDefs) { this.columnController.setSecondaryColumns(colDefs, 'api'); };\n    ColumnApi.prototype.getSecondaryColumns = function () { return this.columnController.getSecondaryColumns(); };\n    ColumnApi.prototype.getPrimaryColumns = function () { return this.columnController.getAllPrimaryColumns(); };\n    // below goes through deprecated items, prints message to user, then calls the new version of the same method\n    ColumnApi.prototype.columnGroupOpened = function (group, newValue) {\n        console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n        this.setColumnGroupOpened(group, newValue);\n    };\n    ColumnApi.prototype.hideColumns = function (colIds, hide) {\n        console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');\n        this.columnController.setColumnsVisible(colIds, !hide, 'api');\n    };\n    ColumnApi.prototype.hideColumn = function (colId, hide) {\n        console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');\n        this.columnController.setColumnVisible(colId, !hide, 'api');\n    };\n    ColumnApi.prototype.setState = function (columnState) {\n        console.error('ag-Grid: setState is deprecated, use setColumnState');\n        return this.setColumnState(columnState);\n    };\n    ColumnApi.prototype.getState = function () {\n        console.error('ag-Grid: getState is deprecated, use getColumnState');\n        return this.getColumnState();\n    };\n    ColumnApi.prototype.resetState = function () {\n        console.error('ag-Grid: resetState is deprecated, use resetColumnState');\n        this.resetColumnState();\n    };\n    ColumnApi.prototype.getAggregationColumns = function () {\n        console.error('ag-Grid: getAggregationColumns is deprecated, use getValueColumns');\n        return this.columnController.getValueColumns();\n    };\n    ColumnApi.prototype.removeAggregationColumn = function (colKey) {\n        console.error('ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n        this.columnController.removeValueColumn(colKey, 'api');\n    };\n    ColumnApi.prototype.removeAggregationColumns = function (colKeys) {\n        console.error('ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n        this.columnController.removeValueColumns(colKeys, 'api');\n    };\n    ColumnApi.prototype.addAggregationColumn = function (colKey) {\n        console.error('ag-Grid: addAggregationColumn is deprecated, use addValueColumn');\n        this.columnController.addValueColumn(colKey, 'api');\n    };\n    ColumnApi.prototype.addAggregationColumns = function (colKeys) {\n        console.error('ag-Grid: addAggregationColumns is deprecated, use addValueColumns');\n        this.columnController.addValueColumns(colKeys, 'api');\n    };\n    ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {\n        console.error('ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n        this.columnController.setColumnAggFunc(column, aggFunc, 'api');\n    };\n    ColumnApi.prototype.getDisplayNameForCol = function (column) {\n        console.error('ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n        return this.getDisplayNameForColumn(column, null);\n    };\n    __decorate([\n        Autowired('columnController')\n    ], ColumnApi.prototype, \"columnController\", void 0);\n    ColumnApi = __decorate([\n        Bean('columnApi')\n    ], ColumnApi);\n    return ColumnApi;\n}());\nexport { ColumnApi };\n"]},"metadata":{},"sourceType":"module"}