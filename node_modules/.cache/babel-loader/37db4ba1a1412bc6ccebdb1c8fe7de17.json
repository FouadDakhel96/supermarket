{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, PostConstruct, PreDestroy } from \"../context/context\";\nimport { Constants } from \"../constants\";\nimport { BeanStub } from \"../context/beanStub\";\n/**\n * For Master Detail, it is required to keep components between expanding & collapsing parents.\n * For example a user expands row A (and shows a detail grid for this row), then when row A\n * is closed, we want to keep the detail grid, so next time row A is expanded the detail grid\n * is showed with it's context intact, eg if user sorted in the detail grid, that sort should\n * still be applied after the detail grid is shown for the second time.\n */\n\nvar DetailRowCompCache =\n/** @class */\nfunction (_super) {\n  __extends(DetailRowCompCache, _super);\n\n  function DetailRowCompCache() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.cacheItems = [];\n    return _this;\n  }\n\n  DetailRowCompCache.prototype.postConstruct = function () {\n    this.active = this.gridOptionsWrapper.isKeepDetailRows();\n    this.maxCacheSize = this.gridOptionsWrapper.getKeepDetailRowsCount();\n  };\n\n  DetailRowCompCache.prototype.addOrDestroy = function (rowNode, pinned, comp) {\n    // only accept detail rows\n    var doNotUseCache = !this.active || !rowNode.detail;\n\n    if (doNotUseCache) {\n      this.destroyFullWidthRow(comp);\n      return;\n    }\n\n    var item = this.getCacheItem(rowNode, true); // put the comp in the right location of the item.\n    // we also destroy any previous comp - this should never happen\n    // as the logic outside of this class shouldn't be adding same item to the\n    // cache twice, however we cater for it in case in future releases code\n    // outside of this class is changed and this could happen.\n\n    switch (pinned) {\n      case Constants.PINNED_LEFT:\n        this.destroyFullWidthRow(item.left);\n        item.left = comp;\n        break;\n\n      case Constants.PINNED_RIGHT:\n        this.destroyFullWidthRow(item.right);\n        item.right = comp;\n        break;\n\n      default:\n        this.destroyFullWidthRow(item.center);\n        item.center = comp;\n        break;\n    }\n\n    this.cacheItems.sort(function (a, b) {\n      return b.lastAccessedTime - a.lastAccessedTime;\n    });\n    this.purgeCache(this.maxCacheSize);\n  };\n\n  DetailRowCompCache.prototype.getCacheItem = function (rowNode, autoCreate) {\n    if (autoCreate === void 0) {\n      autoCreate = false;\n    }\n\n    var res;\n\n    for (var i = 0; i < this.cacheItems.length; i++) {\n      var item = this.cacheItems[i];\n\n      if (item.rowNode === rowNode) {\n        res = item;\n        break;\n      }\n    }\n\n    if (!res && autoCreate) {\n      res = {\n        rowNode: rowNode\n      };\n      this.cacheItems.push(res);\n    }\n\n    if (res) {\n      this.stampCacheItem(res);\n    }\n\n    return res;\n  };\n\n  DetailRowCompCache.prototype.stampCacheItem = function (item) {\n    item.lastAccessedTime = new Date().getTime();\n  };\n\n  DetailRowCompCache.prototype.destroyFullWidthRow = function (comp) {\n    this.getContext().destroyBean(comp);\n  };\n\n  DetailRowCompCache.prototype.purgeCache = function (startIndex) {\n    // delete all rows past the index of interest\n    for (var i = startIndex; i < this.cacheItems.length; i++) {\n      var item = this.cacheItems[i];\n      this.destroyFullWidthRow(item.center);\n      this.destroyFullWidthRow(item.left);\n      this.destroyFullWidthRow(item.right);\n    } // change the length of the array so it no longer contains the deleted items\n\n\n    if (this.cacheItems.length > startIndex) {\n      this.cacheItems.length = startIndex;\n    }\n  };\n\n  DetailRowCompCache.prototype.get = function (rowNode, pinned) {\n    if (!rowNode.detail) {\n      return undefined;\n    }\n\n    var item = this.getCacheItem(rowNode);\n    var res;\n\n    if (item) {\n      switch (pinned) {\n        case Constants.PINNED_LEFT:\n          if (item.left) {\n            res = item.left;\n            item.left = undefined;\n          }\n\n          break;\n\n        case Constants.PINNED_RIGHT:\n          if (item.right) {\n            res = item.right;\n            item.right = undefined;\n          }\n\n          break;\n\n        default:\n          if (item.center) {\n            res = item.center;\n            item.center = undefined;\n          }\n\n          break;\n      }\n    }\n\n    return res;\n  };\n\n  DetailRowCompCache.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.purgeCache(0);\n  };\n\n  __decorate([Autowired('gridOptionsWrapper')], DetailRowCompCache.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([PostConstruct], DetailRowCompCache.prototype, \"postConstruct\", null);\n\n  __decorate([PreDestroy], DetailRowCompCache.prototype, \"destroy\", null);\n\n  DetailRowCompCache = __decorate([Bean('detailRowCompCache')], DetailRowCompCache);\n  return DetailRowCompCache;\n}(BeanStub);\n\nexport { DetailRowCompCache };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/rendering/detailRowCompCache.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","PostConstruct","PreDestroy","Constants","BeanStub","DetailRowCompCache","_super","_this","apply","cacheItems","postConstruct","active","gridOptionsWrapper","isKeepDetailRows","maxCacheSize","getKeepDetailRowsCount","addOrDestroy","rowNode","pinned","comp","doNotUseCache","detail","destroyFullWidthRow","item","getCacheItem","PINNED_LEFT","left","PINNED_RIGHT","right","center","sort","a","lastAccessedTime","purgeCache","autoCreate","res","push","stampCacheItem","Date","getTime","getContext","destroyBean","startIndex","get","undefined","destroy","call"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct, PreDestroy } from \"../context/context\";\nimport { Constants } from \"../constants\";\nimport { BeanStub } from \"../context/beanStub\";\n/**\n * For Master Detail, it is required to keep components between expanding & collapsing parents.\n * For example a user expands row A (and shows a detail grid for this row), then when row A\n * is closed, we want to keep the detail grid, so next time row A is expanded the detail grid\n * is showed with it's context intact, eg if user sorted in the detail grid, that sort should\n * still be applied after the detail grid is shown for the second time.\n */\nvar DetailRowCompCache = /** @class */ (function (_super) {\n    __extends(DetailRowCompCache, _super);\n    function DetailRowCompCache() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.cacheItems = [];\n        return _this;\n    }\n    DetailRowCompCache.prototype.postConstruct = function () {\n        this.active = this.gridOptionsWrapper.isKeepDetailRows();\n        this.maxCacheSize = this.gridOptionsWrapper.getKeepDetailRowsCount();\n    };\n    DetailRowCompCache.prototype.addOrDestroy = function (rowNode, pinned, comp) {\n        // only accept detail rows\n        var doNotUseCache = !this.active || !rowNode.detail;\n        if (doNotUseCache) {\n            this.destroyFullWidthRow(comp);\n            return;\n        }\n        var item = this.getCacheItem(rowNode, true);\n        // put the comp in the right location of the item.\n        // we also destroy any previous comp - this should never happen\n        // as the logic outside of this class shouldn't be adding same item to the\n        // cache twice, however we cater for it in case in future releases code\n        // outside of this class is changed and this could happen.\n        switch (pinned) {\n            case Constants.PINNED_LEFT:\n                this.destroyFullWidthRow(item.left);\n                item.left = comp;\n                break;\n            case Constants.PINNED_RIGHT:\n                this.destroyFullWidthRow(item.right);\n                item.right = comp;\n                break;\n            default:\n                this.destroyFullWidthRow(item.center);\n                item.center = comp;\n                break;\n        }\n        this.cacheItems.sort(function (a, b) {\n            return b.lastAccessedTime - a.lastAccessedTime;\n        });\n        this.purgeCache(this.maxCacheSize);\n    };\n    DetailRowCompCache.prototype.getCacheItem = function (rowNode, autoCreate) {\n        if (autoCreate === void 0) { autoCreate = false; }\n        var res;\n        for (var i = 0; i < this.cacheItems.length; i++) {\n            var item = this.cacheItems[i];\n            if (item.rowNode === rowNode) {\n                res = item;\n                break;\n            }\n        }\n        if (!res && autoCreate) {\n            res = {\n                rowNode: rowNode\n            };\n            this.cacheItems.push(res);\n        }\n        if (res) {\n            this.stampCacheItem(res);\n        }\n        return res;\n    };\n    DetailRowCompCache.prototype.stampCacheItem = function (item) {\n        item.lastAccessedTime = new Date().getTime();\n    };\n    DetailRowCompCache.prototype.destroyFullWidthRow = function (comp) {\n        this.getContext().destroyBean(comp);\n    };\n    DetailRowCompCache.prototype.purgeCache = function (startIndex) {\n        // delete all rows past the index of interest\n        for (var i = startIndex; i < this.cacheItems.length; i++) {\n            var item = this.cacheItems[i];\n            this.destroyFullWidthRow(item.center);\n            this.destroyFullWidthRow(item.left);\n            this.destroyFullWidthRow(item.right);\n        }\n        // change the length of the array so it no longer contains the deleted items\n        if (this.cacheItems.length > startIndex) {\n            this.cacheItems.length = startIndex;\n        }\n    };\n    DetailRowCompCache.prototype.get = function (rowNode, pinned) {\n        if (!rowNode.detail) {\n            return undefined;\n        }\n        var item = this.getCacheItem(rowNode);\n        var res;\n        if (item) {\n            switch (pinned) {\n                case Constants.PINNED_LEFT:\n                    if (item.left) {\n                        res = item.left;\n                        item.left = undefined;\n                    }\n                    break;\n                case Constants.PINNED_RIGHT:\n                    if (item.right) {\n                        res = item.right;\n                        item.right = undefined;\n                    }\n                    break;\n                default:\n                    if (item.center) {\n                        res = item.center;\n                        item.center = undefined;\n                    }\n                    break;\n            }\n        }\n        return res;\n    };\n    DetailRowCompCache.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.purgeCache(0);\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], DetailRowCompCache.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], DetailRowCompCache.prototype, \"postConstruct\", null);\n    __decorate([\n        PreDestroy\n    ], DetailRowCompCache.prototype, \"destroy\", null);\n    DetailRowCompCache = __decorate([\n        Bean('detailRowCompCache')\n    ], DetailRowCompCache);\n    return DetailRowCompCache;\n}(BeanStub));\nexport { DetailRowCompCache };\n"]},"metadata":{},"sourceType":"module"}