{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Component, Grid, RefSelector, RowNode } from \"@ag-grid-community/core\";\n\nvar DetailCellRenderer =\n/** @class */\nfunction (_super) {\n  __extends(DetailCellRenderer, _super);\n\n  function DetailCellRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.needRefresh = false;\n    _this.loadRowDataVersion = 0;\n    return _this;\n  }\n\n  DetailCellRenderer.prototype.init = function (params) {\n    var _this = this; // if embedFullWidthRows=true, then this component could be in a pinned section. we should not show detail\n    // component if in the pinned section, on in the main body section.\n\n\n    if (params.pinned) {\n      this.setTemplate('<div class=\"ag-details-row\"></div>');\n      return;\n    }\n\n    this.params = params;\n    this.checkForDeprecations();\n    this.ensureValidRefreshStrategy();\n    this.selectAndSetTemplate();\n\n    if (_.exists(this.eDetailGrid)) {\n      this.addThemeToDetailGrid();\n      this.createDetailsGrid();\n      this.registerDetailWithMaster();\n      this.loadRowData();\n      window.setTimeout(function () {\n        // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n        if (_this.detailGridOptions.api) {\n          _this.detailGridOptions.api.doLayout();\n        }\n      }, 0);\n    } else {\n      console.warn('ag-Grid: reference to eDetailGrid was missing from the details template. ' + 'Please add ref=\"eDetailGrid\" to the template.');\n    }\n\n    this.addManagedListener(params.node.parent, RowNode.EVENT_DATA_CHANGED, function () {\n      _this.needRefresh = true;\n    });\n    this.setupAutoGridHeight();\n  };\n\n  DetailCellRenderer.prototype.refresh = function () {\n    var GET_GRID_TO_REFRESH = false;\n    var GET_GRID_TO_DO_NOTHING = true; // if we return true, it means we pretend to the grid\n    // that we have refreshed, so refresh will never happen.\n\n    var doNotRefresh = !this.needRefresh || this.params.refreshStrategy === 'nothing';\n\n    if (doNotRefresh) {\n      // we do nothing in this refresh method, and also tell the grid to do nothing\n      return GET_GRID_TO_DO_NOTHING;\n    } // reset flag, so don't refresh again until more data changes.\n\n\n    this.needRefresh = false;\n\n    if (this.params.refreshStrategy === 'everything') {\n      // we want full refresh, so tell the grid to destroy and recreate this cell\n      return GET_GRID_TO_REFRESH;\n    } else {\n      // do the refresh here, and tell the grid to do nothing\n      this.loadRowData();\n      return GET_GRID_TO_DO_NOTHING;\n    }\n  }; // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n\n\n  DetailCellRenderer.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  DetailCellRenderer.prototype.checkForDeprecations = function () {\n    if (this.params.suppressRefresh) {\n      console.warn(\"ag-Grid: as of v23.2.0, cellRendererParams.suppressRefresh for Detail Cell Renderer is no \" + \"longer used. Please set cellRendererParams.refreshStrategy = 'nothing' instead.\");\n      this.params.refreshStrategy = 'nothing';\n    }\n  };\n\n  DetailCellRenderer.prototype.ensureValidRefreshStrategy = function () {\n    switch (this.params.refreshStrategy) {\n      case 'rows':\n        return;\n\n      case 'nothing':\n        return;\n\n      case 'everything':\n        return;\n    } // check for incorrectly supplied refresh strategy\n\n\n    if (this.params.refreshStrategy) {\n      console.warn(\"ag-Grid: invalid cellRendererParams.refreshStrategy = '\" + this.params.refreshStrategy + \"' supplied, defaulting to refreshStrategy = 'rows'.\");\n    } // use default strategy\n\n\n    this.params.refreshStrategy = 'rows';\n  };\n\n  DetailCellRenderer.prototype.setupAutoGridHeight = function () {\n    var _this = this;\n\n    if (!this.params.autoHeight) {\n      return;\n    }\n\n    var gridApi = this.params.api;\n\n    var onRowHeightChangedDebounced = _.debounce(gridApi.onRowHeightChanged.bind(gridApi), 20);\n\n    var checkRowSizeFunc = function checkRowSizeFunc() {\n      var clientHeight = _this.getGui().clientHeight;\n\n      if (clientHeight != null) {\n        _this.params.node.setRowHeight(clientHeight);\n\n        onRowHeightChangedDebounced();\n      }\n    };\n\n    var resizeObserverDestroyFunc = this.resizeObserverService.observeResize(this.getGui(), checkRowSizeFunc);\n    this.addDestroyFunc(resizeObserverDestroyFunc);\n    checkRowSizeFunc();\n  };\n\n  DetailCellRenderer.prototype.addThemeToDetailGrid = function () {\n    // this is needed by environment service of the child grid, the class needs to be on\n    // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n    var theme = this.environment.getTheme().theme;\n\n    if (theme) {\n      _.addCssClass(this.eDetailGrid, theme);\n    }\n  };\n\n  DetailCellRenderer.prototype.registerDetailWithMaster = function () {\n    var rowId = this.params.node.id;\n    var masterGridApi = this.params.api;\n    var gridInfo = {\n      id: rowId,\n      api: this.detailGridOptions.api,\n      columnApi: this.detailGridOptions.columnApi\n    };\n    var rowNode = this.params.node; // register with api\n\n    masterGridApi.addDetailGridInfo(rowId, gridInfo); // register with node\n\n    rowNode.detailGridInfo = gridInfo;\n    this.addDestroyFunc(function () {\n      masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n\n      rowNode.detailGridInfo = null; // unregister from node\n    });\n  };\n\n  DetailCellRenderer.prototype.selectAndSetTemplate = function () {\n    var _this = this;\n\n    var setDefaultTemplate = function setDefaultTemplate() {\n      _this.setTemplate(DetailCellRenderer.TEMPLATE);\n\n      var autoHeight = _this.params.autoHeight;\n\n      _this.addCssClass(autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height');\n\n      _.addCssClass(_this.eDetailGrid, autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height');\n    };\n\n    if (_.missing(this.params.template)) {\n      // use default template\n      setDefaultTemplate();\n    } else {\n      // use user provided template\n      if (typeof this.params.template === 'string') {\n        this.setTemplate(this.params.template);\n      } else if (typeof this.params.template === 'function') {\n        var templateFunc = this.params.template;\n        var template = templateFunc(this.params);\n        this.setTemplate(template);\n      } else {\n        console.warn('ag-Grid: detailCellRendererParams.template should be function or string');\n        setDefaultTemplate();\n      }\n    }\n  };\n\n  DetailCellRenderer.prototype.createDetailsGrid = function () {\n    // we clone the detail grid options, as otherwise it would be shared\n    // across many instances, and that would be a problem because we set\n    // api and columnApi into gridOptions\n    var _this = this;\n\n    var gridOptions = this.params.detailGridOptions;\n\n    if (_.missing(gridOptions)) {\n      console.warn('ag-Grid: could not find detail grid options for master detail, ' + 'please set gridOptions.detailCellRendererParams.detailGridOptions');\n    } // IMPORTANT - gridOptions must be cloned\n\n\n    this.detailGridOptions = _.cloneObject(gridOptions);\n\n    if (this.params.autoHeight) {\n      this.detailGridOptions.domLayout = 'autoHeight';\n    } // tslint:disable-next-line\n\n\n    new Grid(this.eDetailGrid, this.detailGridOptions, {\n      $scope: this.params.$scope,\n      $compile: this.params.$compile,\n      providedBeanInstances: {\n        // a temporary fix for AG-1574\n        // AG-1715 raised to do a wider ranging refactor to improve this\n        agGridReact: this.params.agGridReact,\n        // AG-1716 - directly related to AG-1574 and AG-1715\n        frameworkComponentWrapper: this.params.frameworkComponentWrapper\n      }\n    });\n    this.addDestroyFunc(function () {\n      if (_this.detailGridOptions.api) {\n        _this.detailGridOptions.api.destroy();\n      }\n    });\n  };\n\n  DetailCellRenderer.prototype.loadRowData = function () {\n    var _this = this; // in case a refresh happens before the last refresh completes (as we depend on async\n    // application logic) we keep track on what the latest call was.\n\n\n    this.loadRowDataVersion++;\n    var versionThisCall = this.loadRowDataVersion;\n    var userFunc = this.params.getDetailRowData;\n\n    if (!userFunc) {\n      console.warn('ag-Grid: could not find getDetailRowData for master / detail, ' + 'please set gridOptions.detailCellRendererParams.getDetailRowData');\n      return;\n    }\n\n    var successCallback = function successCallback(rowData) {\n      var mostRecentCall = _this.loadRowDataVersion === versionThisCall;\n\n      if (mostRecentCall) {\n        _this.setRowData(rowData);\n      }\n    };\n\n    var funcParams = {\n      node: this.params.node,\n      // we take data from node, rather than params.data\n      // as the data could have been updated with new instance\n      data: this.params.node.data,\n      successCallback: successCallback\n    };\n    userFunc(funcParams);\n  };\n\n  DetailCellRenderer.prototype.setRowData = function (rowData) {\n    // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n    if (this.detailGridOptions.api) {\n      this.detailGridOptions.api.setRowData(rowData);\n    }\n  };\n\n  DetailCellRenderer.TEMPLATE = \"<div class=\\\"ag-details-row\\\">\\n            <div ref=\\\"eDetailGrid\\\" class=\\\"ag-details-grid\\\"/>\\n        </div>\";\n\n  __decorate([Autowired('environment')], DetailCellRenderer.prototype, \"environment\", void 0);\n\n  __decorate([RefSelector('eDetailGrid')], DetailCellRenderer.prototype, \"eDetailGrid\", void 0);\n\n  __decorate([Autowired('resizeObserverService')], DetailCellRenderer.prototype, \"resizeObserverService\", void 0);\n\n  return DetailCellRenderer;\n}(Component);\n\nexport { DetailCellRenderer };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/master-detail/dist/es6/masterDetail/detailCellRenderer.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","Component","Grid","RefSelector","RowNode","DetailCellRenderer","_super","_this","apply","needRefresh","loadRowDataVersion","init","params","pinned","setTemplate","checkForDeprecations","ensureValidRefreshStrategy","selectAndSetTemplate","exists","eDetailGrid","addThemeToDetailGrid","createDetailsGrid","registerDetailWithMaster","loadRowData","window","setTimeout","detailGridOptions","api","doLayout","console","warn","addManagedListener","node","parent","EVENT_DATA_CHANGED","setupAutoGridHeight","refresh","GET_GRID_TO_REFRESH","GET_GRID_TO_DO_NOTHING","doNotRefresh","refreshStrategy","destroy","call","suppressRefresh","autoHeight","gridApi","onRowHeightChangedDebounced","debounce","onRowHeightChanged","bind","checkRowSizeFunc","clientHeight","getGui","setRowHeight","resizeObserverDestroyFunc","resizeObserverService","observeResize","addDestroyFunc","theme","environment","getTheme","addCssClass","rowId","id","masterGridApi","gridInfo","columnApi","rowNode","addDetailGridInfo","detailGridInfo","removeDetailGridInfo","setDefaultTemplate","TEMPLATE","missing","template","templateFunc","gridOptions","cloneObject","domLayout","$scope","$compile","providedBeanInstances","agGridReact","frameworkComponentWrapper","versionThisCall","userFunc","getDetailRowData","successCallback","rowData","mostRecentCall","setRowData","funcParams","data"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Component, Grid, RefSelector, RowNode } from \"@ag-grid-community/core\";\nvar DetailCellRenderer = /** @class */ (function (_super) {\n    __extends(DetailCellRenderer, _super);\n    function DetailCellRenderer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.needRefresh = false;\n        _this.loadRowDataVersion = 0;\n        return _this;\n    }\n    DetailCellRenderer.prototype.init = function (params) {\n        var _this = this;\n        // if embedFullWidthRows=true, then this component could be in a pinned section. we should not show detail\n        // component if in the pinned section, on in the main body section.\n        if (params.pinned) {\n            this.setTemplate('<div class=\"ag-details-row\"></div>');\n            return;\n        }\n        this.params = params;\n        this.checkForDeprecations();\n        this.ensureValidRefreshStrategy();\n        this.selectAndSetTemplate();\n        if (_.exists(this.eDetailGrid)) {\n            this.addThemeToDetailGrid();\n            this.createDetailsGrid();\n            this.registerDetailWithMaster();\n            this.loadRowData();\n            window.setTimeout(function () {\n                // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n                if (_this.detailGridOptions.api) {\n                    _this.detailGridOptions.api.doLayout();\n                }\n            }, 0);\n        }\n        else {\n            console.warn('ag-Grid: reference to eDetailGrid was missing from the details template. ' +\n                'Please add ref=\"eDetailGrid\" to the template.');\n        }\n        this.addManagedListener(params.node.parent, RowNode.EVENT_DATA_CHANGED, function () {\n            _this.needRefresh = true;\n        });\n        this.setupAutoGridHeight();\n    };\n    DetailCellRenderer.prototype.refresh = function () {\n        var GET_GRID_TO_REFRESH = false;\n        var GET_GRID_TO_DO_NOTHING = true;\n        // if we return true, it means we pretend to the grid\n        // that we have refreshed, so refresh will never happen.\n        var doNotRefresh = !this.needRefresh || this.params.refreshStrategy === 'nothing';\n        if (doNotRefresh) {\n            // we do nothing in this refresh method, and also tell the grid to do nothing\n            return GET_GRID_TO_DO_NOTHING;\n        }\n        // reset flag, so don't refresh again until more data changes.\n        this.needRefresh = false;\n        if (this.params.refreshStrategy === 'everything') {\n            // we want full refresh, so tell the grid to destroy and recreate this cell\n            return GET_GRID_TO_REFRESH;\n        }\n        else {\n            // do the refresh here, and tell the grid to do nothing\n            this.loadRowData();\n            return GET_GRID_TO_DO_NOTHING;\n        }\n    };\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    DetailCellRenderer.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    DetailCellRenderer.prototype.checkForDeprecations = function () {\n        if (this.params.suppressRefresh) {\n            console.warn(\"ag-Grid: as of v23.2.0, cellRendererParams.suppressRefresh for Detail Cell Renderer is no \" +\n                \"longer used. Please set cellRendererParams.refreshStrategy = 'nothing' instead.\");\n            this.params.refreshStrategy = 'nothing';\n        }\n    };\n    DetailCellRenderer.prototype.ensureValidRefreshStrategy = function () {\n        switch (this.params.refreshStrategy) {\n            case 'rows': return;\n            case 'nothing': return;\n            case 'everything': return;\n        }\n        // check for incorrectly supplied refresh strategy\n        if (this.params.refreshStrategy) {\n            console.warn(\"ag-Grid: invalid cellRendererParams.refreshStrategy = '\" + this.params.refreshStrategy +\n                \"' supplied, defaulting to refreshStrategy = 'rows'.\");\n        }\n        // use default strategy\n        this.params.refreshStrategy = 'rows';\n    };\n    DetailCellRenderer.prototype.setupAutoGridHeight = function () {\n        var _this = this;\n        if (!this.params.autoHeight) {\n            return;\n        }\n        var gridApi = this.params.api;\n        var onRowHeightChangedDebounced = _.debounce(gridApi.onRowHeightChanged.bind(gridApi), 20);\n        var checkRowSizeFunc = function () {\n            var clientHeight = _this.getGui().clientHeight;\n            if (clientHeight != null) {\n                _this.params.node.setRowHeight(clientHeight);\n                onRowHeightChangedDebounced();\n            }\n        };\n        var resizeObserverDestroyFunc = this.resizeObserverService.observeResize(this.getGui(), checkRowSizeFunc);\n        this.addDestroyFunc(resizeObserverDestroyFunc);\n        checkRowSizeFunc();\n    };\n    DetailCellRenderer.prototype.addThemeToDetailGrid = function () {\n        // this is needed by environment service of the child grid, the class needs to be on\n        // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n        var theme = this.environment.getTheme().theme;\n        if (theme) {\n            _.addCssClass(this.eDetailGrid, theme);\n        }\n    };\n    DetailCellRenderer.prototype.registerDetailWithMaster = function () {\n        var rowId = this.params.node.id;\n        var masterGridApi = this.params.api;\n        var gridInfo = {\n            id: rowId,\n            api: this.detailGridOptions.api,\n            columnApi: this.detailGridOptions.columnApi\n        };\n        var rowNode = this.params.node;\n        // register with api\n        masterGridApi.addDetailGridInfo(rowId, gridInfo);\n        // register with node\n        rowNode.detailGridInfo = gridInfo;\n        this.addDestroyFunc(function () {\n            masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n            rowNode.detailGridInfo = null; // unregister from node\n        });\n    };\n    DetailCellRenderer.prototype.selectAndSetTemplate = function () {\n        var _this = this;\n        var setDefaultTemplate = function () {\n            _this.setTemplate(DetailCellRenderer.TEMPLATE);\n            var autoHeight = _this.params.autoHeight;\n            _this.addCssClass(autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height');\n            _.addCssClass(_this.eDetailGrid, autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height');\n        };\n        if (_.missing(this.params.template)) {\n            // use default template\n            setDefaultTemplate();\n        }\n        else {\n            // use user provided template\n            if (typeof this.params.template === 'string') {\n                this.setTemplate(this.params.template);\n            }\n            else if (typeof this.params.template === 'function') {\n                var templateFunc = this.params.template;\n                var template = templateFunc(this.params);\n                this.setTemplate(template);\n            }\n            else {\n                console.warn('ag-Grid: detailCellRendererParams.template should be function or string');\n                setDefaultTemplate();\n            }\n        }\n    };\n    DetailCellRenderer.prototype.createDetailsGrid = function () {\n        // we clone the detail grid options, as otherwise it would be shared\n        // across many instances, and that would be a problem because we set\n        // api and columnApi into gridOptions\n        var _this = this;\n        var gridOptions = this.params.detailGridOptions;\n        if (_.missing(gridOptions)) {\n            console.warn('ag-Grid: could not find detail grid options for master detail, ' +\n                'please set gridOptions.detailCellRendererParams.detailGridOptions');\n        }\n        // IMPORTANT - gridOptions must be cloned\n        this.detailGridOptions = _.cloneObject(gridOptions);\n        if (this.params.autoHeight) {\n            this.detailGridOptions.domLayout = 'autoHeight';\n        }\n        // tslint:disable-next-line\n        new Grid(this.eDetailGrid, this.detailGridOptions, {\n            $scope: this.params.$scope,\n            $compile: this.params.$compile,\n            providedBeanInstances: {\n                // a temporary fix for AG-1574\n                // AG-1715 raised to do a wider ranging refactor to improve this\n                agGridReact: this.params.agGridReact,\n                // AG-1716 - directly related to AG-1574 and AG-1715\n                frameworkComponentWrapper: this.params.frameworkComponentWrapper\n            }\n        });\n        this.addDestroyFunc(function () {\n            if (_this.detailGridOptions.api) {\n                _this.detailGridOptions.api.destroy();\n            }\n        });\n    };\n    DetailCellRenderer.prototype.loadRowData = function () {\n        var _this = this;\n        // in case a refresh happens before the last refresh completes (as we depend on async\n        // application logic) we keep track on what the latest call was.\n        this.loadRowDataVersion++;\n        var versionThisCall = this.loadRowDataVersion;\n        var userFunc = this.params.getDetailRowData;\n        if (!userFunc) {\n            console.warn('ag-Grid: could not find getDetailRowData for master / detail, ' +\n                'please set gridOptions.detailCellRendererParams.getDetailRowData');\n            return;\n        }\n        var successCallback = function (rowData) {\n            var mostRecentCall = _this.loadRowDataVersion === versionThisCall;\n            if (mostRecentCall) {\n                _this.setRowData(rowData);\n            }\n        };\n        var funcParams = {\n            node: this.params.node,\n            // we take data from node, rather than params.data\n            // as the data could have been updated with new instance\n            data: this.params.node.data,\n            successCallback: successCallback\n        };\n        userFunc(funcParams);\n    };\n    DetailCellRenderer.prototype.setRowData = function (rowData) {\n        // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n        if (this.detailGridOptions.api) {\n            this.detailGridOptions.api.setRowData(rowData);\n        }\n    };\n    DetailCellRenderer.TEMPLATE = \"<div class=\\\"ag-details-row\\\">\\n            <div ref=\\\"eDetailGrid\\\" class=\\\"ag-details-grid\\\"/>\\n        </div>\";\n    __decorate([\n        Autowired('environment')\n    ], DetailCellRenderer.prototype, \"environment\", void 0);\n    __decorate([\n        RefSelector('eDetailGrid')\n    ], DetailCellRenderer.prototype, \"eDetailGrid\", void 0);\n    __decorate([\n        Autowired('resizeObserverService')\n    ], DetailCellRenderer.prototype, \"resizeObserverService\", void 0);\n    return DetailCellRenderer;\n}(Component));\nexport { DetailCellRenderer };\n"]},"metadata":{},"sourceType":"module"}