{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Bean, BeanStub, ChangedPath, Constants, Events, PostConstruct, Optional } from \"@ag-grid-community/core\";\n\nvar ClipboardService =\n/** @class */\nfunction (_super) {\n  __extends(ClipboardService, _super);\n\n  function ClipboardService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ClipboardService.prototype.registerGridCore = function (gridCore) {\n    this.gridCore = gridCore;\n  };\n\n  ClipboardService.prototype.init = function () {\n    this.logger = this.loggerFactory.create('ClipboardService');\n\n    if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      this.clientSideRowModel = this.rowModel;\n    }\n  };\n\n  ClipboardService.prototype.pasteFromClipboard = function () {\n    var _this = this;\n\n    this.logger.log('pasteFromClipboard');\n    this.executeOnTempElement(function (textArea) {\n      return textArea.focus();\n    }, function (element) {\n      var data = element.value;\n\n      if (_.missingOrEmpty(data)) {\n        return;\n      }\n\n      var parsedData = _.stringToArray(data, _this.gridOptionsWrapper.getClipboardDeliminator());\n\n      var userFunc = _this.gridOptionsWrapper.getProcessDataFromClipboardFunc();\n\n      if (userFunc) {\n        parsedData = userFunc({\n          data: parsedData\n        });\n      }\n\n      if (_.missingOrEmpty(parsedData)) {\n        return;\n      }\n\n      if (_this.gridOptionsWrapper.isSuppressLastEmptyLineOnPaste()) {\n        _this.removeLastLineIfBlank(parsedData);\n      }\n\n      var pasteOperation = function (cellsToFlash, updatedRowNodes, focusedCell, changedPath) {\n        var rangeActive = _this.rangeController && _this.rangeController.isMoreThanOneCell();\n\n        var pasteIntoRange = rangeActive && !_this.hasOnlyOneValueToPaste(parsedData);\n\n        if (pasteIntoRange) {\n          _this.pasteIntoActiveRange(parsedData, cellsToFlash, updatedRowNodes, changedPath);\n        } else {\n          _this.pasteStartingFromFocusedCell(parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n        }\n      };\n\n      _this.doPasteOperation(pasteOperation);\n    });\n  }; // common code to paste operations, e.g. paste to cell, paste to range, and copy range down\n\n\n  ClipboardService.prototype.doPasteOperation = function (pasteOperationFunc) {\n    var api = this.gridOptionsWrapper.getApi();\n    var columnApi = this.gridOptionsWrapper.getColumnApi();\n    var source = 'clipboard';\n    this.eventService.dispatchEvent({\n      type: Events.EVENT_PASTE_START,\n      api: api,\n      columnApi: columnApi,\n      source: source\n    });\n    var changedPath;\n\n    if (this.clientSideRowModel) {\n      var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();\n      changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n    }\n\n    var cellsToFlash = {};\n    var updatedRowNodes = [];\n    var focusedCell = this.focusController.getFocusedCell();\n    pasteOperationFunc(cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n\n    if (changedPath) {\n      this.clientSideRowModel.doAggregate(changedPath);\n    }\n\n    this.rowRenderer.refreshCells();\n    this.dispatchFlashCells(cellsToFlash);\n    this.fireRowChanged(updatedRowNodes);\n\n    if (focusedCell) {\n      this.focusController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.rowPinned, true);\n    }\n\n    this.eventService.dispatchEvent({\n      type: Events.EVENT_PASTE_END,\n      api: api,\n      columnApi: columnApi,\n      source: source\n    });\n  };\n\n  ClipboardService.prototype.pasteIntoActiveRange = function (clipboardData, cellsToFlash, updatedRowNodes, changedPath) {\n    var _this = this; // true if clipboard data can be evenly pasted into range, otherwise false\n\n\n    var abortRepeatingPasteIntoRows = this.getRangeSize() % clipboardData.length != 0;\n    var indexOffset = 0,\n        dataRowIndex = 0;\n\n    var rowCallback = function (currentRow, rowNode, columns, index) {\n      var atEndOfClipboardData = index - indexOffset >= clipboardData.length;\n\n      if (atEndOfClipboardData) {\n        if (abortRepeatingPasteIntoRows) {\n          return;\n        } // increment offset and reset data index to repeat paste of data\n\n\n        indexOffset += dataRowIndex;\n        dataRowIndex = 0;\n      }\n\n      var currentRowData = clipboardData[index - indexOffset]; // otherwise we are not the first row, so copy\n\n      updatedRowNodes.push(rowNode);\n\n      var processCellFromClipboardFunc = _this.gridOptionsWrapper.getProcessCellFromClipboardFunc();\n\n      columns.forEach(function (column, idx) {\n        if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n          return;\n        } // repeat data for columns we don't have data for - happens when to range is bigger than copied data range\n\n\n        if (idx >= currentRowData.length) {\n          idx = idx % currentRowData.length;\n        }\n\n        var newValue = _this.processCell(rowNode, column, currentRowData[idx], Constants.EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc);\n\n        _this.valueService.setValue(rowNode, column, newValue, Constants.SOURCE_PASTE);\n\n        if (changedPath) {\n          changedPath.addParentNode(rowNode.parent, [column]);\n        }\n\n        var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);\n\n        cellsToFlash[cellId] = true;\n      });\n      dataRowIndex++;\n    };\n\n    this.iterateActiveRanges(false, rowCallback);\n  };\n\n  ClipboardService.prototype.pasteStartingFromFocusedCell = function (parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath) {\n    if (!focusedCell) {\n      return;\n    }\n\n    var currentRow = {\n      rowIndex: focusedCell.rowIndex,\n      rowPinned: focusedCell.rowPinned\n    };\n    var columnsToPasteInto = this.columnController.getDisplayedColumnsStartingAt(focusedCell.column);\n\n    if (this.hasOnlyOneValueToPaste(parsedData)) {\n      this.pasteSingleValue(parsedData, updatedRowNodes, cellsToFlash, changedPath);\n    } else {\n      this.pasteMultipleValues(parsedData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, Constants.EXPORT_TYPE_CLIPBOARD, changedPath);\n    }\n  };\n\n  ClipboardService.prototype.hasOnlyOneValueToPaste = function (parsedData) {\n    return parsedData.length === 1 && parsedData[0].length === 1;\n  };\n\n  ClipboardService.prototype.copyRangeDown = function () {\n    var _this = this;\n\n    if (!this.rangeController || this.rangeController.isEmpty()) {\n      return;\n    }\n\n    var firstRowValues = [];\n\n    var pasteOperation = function (cellsToFlash, updatedRowNodes, focusedCell, changedPath) {\n      var processCellForClipboardFunc = _this.gridOptionsWrapper.getProcessCellForClipboardFunc();\n\n      var processCellFromClipboardFunc = _this.gridOptionsWrapper.getProcessCellFromClipboardFunc();\n\n      var rowCallback = function (currentRow, rowNode, columns) {\n        // take reference of first row, this is the one we will be using to copy from\n        if (!firstRowValues.length) {\n          // two reasons for looping through columns\n          columns.forEach(function (column) {\n            // get the initial values to copy down\n            var value = _this.processCell(rowNode, column, _this.valueService.getValue(column, rowNode), Constants.EXPORT_TYPE_DRAG_COPY, processCellForClipboardFunc);\n\n            firstRowValues.push(value);\n          });\n        } else {\n          // otherwise we are not the first row, so copy\n          updatedRowNodes.push(rowNode);\n          columns.forEach(function (column, index) {\n            if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n              return;\n            }\n\n            var firstRowValue = _this.processCell(rowNode, column, firstRowValues[index], Constants.EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc);\n\n            _this.valueService.setValue(rowNode, column, firstRowValue, Constants.SOURCE_PASTE);\n\n            if (changedPath) {\n              changedPath.addParentNode(rowNode.parent, [column]);\n            }\n\n            var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);\n\n            cellsToFlash[cellId] = true;\n          });\n        }\n      };\n\n      _this.iterateActiveRanges(true, rowCallback);\n    };\n\n    this.doPasteOperation(pasteOperation);\n  };\n\n  ClipboardService.prototype.removeLastLineIfBlank = function (parsedData) {\n    // remove last row if empty, excel puts empty last row in\n    var lastLine = _.last(parsedData);\n\n    var lastLineIsBlank = lastLine && lastLine.length === 1 && lastLine[0] === '';\n\n    if (lastLineIsBlank) {\n      _.removeFromArray(parsedData, lastLine);\n    }\n  };\n\n  ClipboardService.prototype.fireRowChanged = function (rowNodes) {\n    var _this = this;\n\n    if (!this.gridOptionsWrapper.isFullRowEdit()) {\n      return;\n    }\n\n    rowNodes.forEach(function (rowNode) {\n      var event = {\n        type: Events.EVENT_ROW_VALUE_CHANGED,\n        node: rowNode,\n        data: rowNode.data,\n        rowIndex: rowNode.rowIndex,\n        rowPinned: rowNode.rowPinned,\n        context: _this.gridOptionsWrapper.getContext(),\n        api: _this.gridOptionsWrapper.getApi(),\n        columnApi: _this.gridOptionsWrapper.getColumnApi()\n      };\n\n      _this.eventService.dispatchEvent(event);\n    });\n  };\n\n  ClipboardService.prototype.pasteMultipleValues = function (clipboardGridData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, type, changedPath) {\n    var _this = this;\n\n    clipboardGridData.forEach(function (clipboardRowData) {\n      // if we have come to end of rows in grid, then skip\n      if (!currentRow) {\n        return;\n      }\n\n      var rowNode = _this.rowPositionUtils.getRowNode(currentRow);\n\n      if (rowNode) {\n        updatedRowNodes.push(rowNode);\n        clipboardRowData.forEach(function (value, index) {\n          return _this.updateCellValue(rowNode, columnsToPasteInto[index], value, currentRow, cellsToFlash, type, changedPath);\n        }); // move to next row down for next set of values\n\n        currentRow = _this.cellNavigationService.getRowBelow({\n          rowPinned: currentRow.rowPinned,\n          rowIndex: currentRow.rowIndex\n        });\n      }\n    });\n    return currentRow;\n  };\n\n  ClipboardService.prototype.pasteSingleValue = function (parsedData, updatedRowNodes, cellsToFlash, changedPath) {\n    var _this = this;\n\n    var value = parsedData[0][0];\n\n    var rowCallback = function (currentRow, rowNode, columns) {\n      updatedRowNodes.push(rowNode);\n      columns.forEach(function (column) {\n        return _this.updateCellValue(rowNode, column, value, currentRow, cellsToFlash, Constants.EXPORT_TYPE_CLIPBOARD, changedPath);\n      });\n    };\n\n    this.iterateActiveRanges(false, rowCallback);\n  };\n\n  ClipboardService.prototype.updateCellValue = function (rowNode, column, value, currentRow, cellsToFlash, type, changedPath) {\n    if (!rowNode || !currentRow || !column || !column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n      return;\n    }\n\n    var processedValue = this.processCell(rowNode, column, value, type, this.gridOptionsWrapper.getProcessCellFromClipboardFunc());\n    this.valueService.setValue(rowNode, column, processedValue, Constants.SOURCE_PASTE);\n    var cellId = this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);\n    cellsToFlash[cellId] = true;\n\n    if (changedPath) {\n      changedPath.addParentNode(rowNode.parent, [column]);\n    }\n  };\n\n  ClipboardService.prototype.copyToClipboard = function (includeHeaders) {\n    this.logger.log(\"copyToClipboard: includeHeaders = \" + includeHeaders); // don't override 'includeHeaders' if it has been explicitly set to 'false'\n\n    if (includeHeaders == null) {\n      includeHeaders = this.gridOptionsWrapper.isCopyHeadersToClipboard();\n    }\n\n    var focusedCell = this.focusController.getFocusedCell();\n    var selectedRowsToCopy = !this.selectionController.isEmpty() && !this.gridOptionsWrapper.isSuppressCopyRowsToClipboard(); // default is copy range if exists, otherwise rows\n\n    if (this.rangeController && this.rangeController.isMoreThanOneCell()) {\n      this.copySelectedRangeToClipboard(includeHeaders);\n    } else if (selectedRowsToCopy) {\n      // otherwise copy selected rows if they exist\n      this.copySelectedRowsToClipboard(includeHeaders);\n    } else if (this.focusController.isAnyCellFocused()) {\n      // if there is a focused cell, copy this\n      this.copyFocusedCellToClipboard(includeHeaders);\n    } else {\n      // lastly if no focused cell, try range again. this can happen\n      // if use has cellSelection turned off (so no focused cell)\n      // but has a cell clicked, so there exists a cell range\n      // of exactly one cell (hence the first 'if' above didn't\n      // get executed).\n      this.copySelectedRangeToClipboard(includeHeaders);\n    }\n\n    if (focusedCell) {\n      this.focusController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.rowPinned, true);\n    }\n  };\n\n  ClipboardService.prototype.iterateActiveRanges = function (onlyFirst, rowCallback, columnCallback) {\n    var _this = this;\n\n    if (!this.rangeController || this.rangeController.isEmpty()) {\n      return;\n    }\n\n    var cellRanges = this.rangeController.getCellRanges();\n\n    if (onlyFirst) {\n      this.iterateActiveRange(cellRanges[0], rowCallback, columnCallback, true);\n    } else {\n      cellRanges.forEach(function (range, idx) {\n        return _this.iterateActiveRange(range, rowCallback, columnCallback, idx === cellRanges.length - 1);\n      });\n    }\n  };\n\n  ClipboardService.prototype.iterateActiveRange = function (range, rowCallback, columnCallback, isLastRange) {\n    if (!this.rangeController) {\n      return;\n    }\n\n    var currentRow = this.rangeController.getRangeStartRow(range);\n    var lastRow = this.rangeController.getRangeEndRow(range);\n\n    if (columnCallback && range.columns) {\n      columnCallback(range.columns);\n    }\n\n    var rangeIndex = 0;\n    var isLastRow = false; // the currentRow could be missing if the user sets the active range manually, and sets a range\n    // that is outside of the grid (eg. sets range rows 0 to 100, but grid has only 20 rows).\n\n    while (!isLastRow && currentRow != null) {\n      var rowNode = this.rowPositionUtils.getRowNode(currentRow);\n      isLastRow = this.rowPositionUtils.sameRow(currentRow, lastRow);\n      rowCallback(currentRow, rowNode, range.columns, rangeIndex++, isLastRow && isLastRange);\n      currentRow = this.cellNavigationService.getRowBelow(currentRow);\n    }\n  };\n\n  ClipboardService.prototype.copySelectedRangeToClipboard = function (includeHeaders) {\n    var _this = this;\n\n    if (includeHeaders === void 0) {\n      includeHeaders = false;\n    }\n\n    if (!this.rangeController || this.rangeController.isEmpty()) {\n      return;\n    }\n\n    var deliminator = this.gridOptionsWrapper.getClipboardDeliminator();\n    var data = '';\n    var cellsToFlash = {}; // adds columns to the data\n\n    var columnCallback = function (columns) {\n      if (!includeHeaders) {\n        return;\n      }\n\n      var processHeaderForClipboardFunc = _this.gridOptionsWrapper.getProcessHeaderForClipboardFunc();\n\n      var columnNames = columns.map(function (column) {\n        var name = _this.columnController.getDisplayNameForColumn(column, 'clipboard', true);\n\n        return _this.processHeader(column, name, processHeaderForClipboardFunc) || '';\n      });\n      data += columnNames.join(deliminator) + '\\r\\n';\n    }; // adds cell values to the data\n\n\n    var rowCallback = function (currentRow, rowNode, columns, _2, isLastRow) {\n      var processCellForClipboardFunc = _this.gridOptionsWrapper.getProcessCellForClipboardFunc();\n\n      columns.forEach(function (column, index) {\n        var value = _this.valueService.getValue(column, rowNode);\n\n        var processedValue = _this.processCell(rowNode, column, value, Constants.EXPORT_TYPE_CLIPBOARD, processCellForClipboardFunc);\n\n        if (index != 0) {\n          data += deliminator;\n        }\n\n        if (_.exists(processedValue)) {\n          data += processedValue;\n        }\n\n        var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);\n\n        cellsToFlash[cellId] = true;\n      });\n\n      if (!isLastRow) {\n        data += '\\r\\n';\n      }\n    };\n\n    this.iterateActiveRanges(false, rowCallback, columnCallback);\n    this.copyDataToClipboard(data);\n    this.dispatchFlashCells(cellsToFlash);\n  };\n\n  ClipboardService.prototype.copyFocusedCellToClipboard = function (includeHeaders) {\n    var _a;\n\n    if (includeHeaders === void 0) {\n      includeHeaders = false;\n    }\n\n    var focusedCell = this.focusController.getFocusedCell();\n\n    if (focusedCell == null) {\n      return;\n    }\n\n    var cellId = this.cellPositionUtils.createId(focusedCell);\n    var currentRow = {\n      rowPinned: focusedCell.rowPinned,\n      rowIndex: focusedCell.rowIndex\n    };\n    var rowNode = this.rowPositionUtils.getRowNode(currentRow);\n    var column = focusedCell.column;\n    var value = this.valueService.getValue(column, rowNode);\n    var processedValue = this.processCell(rowNode, column, value, Constants.EXPORT_TYPE_CLIPBOARD, this.gridOptionsWrapper.getProcessCellForClipboardFunc());\n    processedValue = _.missing(processedValue) ? '' : processedValue.toString();\n    var data;\n\n    if (includeHeaders) {\n      var headerValue = this.columnController.getDisplayNameForColumn(column, 'clipboard', true);\n      data = this.processHeader(column, headerValue, this.gridOptionsWrapper.getProcessHeaderForClipboardFunc()) + '\\r\\n' + processedValue;\n    } else {\n      data = processedValue;\n    }\n\n    this.copyDataToClipboard(data);\n    this.dispatchFlashCells((_a = {}, _a[cellId] = true, _a));\n  };\n\n  ClipboardService.prototype.dispatchFlashCells = function (cellsToFlash) {\n    var _this = this;\n\n    window.setTimeout(function () {\n      var event = {\n        type: Events.EVENT_FLASH_CELLS,\n        cells: cellsToFlash,\n        api: _this.gridApi,\n        columnApi: _this.columnApi\n      };\n\n      _this.eventService.dispatchEvent(event);\n    }, 0);\n  };\n\n  ClipboardService.prototype.processCell = function (rowNode, column, value, type, func) {\n    if (func) {\n      var params = {\n        column: column,\n        node: rowNode,\n        value: value,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext(),\n        type: type\n      };\n      return func(params);\n    }\n\n    return value;\n  };\n\n  ClipboardService.prototype.processHeader = function (column, value, func) {\n    if (func) {\n      var params = {\n        column: column,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      };\n      return func(params);\n    }\n\n    return value;\n  };\n\n  ClipboardService.prototype.copySelectedRowsToClipboard = function (includeHeaders, columnKeys) {\n    if (includeHeaders === void 0) {\n      includeHeaders = false;\n    }\n\n    var params = {\n      columnKeys: columnKeys,\n      skipHeader: !includeHeaders,\n      skipFooters: true,\n      suppressQuotes: true,\n      columnSeparator: this.gridOptionsWrapper.getClipboardDeliminator(),\n      onlySelected: true,\n      processCellCallback: this.gridOptionsWrapper.getProcessCellForClipboardFunc(),\n      processHeaderCallback: this.gridOptionsWrapper.getProcessHeaderForClipboardFunc()\n    };\n    var data = this.csvCreator.getDataAsCsv(params);\n    this.copyDataToClipboard(data);\n  };\n\n  ClipboardService.prototype.copyDataToClipboard = function (data) {\n    var userProvidedFunc = this.gridOptionsWrapper.getSendToClipboardFunc();\n\n    if (userProvidedFunc) {\n      userProvidedFunc({\n        data: data\n      });\n    } else {\n      this.executeOnTempElement(function (element) {\n        element.value = data || ' '; // has to be non-empty value or execCommand will not do anything\n\n        element.select();\n        element.focus();\n        var result = document.execCommand('copy');\n\n        if (!result) {\n          console.warn('ag-grid: Browser did not allow document.execCommand(\\'copy\\'). Ensure ' + 'api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise ' + 'the browser will prevent it for security reasons.');\n        }\n      });\n    }\n  };\n\n  ClipboardService.prototype.executeOnTempElement = function (callbackNow, callbackAfter) {\n    var eTempInput = document.createElement('textarea');\n    eTempInput.style.width = '1px';\n    eTempInput.style.height = '1px';\n    eTempInput.style.top = '0px';\n    eTempInput.style.left = '0px';\n    eTempInput.style.position = 'absolute';\n    eTempInput.style.opacity = '0.0';\n    var guiRoot = this.gridCore.getRootGui();\n    guiRoot.appendChild(eTempInput);\n\n    try {\n      callbackNow(eTempInput);\n    } catch (err) {\n      console.warn('ag-grid: Browser does not support document.execCommand(\\'copy\\') for clipboard operations');\n    } //It needs 100 otherwise OS X seemed to not always be able to paste... Go figure...\n\n\n    if (callbackAfter) {\n      window.setTimeout(function () {\n        callbackAfter(eTempInput);\n        guiRoot.removeChild(eTempInput);\n      }, 100);\n    } else {\n      guiRoot.removeChild(eTempInput);\n    }\n  };\n\n  ClipboardService.prototype.getRangeSize = function () {\n    var ranges = this.rangeController.getCellRanges();\n    var startRangeIndex = 0;\n    var endRangeIndex = 0;\n\n    if (ranges.length > 0) {\n      startRangeIndex = this.rangeController.getRangeStartRow(ranges[0]).rowIndex;\n      endRangeIndex = this.rangeController.getRangeEndRow(ranges[0]).rowIndex;\n    }\n\n    return startRangeIndex - endRangeIndex + 1;\n  };\n\n  __decorate([Autowired('csvCreator')], ClipboardService.prototype, \"csvCreator\", void 0);\n\n  __decorate([Autowired('loggerFactory')], ClipboardService.prototype, \"loggerFactory\", void 0);\n\n  __decorate([Autowired('selectionController')], ClipboardService.prototype, \"selectionController\", void 0);\n\n  __decorate([Optional('rangeController')], ClipboardService.prototype, \"rangeController\", void 0);\n\n  __decorate([Autowired('rowModel')], ClipboardService.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('valueService')], ClipboardService.prototype, \"valueService\", void 0);\n\n  __decorate([Autowired('focusController')], ClipboardService.prototype, \"focusController\", void 0);\n\n  __decorate([Autowired('rowRenderer')], ClipboardService.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('columnController')], ClipboardService.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('cellNavigationService')], ClipboardService.prototype, \"cellNavigationService\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], ClipboardService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnApi')], ClipboardService.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], ClipboardService.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('cellPositionUtils')], ClipboardService.prototype, \"cellPositionUtils\", void 0);\n\n  __decorate([Autowired('rowPositionUtils')], ClipboardService.prototype, \"rowPositionUtils\", void 0);\n\n  __decorate([PostConstruct], ClipboardService.prototype, \"init\", null);\n\n  ClipboardService = __decorate([Bean('clipboardService')], ClipboardService);\n  return ClipboardService;\n}(BeanStub);\n\nexport { ClipboardService };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/clipboard/dist/es6/clipboard/clipboardService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","Bean","BeanStub","ChangedPath","Constants","Events","PostConstruct","Optional","ClipboardService","_super","apply","registerGridCore","gridCore","init","logger","loggerFactory","rowModel","getType","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","pasteFromClipboard","_this","log","executeOnTempElement","textArea","focus","element","data","value","missingOrEmpty","parsedData","stringToArray","gridOptionsWrapper","getClipboardDeliminator","userFunc","getProcessDataFromClipboardFunc","isSuppressLastEmptyLineOnPaste","removeLastLineIfBlank","pasteOperation","cellsToFlash","updatedRowNodes","focusedCell","changedPath","rangeActive","rangeController","isMoreThanOneCell","pasteIntoRange","hasOnlyOneValueToPaste","pasteIntoActiveRange","pasteStartingFromFocusedCell","doPasteOperation","pasteOperationFunc","api","getApi","columnApi","getColumnApi","source","eventService","dispatchEvent","type","EVENT_PASTE_START","onlyChangedColumns","isAggregateOnlyChangedColumns","getRootNode","focusController","getFocusedCell","doAggregate","rowRenderer","refreshCells","dispatchFlashCells","fireRowChanged","setFocusedCell","rowIndex","column","rowPinned","EVENT_PASTE_END","clipboardData","abortRepeatingPasteIntoRows","getRangeSize","indexOffset","dataRowIndex","rowCallback","currentRow","rowNode","columns","index","atEndOfClipboardData","currentRowData","push","processCellFromClipboardFunc","getProcessCellFromClipboardFunc","forEach","idx","isCellEditable","isSuppressPaste","newValue","processCell","EXPORT_TYPE_DRAG_COPY","valueService","setValue","SOURCE_PASTE","addParentNode","parent","cellId","cellPositionUtils","createIdFromValues","iterateActiveRanges","columnsToPasteInto","columnController","getDisplayedColumnsStartingAt","pasteSingleValue","pasteMultipleValues","EXPORT_TYPE_CLIPBOARD","copyRangeDown","isEmpty","firstRowValues","processCellForClipboardFunc","getProcessCellForClipboardFunc","getValue","firstRowValue","lastLine","last","lastLineIsBlank","removeFromArray","rowNodes","isFullRowEdit","event","EVENT_ROW_VALUE_CHANGED","node","context","getContext","clipboardGridData","clipboardRowData","rowPositionUtils","getRowNode","updateCellValue","cellNavigationService","getRowBelow","processedValue","copyToClipboard","includeHeaders","isCopyHeadersToClipboard","selectedRowsToCopy","selectionController","isSuppressCopyRowsToClipboard","copySelectedRangeToClipboard","copySelectedRowsToClipboard","isAnyCellFocused","copyFocusedCellToClipboard","onlyFirst","columnCallback","cellRanges","getCellRanges","iterateActiveRange","range","isLastRange","getRangeStartRow","lastRow","getRangeEndRow","rangeIndex","isLastRow","sameRow","deliminator","processHeaderForClipboardFunc","getProcessHeaderForClipboardFunc","columnNames","map","name","getDisplayNameForColumn","processHeader","join","_2","exists","copyDataToClipboard","_a","createId","missing","toString","headerValue","window","setTimeout","EVENT_FLASH_CELLS","cells","gridApi","func","params","columnKeys","skipHeader","skipFooters","suppressQuotes","columnSeparator","onlySelected","processCellCallback","processHeaderCallback","csvCreator","getDataAsCsv","userProvidedFunc","getSendToClipboardFunc","select","result","document","execCommand","console","warn","callbackNow","callbackAfter","eTempInput","createElement","style","width","height","top","left","position","opacity","guiRoot","getRootGui","appendChild","err","removeChild","ranges","startRangeIndex","endRangeIndex"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, ChangedPath, Constants, Events, PostConstruct, Optional } from \"@ag-grid-community/core\";\nvar ClipboardService = /** @class */ (function (_super) {\n    __extends(ClipboardService, _super);\n    function ClipboardService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ClipboardService.prototype.registerGridCore = function (gridCore) {\n        this.gridCore = gridCore;\n    };\n    ClipboardService.prototype.init = function () {\n        this.logger = this.loggerFactory.create('ClipboardService');\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel;\n        }\n    };\n    ClipboardService.prototype.pasteFromClipboard = function () {\n        var _this = this;\n        this.logger.log('pasteFromClipboard');\n        this.executeOnTempElement(function (textArea) { return textArea.focus(); }, function (element) {\n            var data = element.value;\n            if (_.missingOrEmpty(data)) {\n                return;\n            }\n            var parsedData = _.stringToArray(data, _this.gridOptionsWrapper.getClipboardDeliminator());\n            var userFunc = _this.gridOptionsWrapper.getProcessDataFromClipboardFunc();\n            if (userFunc) {\n                parsedData = userFunc({ data: parsedData });\n            }\n            if (_.missingOrEmpty(parsedData)) {\n                return;\n            }\n            if (_this.gridOptionsWrapper.isSuppressLastEmptyLineOnPaste()) {\n                _this.removeLastLineIfBlank(parsedData);\n            }\n            var pasteOperation = function (cellsToFlash, updatedRowNodes, focusedCell, changedPath) {\n                var rangeActive = _this.rangeController && _this.rangeController.isMoreThanOneCell();\n                var pasteIntoRange = rangeActive && !_this.hasOnlyOneValueToPaste(parsedData);\n                if (pasteIntoRange) {\n                    _this.pasteIntoActiveRange(parsedData, cellsToFlash, updatedRowNodes, changedPath);\n                }\n                else {\n                    _this.pasteStartingFromFocusedCell(parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n                }\n            };\n            _this.doPasteOperation(pasteOperation);\n        });\n    };\n    // common code to paste operations, e.g. paste to cell, paste to range, and copy range down\n    ClipboardService.prototype.doPasteOperation = function (pasteOperationFunc) {\n        var api = this.gridOptionsWrapper.getApi();\n        var columnApi = this.gridOptionsWrapper.getColumnApi();\n        var source = 'clipboard';\n        this.eventService.dispatchEvent({\n            type: Events.EVENT_PASTE_START,\n            api: api,\n            columnApi: columnApi,\n            source: source\n        });\n        var changedPath;\n        if (this.clientSideRowModel) {\n            var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();\n            changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n        }\n        var cellsToFlash = {};\n        var updatedRowNodes = [];\n        var focusedCell = this.focusController.getFocusedCell();\n        pasteOperationFunc(cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n        if (changedPath) {\n            this.clientSideRowModel.doAggregate(changedPath);\n        }\n        this.rowRenderer.refreshCells();\n        this.dispatchFlashCells(cellsToFlash);\n        this.fireRowChanged(updatedRowNodes);\n        if (focusedCell) {\n            this.focusController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.rowPinned, true);\n        }\n        this.eventService.dispatchEvent({\n            type: Events.EVENT_PASTE_END,\n            api: api,\n            columnApi: columnApi,\n            source: source\n        });\n    };\n    ClipboardService.prototype.pasteIntoActiveRange = function (clipboardData, cellsToFlash, updatedRowNodes, changedPath) {\n        var _this = this;\n        // true if clipboard data can be evenly pasted into range, otherwise false\n        var abortRepeatingPasteIntoRows = this.getRangeSize() % clipboardData.length != 0;\n        var indexOffset = 0, dataRowIndex = 0;\n        var rowCallback = function (currentRow, rowNode, columns, index) {\n            var atEndOfClipboardData = index - indexOffset >= clipboardData.length;\n            if (atEndOfClipboardData) {\n                if (abortRepeatingPasteIntoRows) {\n                    return;\n                }\n                // increment offset and reset data index to repeat paste of data\n                indexOffset += dataRowIndex;\n                dataRowIndex = 0;\n            }\n            var currentRowData = clipboardData[index - indexOffset];\n            // otherwise we are not the first row, so copy\n            updatedRowNodes.push(rowNode);\n            var processCellFromClipboardFunc = _this.gridOptionsWrapper.getProcessCellFromClipboardFunc();\n            columns.forEach(function (column, idx) {\n                if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n                    return;\n                }\n                // repeat data for columns we don't have data for - happens when to range is bigger than copied data range\n                if (idx >= currentRowData.length) {\n                    idx = idx % currentRowData.length;\n                }\n                var newValue = _this.processCell(rowNode, column, currentRowData[idx], Constants.EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc);\n                _this.valueService.setValue(rowNode, column, newValue, Constants.SOURCE_PASTE);\n                if (changedPath) {\n                    changedPath.addParentNode(rowNode.parent, [column]);\n                }\n                var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);\n                cellsToFlash[cellId] = true;\n            });\n            dataRowIndex++;\n        };\n        this.iterateActiveRanges(false, rowCallback);\n    };\n    ClipboardService.prototype.pasteStartingFromFocusedCell = function (parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath) {\n        if (!focusedCell) {\n            return;\n        }\n        var currentRow = { rowIndex: focusedCell.rowIndex, rowPinned: focusedCell.rowPinned };\n        var columnsToPasteInto = this.columnController.getDisplayedColumnsStartingAt(focusedCell.column);\n        if (this.hasOnlyOneValueToPaste(parsedData)) {\n            this.pasteSingleValue(parsedData, updatedRowNodes, cellsToFlash, changedPath);\n        }\n        else {\n            this.pasteMultipleValues(parsedData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, Constants.EXPORT_TYPE_CLIPBOARD, changedPath);\n        }\n    };\n    ClipboardService.prototype.hasOnlyOneValueToPaste = function (parsedData) {\n        return parsedData.length === 1 && parsedData[0].length === 1;\n    };\n    ClipboardService.prototype.copyRangeDown = function () {\n        var _this = this;\n        if (!this.rangeController || this.rangeController.isEmpty()) {\n            return;\n        }\n        var firstRowValues = [];\n        var pasteOperation = function (cellsToFlash, updatedRowNodes, focusedCell, changedPath) {\n            var processCellForClipboardFunc = _this.gridOptionsWrapper.getProcessCellForClipboardFunc();\n            var processCellFromClipboardFunc = _this.gridOptionsWrapper.getProcessCellFromClipboardFunc();\n            var rowCallback = function (currentRow, rowNode, columns) {\n                // take reference of first row, this is the one we will be using to copy from\n                if (!firstRowValues.length) {\n                    // two reasons for looping through columns\n                    columns.forEach(function (column) {\n                        // get the initial values to copy down\n                        var value = _this.processCell(rowNode, column, _this.valueService.getValue(column, rowNode), Constants.EXPORT_TYPE_DRAG_COPY, processCellForClipboardFunc);\n                        firstRowValues.push(value);\n                    });\n                }\n                else {\n                    // otherwise we are not the first row, so copy\n                    updatedRowNodes.push(rowNode);\n                    columns.forEach(function (column, index) {\n                        if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n                            return;\n                        }\n                        var firstRowValue = _this.processCell(rowNode, column, firstRowValues[index], Constants.EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc);\n                        _this.valueService.setValue(rowNode, column, firstRowValue, Constants.SOURCE_PASTE);\n                        if (changedPath) {\n                            changedPath.addParentNode(rowNode.parent, [column]);\n                        }\n                        var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);\n                        cellsToFlash[cellId] = true;\n                    });\n                }\n            };\n            _this.iterateActiveRanges(true, rowCallback);\n        };\n        this.doPasteOperation(pasteOperation);\n    };\n    ClipboardService.prototype.removeLastLineIfBlank = function (parsedData) {\n        // remove last row if empty, excel puts empty last row in\n        var lastLine = _.last(parsedData);\n        var lastLineIsBlank = lastLine && lastLine.length === 1 && lastLine[0] === '';\n        if (lastLineIsBlank) {\n            _.removeFromArray(parsedData, lastLine);\n        }\n    };\n    ClipboardService.prototype.fireRowChanged = function (rowNodes) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isFullRowEdit()) {\n            return;\n        }\n        rowNodes.forEach(function (rowNode) {\n            var event = {\n                type: Events.EVENT_ROW_VALUE_CHANGED,\n                node: rowNode,\n                data: rowNode.data,\n                rowIndex: rowNode.rowIndex,\n                rowPinned: rowNode.rowPinned,\n                context: _this.gridOptionsWrapper.getContext(),\n                api: _this.gridOptionsWrapper.getApi(),\n                columnApi: _this.gridOptionsWrapper.getColumnApi()\n            };\n            _this.eventService.dispatchEvent(event);\n        });\n    };\n    ClipboardService.prototype.pasteMultipleValues = function (clipboardGridData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, type, changedPath) {\n        var _this = this;\n        clipboardGridData.forEach(function (clipboardRowData) {\n            // if we have come to end of rows in grid, then skip\n            if (!currentRow) {\n                return;\n            }\n            var rowNode = _this.rowPositionUtils.getRowNode(currentRow);\n            if (rowNode) {\n                updatedRowNodes.push(rowNode);\n                clipboardRowData.forEach(function (value, index) {\n                    return _this.updateCellValue(rowNode, columnsToPasteInto[index], value, currentRow, cellsToFlash, type, changedPath);\n                });\n                // move to next row down for next set of values\n                currentRow = _this.cellNavigationService.getRowBelow({ rowPinned: currentRow.rowPinned, rowIndex: currentRow.rowIndex });\n            }\n        });\n        return currentRow;\n    };\n    ClipboardService.prototype.pasteSingleValue = function (parsedData, updatedRowNodes, cellsToFlash, changedPath) {\n        var _this = this;\n        var value = parsedData[0][0];\n        var rowCallback = function (currentRow, rowNode, columns) {\n            updatedRowNodes.push(rowNode);\n            columns.forEach(function (column) {\n                return _this.updateCellValue(rowNode, column, value, currentRow, cellsToFlash, Constants.EXPORT_TYPE_CLIPBOARD, changedPath);\n            });\n        };\n        this.iterateActiveRanges(false, rowCallback);\n    };\n    ClipboardService.prototype.updateCellValue = function (rowNode, column, value, currentRow, cellsToFlash, type, changedPath) {\n        if (!rowNode ||\n            !currentRow ||\n            !column ||\n            !column.isCellEditable(rowNode) ||\n            column.isSuppressPaste(rowNode)) {\n            return;\n        }\n        var processedValue = this.processCell(rowNode, column, value, type, this.gridOptionsWrapper.getProcessCellFromClipboardFunc());\n        this.valueService.setValue(rowNode, column, processedValue, Constants.SOURCE_PASTE);\n        var cellId = this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);\n        cellsToFlash[cellId] = true;\n        if (changedPath) {\n            changedPath.addParentNode(rowNode.parent, [column]);\n        }\n    };\n    ClipboardService.prototype.copyToClipboard = function (includeHeaders) {\n        this.logger.log(\"copyToClipboard: includeHeaders = \" + includeHeaders);\n        // don't override 'includeHeaders' if it has been explicitly set to 'false'\n        if (includeHeaders == null) {\n            includeHeaders = this.gridOptionsWrapper.isCopyHeadersToClipboard();\n        }\n        var focusedCell = this.focusController.getFocusedCell();\n        var selectedRowsToCopy = !this.selectionController.isEmpty()\n            && !this.gridOptionsWrapper.isSuppressCopyRowsToClipboard();\n        // default is copy range if exists, otherwise rows\n        if (this.rangeController && this.rangeController.isMoreThanOneCell()) {\n            this.copySelectedRangeToClipboard(includeHeaders);\n        }\n        else if (selectedRowsToCopy) {\n            // otherwise copy selected rows if they exist\n            this.copySelectedRowsToClipboard(includeHeaders);\n        }\n        else if (this.focusController.isAnyCellFocused()) {\n            // if there is a focused cell, copy this\n            this.copyFocusedCellToClipboard(includeHeaders);\n        }\n        else {\n            // lastly if no focused cell, try range again. this can happen\n            // if use has cellSelection turned off (so no focused cell)\n            // but has a cell clicked, so there exists a cell range\n            // of exactly one cell (hence the first 'if' above didn't\n            // get executed).\n            this.copySelectedRangeToClipboard(includeHeaders);\n        }\n        if (focusedCell) {\n            this.focusController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.rowPinned, true);\n        }\n    };\n    ClipboardService.prototype.iterateActiveRanges = function (onlyFirst, rowCallback, columnCallback) {\n        var _this = this;\n        if (!this.rangeController || this.rangeController.isEmpty()) {\n            return;\n        }\n        var cellRanges = this.rangeController.getCellRanges();\n        if (onlyFirst) {\n            this.iterateActiveRange(cellRanges[0], rowCallback, columnCallback, true);\n        }\n        else {\n            cellRanges.forEach(function (range, idx) { return _this.iterateActiveRange(range, rowCallback, columnCallback, idx === cellRanges.length - 1); });\n        }\n    };\n    ClipboardService.prototype.iterateActiveRange = function (range, rowCallback, columnCallback, isLastRange) {\n        if (!this.rangeController) {\n            return;\n        }\n        var currentRow = this.rangeController.getRangeStartRow(range);\n        var lastRow = this.rangeController.getRangeEndRow(range);\n        if (columnCallback && range.columns) {\n            columnCallback(range.columns);\n        }\n        var rangeIndex = 0;\n        var isLastRow = false;\n        // the currentRow could be missing if the user sets the active range manually, and sets a range\n        // that is outside of the grid (eg. sets range rows 0 to 100, but grid has only 20 rows).\n        while (!isLastRow && currentRow != null) {\n            var rowNode = this.rowPositionUtils.getRowNode(currentRow);\n            isLastRow = this.rowPositionUtils.sameRow(currentRow, lastRow);\n            rowCallback(currentRow, rowNode, range.columns, rangeIndex++, isLastRow && isLastRange);\n            currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n    };\n    ClipboardService.prototype.copySelectedRangeToClipboard = function (includeHeaders) {\n        var _this = this;\n        if (includeHeaders === void 0) { includeHeaders = false; }\n        if (!this.rangeController || this.rangeController.isEmpty()) {\n            return;\n        }\n        var deliminator = this.gridOptionsWrapper.getClipboardDeliminator();\n        var data = '';\n        var cellsToFlash = {};\n        // adds columns to the data\n        var columnCallback = function (columns) {\n            if (!includeHeaders) {\n                return;\n            }\n            var processHeaderForClipboardFunc = _this.gridOptionsWrapper.getProcessHeaderForClipboardFunc();\n            var columnNames = columns.map(function (column) {\n                var name = _this.columnController.getDisplayNameForColumn(column, 'clipboard', true);\n                return _this.processHeader(column, name, processHeaderForClipboardFunc) || '';\n            });\n            data += columnNames.join(deliminator) + '\\r\\n';\n        };\n        // adds cell values to the data\n        var rowCallback = function (currentRow, rowNode, columns, _2, isLastRow) {\n            var processCellForClipboardFunc = _this.gridOptionsWrapper.getProcessCellForClipboardFunc();\n            columns.forEach(function (column, index) {\n                var value = _this.valueService.getValue(column, rowNode);\n                var processedValue = _this.processCell(rowNode, column, value, Constants.EXPORT_TYPE_CLIPBOARD, processCellForClipboardFunc);\n                if (index != 0) {\n                    data += deliminator;\n                }\n                if (_.exists(processedValue)) {\n                    data += processedValue;\n                }\n                var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);\n                cellsToFlash[cellId] = true;\n            });\n            if (!isLastRow) {\n                data += '\\r\\n';\n            }\n        };\n        this.iterateActiveRanges(false, rowCallback, columnCallback);\n        this.copyDataToClipboard(data);\n        this.dispatchFlashCells(cellsToFlash);\n    };\n    ClipboardService.prototype.copyFocusedCellToClipboard = function (includeHeaders) {\n        var _a;\n        if (includeHeaders === void 0) { includeHeaders = false; }\n        var focusedCell = this.focusController.getFocusedCell();\n        if (focusedCell == null) {\n            return;\n        }\n        var cellId = this.cellPositionUtils.createId(focusedCell);\n        var currentRow = { rowPinned: focusedCell.rowPinned, rowIndex: focusedCell.rowIndex };\n        var rowNode = this.rowPositionUtils.getRowNode(currentRow);\n        var column = focusedCell.column;\n        var value = this.valueService.getValue(column, rowNode);\n        var processedValue = this.processCell(rowNode, column, value, Constants.EXPORT_TYPE_CLIPBOARD, this.gridOptionsWrapper.getProcessCellForClipboardFunc());\n        processedValue = _.missing(processedValue) ? '' : processedValue.toString();\n        var data;\n        if (includeHeaders) {\n            var headerValue = this.columnController.getDisplayNameForColumn(column, 'clipboard', true);\n            data = this.processHeader(column, headerValue, this.gridOptionsWrapper.getProcessHeaderForClipboardFunc()) + '\\r\\n' + processedValue;\n        }\n        else {\n            data = processedValue;\n        }\n        this.copyDataToClipboard(data);\n        this.dispatchFlashCells((_a = {}, _a[cellId] = true, _a));\n    };\n    ClipboardService.prototype.dispatchFlashCells = function (cellsToFlash) {\n        var _this = this;\n        window.setTimeout(function () {\n            var event = {\n                type: Events.EVENT_FLASH_CELLS,\n                cells: cellsToFlash,\n                api: _this.gridApi,\n                columnApi: _this.columnApi\n            };\n            _this.eventService.dispatchEvent(event);\n        }, 0);\n    };\n    ClipboardService.prototype.processCell = function (rowNode, column, value, type, func) {\n        if (func) {\n            var params = {\n                column: column,\n                node: rowNode,\n                value: value,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                type: type,\n            };\n            return func(params);\n        }\n        return value;\n    };\n    ClipboardService.prototype.processHeader = function (column, value, func) {\n        if (func) {\n            var params = {\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            };\n            return func(params);\n        }\n        return value;\n    };\n    ClipboardService.prototype.copySelectedRowsToClipboard = function (includeHeaders, columnKeys) {\n        if (includeHeaders === void 0) { includeHeaders = false; }\n        var params = {\n            columnKeys: columnKeys,\n            skipHeader: !includeHeaders,\n            skipFooters: true,\n            suppressQuotes: true,\n            columnSeparator: this.gridOptionsWrapper.getClipboardDeliminator(),\n            onlySelected: true,\n            processCellCallback: this.gridOptionsWrapper.getProcessCellForClipboardFunc(),\n            processHeaderCallback: this.gridOptionsWrapper.getProcessHeaderForClipboardFunc()\n        };\n        var data = this.csvCreator.getDataAsCsv(params);\n        this.copyDataToClipboard(data);\n    };\n    ClipboardService.prototype.copyDataToClipboard = function (data) {\n        var userProvidedFunc = this.gridOptionsWrapper.getSendToClipboardFunc();\n        if (userProvidedFunc) {\n            userProvidedFunc({ data: data });\n        }\n        else {\n            this.executeOnTempElement(function (element) {\n                element.value = data || ' '; // has to be non-empty value or execCommand will not do anything\n                element.select();\n                element.focus();\n                var result = document.execCommand('copy');\n                if (!result) {\n                    console.warn('ag-grid: Browser did not allow document.execCommand(\\'copy\\'). Ensure ' +\n                        'api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise ' +\n                        'the browser will prevent it for security reasons.');\n                }\n            });\n        }\n    };\n    ClipboardService.prototype.executeOnTempElement = function (callbackNow, callbackAfter) {\n        var eTempInput = document.createElement('textarea');\n        eTempInput.style.width = '1px';\n        eTempInput.style.height = '1px';\n        eTempInput.style.top = '0px';\n        eTempInput.style.left = '0px';\n        eTempInput.style.position = 'absolute';\n        eTempInput.style.opacity = '0.0';\n        var guiRoot = this.gridCore.getRootGui();\n        guiRoot.appendChild(eTempInput);\n        try {\n            callbackNow(eTempInput);\n        }\n        catch (err) {\n            console.warn('ag-grid: Browser does not support document.execCommand(\\'copy\\') for clipboard operations');\n        }\n        //It needs 100 otherwise OS X seemed to not always be able to paste... Go figure...\n        if (callbackAfter) {\n            window.setTimeout(function () {\n                callbackAfter(eTempInput);\n                guiRoot.removeChild(eTempInput);\n            }, 100);\n        }\n        else {\n            guiRoot.removeChild(eTempInput);\n        }\n    };\n    ClipboardService.prototype.getRangeSize = function () {\n        var ranges = this.rangeController.getCellRanges();\n        var startRangeIndex = 0;\n        var endRangeIndex = 0;\n        if (ranges.length > 0) {\n            startRangeIndex = this.rangeController.getRangeStartRow(ranges[0]).rowIndex;\n            endRangeIndex = this.rangeController.getRangeEndRow(ranges[0]).rowIndex;\n        }\n        return startRangeIndex - endRangeIndex + 1;\n    };\n    __decorate([\n        Autowired('csvCreator')\n    ], ClipboardService.prototype, \"csvCreator\", void 0);\n    __decorate([\n        Autowired('loggerFactory')\n    ], ClipboardService.prototype, \"loggerFactory\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], ClipboardService.prototype, \"selectionController\", void 0);\n    __decorate([\n        Optional('rangeController')\n    ], ClipboardService.prototype, \"rangeController\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], ClipboardService.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], ClipboardService.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('focusController')\n    ], ClipboardService.prototype, \"focusController\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], ClipboardService.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], ClipboardService.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('cellNavigationService')\n    ], ClipboardService.prototype, \"cellNavigationService\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ClipboardService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ClipboardService.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ClipboardService.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('cellPositionUtils')\n    ], ClipboardService.prototype, \"cellPositionUtils\", void 0);\n    __decorate([\n        Autowired('rowPositionUtils')\n    ], ClipboardService.prototype, \"rowPositionUtils\", void 0);\n    __decorate([\n        PostConstruct\n    ], ClipboardService.prototype, \"init\", null);\n    ClipboardService = __decorate([\n        Bean('clipboardService')\n    ], ClipboardService);\n    return ClipboardService;\n}(BeanStub));\nexport { ClipboardService };\n"]},"metadata":{},"sourceType":"module"}