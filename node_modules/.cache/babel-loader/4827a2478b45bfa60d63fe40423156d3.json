{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Constants } from \"./constants\";\nimport { _ } from \"./utils\";\n\nvar CellNavigationService =\n/** @class */\nfunction (_super) {\n  __extends(CellNavigationService, _super);\n\n  function CellNavigationService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // returns null if no cell to focus on, ie at the end of the grid\n\n\n  CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {\n    // starting with the provided cell, we keep moving until we find a cell we can\n    // focus on.\n    var pointer = lastCellToFocus;\n    var finished = false; // finished will be true when either:\n    // a) cell found that we can focus on\n    // b) run out of cells (ie the method returns null)\n\n    while (!finished) {\n      switch (key) {\n        case Constants.KEY_UP:\n          pointer = this.getCellAbove(pointer);\n          break;\n\n        case Constants.KEY_DOWN:\n          pointer = this.getCellBelow(pointer);\n          break;\n\n        case Constants.KEY_RIGHT:\n          if (this.gridOptionsWrapper.isEnableRtl()) {\n            pointer = this.getCellToLeft(pointer);\n          } else {\n            pointer = this.getCellToRight(pointer);\n          }\n\n          break;\n\n        case Constants.KEY_LEFT:\n          if (this.gridOptionsWrapper.isEnableRtl()) {\n            pointer = this.getCellToRight(pointer);\n          } else {\n            pointer = this.getCellToLeft(pointer);\n          }\n\n          break;\n\n        default:\n          pointer = null;\n          console.warn('ag-Grid: unknown key for navigation ' + key);\n          break;\n      }\n\n      if (pointer) {\n        finished = this.isCellGoodToFocusOn(pointer);\n      } else {\n        finished = true;\n      }\n    }\n\n    return pointer;\n  };\n\n  CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {\n    var column = gridCell.column;\n    var rowNode;\n\n    switch (gridCell.rowPinned) {\n      case Constants.PINNED_TOP:\n        rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n        break;\n\n      case Constants.PINNED_BOTTOM:\n        rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n        break;\n\n      default:\n        rowNode = this.rowModel.getRow(gridCell.rowIndex);\n        break;\n    }\n\n    var suppressNavigable = column.isSuppressNavigable(rowNode);\n    return !suppressNavigable;\n  };\n\n  CellNavigationService.prototype.getCellToLeft = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);\n\n    if (!colToLeft) {\n      return null;\n    }\n\n    return {\n      rowIndex: lastCell.rowIndex,\n      column: colToLeft,\n      rowPinned: lastCell.rowPinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellToRight = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var colToRight = this.columnController.getDisplayedColAfter(lastCell.column); // if already on right, do nothing\n\n    if (!colToRight) {\n      return null;\n    }\n\n    return {\n      rowIndex: lastCell.rowIndex,\n      column: colToRight,\n      rowPinned: lastCell.rowPinned\n    };\n  };\n\n  CellNavigationService.prototype.getRowBelow = function (rowPosition) {\n    // if already on top row, do nothing\n    var index = rowPosition.rowIndex;\n    var pinned = rowPosition.rowPinned;\n\n    if (this.isLastRowInContainer(rowPosition)) {\n      switch (pinned) {\n        case Constants.PINNED_BOTTOM:\n          // never any rows after pinned bottom\n          return null;\n\n        case Constants.PINNED_TOP:\n          // if on last row of pinned top, then next row is main body (if rows exist),\n          // otherwise it's the pinned bottom\n          if (this.rowModel.isRowsToRender()) {\n            return {\n              rowIndex: 0,\n              rowPinned: null\n            };\n          } else if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n            return {\n              rowIndex: 0,\n              rowPinned: Constants.PINNED_BOTTOM\n            };\n          }\n\n          return null;\n\n        default:\n          // if in the main body, then try pinned bottom, otherwise return nothing\n          if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n            return {\n              rowIndex: 0,\n              rowPinned: Constants.PINNED_BOTTOM\n            };\n          }\n\n          return null;\n      }\n    }\n\n    return {\n      rowIndex: index + 1,\n      rowPinned: pinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellBelow = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var rowBelow = this.getRowBelow(lastCell);\n\n    if (rowBelow) {\n      return {\n        rowIndex: rowBelow.rowIndex,\n        column: lastCell.column,\n        rowPinned: rowBelow.rowPinned\n      };\n    }\n\n    return null;\n  };\n\n  CellNavigationService.prototype.isLastRowInContainer = function (rowPosition) {\n    var pinned = rowPosition.rowPinned;\n    var index = rowPosition.rowIndex;\n\n    if (pinned === Constants.PINNED_TOP) {\n      var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n      return lastTopIndex <= index;\n    } else if (pinned === Constants.PINNED_BOTTOM) {\n      var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n      return lastBottomIndex <= index;\n    }\n\n    var lastBodyIndex = this.rowModel.getRowCount() - 1;\n    return lastBodyIndex <= index;\n  };\n\n  CellNavigationService.prototype.getRowAbove = function (rowPosition) {\n    // if already on top row, do nothing\n    var index = rowPosition.rowIndex;\n    var pinned = rowPosition.rowPinned; // if already on top row, do nothing\n\n    if (index === 0) {\n      if (pinned === Constants.PINNED_TOP) {\n        return null;\n      } else if (!pinned) {\n        if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n          return this.getLastFloatingTopRow();\n        }\n\n        return null;\n      } else {\n        // last floating bottom\n        if (this.rowModel.isRowsToRender()) {\n          return this.getLastBodyCell();\n        } else if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n          return this.getLastFloatingTopRow();\n        }\n\n        return null;\n      }\n    }\n\n    return {\n      rowIndex: index - 1,\n      rowPinned: pinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellAbove = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var rowAbove = this.getRowAbove({\n      rowIndex: lastCell.rowIndex,\n      rowPinned: lastCell.rowPinned\n    });\n\n    if (rowAbove) {\n      return {\n        rowIndex: rowAbove.rowIndex,\n        column: lastCell.column,\n        rowPinned: rowAbove.rowPinned\n      };\n    }\n\n    return null;\n  };\n\n  CellNavigationService.prototype.getLastBodyCell = function () {\n    var lastBodyRow = this.rowModel.getRowCount() - 1;\n    return {\n      rowIndex: lastBodyRow,\n      rowPinned: null\n    };\n  };\n\n  CellNavigationService.prototype.getLastFloatingTopRow = function () {\n    var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n    return {\n      rowIndex: lastFloatingRow,\n      rowPinned: Constants.PINNED_TOP\n    };\n  };\n\n  CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {\n    if (backwards) {\n      return this.getNextTabbedCellBackwards(gridCell);\n    }\n\n    return this.getNextTabbedCellForwards(gridCell);\n  };\n\n  CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {\n    var displayedColumns = this.columnController.getAllDisplayedColumns();\n    var newRowIndex = gridCell.rowIndex;\n    var newFloating = gridCell.rowPinned; // move along to the next cell\n\n    var newColumn = this.columnController.getDisplayedColAfter(gridCell.column); // check if end of the row, and if so, go forward a row\n\n    if (!newColumn) {\n      newColumn = displayedColumns[0];\n      var rowBelow = this.getRowBelow(gridCell);\n\n      if (_.missing(rowBelow)) {\n        return null;\n      }\n\n      newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n      newFloating = rowBelow ? rowBelow.rowPinned : null;\n    }\n\n    return {\n      rowIndex: newRowIndex,\n      column: newColumn,\n      rowPinned: newFloating\n    };\n  };\n\n  CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {\n    var displayedColumns = this.columnController.getAllDisplayedColumns();\n    var newRowIndex = gridCell.rowIndex;\n    var newFloating = gridCell.rowPinned; // move along to the next cell\n\n    var newColumn = this.columnController.getDisplayedColBefore(gridCell.column); // check if end of the row, and if so, go forward a row\n\n    if (!newColumn) {\n      newColumn = _.last(displayedColumns);\n      var rowAbove = this.getRowAbove({\n        rowIndex: gridCell.rowIndex,\n        rowPinned: gridCell.rowPinned\n      });\n\n      if (_.missing(rowAbove)) {\n        return null;\n      }\n\n      newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n      newFloating = rowAbove ? rowAbove.rowPinned : null;\n    }\n\n    return {\n      rowIndex: newRowIndex,\n      column: newColumn,\n      rowPinned: newFloating\n    };\n  };\n\n  __decorate([Autowired('columnController')], CellNavigationService.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('rowModel')], CellNavigationService.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('pinnedRowModel')], CellNavigationService.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], CellNavigationService.prototype, \"gridOptionsWrapper\", void 0);\n\n  CellNavigationService = __decorate([Bean('cellNavigationService')], CellNavigationService);\n  return CellNavigationService;\n}(BeanStub);\n\nexport { CellNavigationService };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/cellNavigationService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","BeanStub","Constants","_","CellNavigationService","_super","apply","getNextCellToFocus","lastCellToFocus","pointer","finished","KEY_UP","getCellAbove","KEY_DOWN","getCellBelow","KEY_RIGHT","gridOptionsWrapper","isEnableRtl","getCellToLeft","getCellToRight","KEY_LEFT","console","warn","isCellGoodToFocusOn","gridCell","column","rowNode","rowPinned","PINNED_TOP","pinnedRowModel","getPinnedTopRow","rowIndex","PINNED_BOTTOM","getPinnedBottomRow","rowModel","getRow","suppressNavigable","isSuppressNavigable","lastCell","colToLeft","columnController","getDisplayedColBefore","colToRight","getDisplayedColAfter","getRowBelow","rowPosition","index","pinned","isLastRowInContainer","isRowsToRender","rowBelow","lastTopIndex","getPinnedTopRowData","lastBottomIndex","getPinnedBottomRowData","lastBodyIndex","getRowCount","getRowAbove","getLastFloatingTopRow","getLastBodyCell","rowAbove","lastBodyRow","lastFloatingRow","getNextTabbedCell","backwards","getNextTabbedCellBackwards","getNextTabbedCellForwards","displayedColumns","getAllDisplayedColumns","newRowIndex","newFloating","newColumn","missing","last"],"mappings":"AAAA;;;;;;AAMA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGd,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HhB,CAA3H;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACoB,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACc,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BpB,CAAC,CAACc,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAclB,MAAM,CAACuB,cAAP,CAAsBX,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASM,SAAT,EAAoBC,IAApB,QAAgC,mBAAhC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,CAAT,QAAkB,SAAlB;;AACA,IAAIC,qBAAqB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACzDlC,EAAAA,SAAS,CAACiC,qBAAD,EAAwBC,MAAxB,CAAT;;AACA,WAASD,qBAAT,GAAiC;AAC7B,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBf,SAAnB,CAAnB,IAAoD,IAA3D;AACH,GAJwD,CAKzD;;;AACAa,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgCwB,kBAAhC,GAAqD,UAAUnB,GAAV,EAAeoB,eAAf,EAAgC;AACjF;AACA;AACA,QAAIC,OAAO,GAAGD,eAAd;AACA,QAAIE,QAAQ,GAAG,KAAf,CAJiF,CAKjF;AACA;AACA;;AACA,WAAO,CAACA,QAAR,EAAkB;AACd,cAAQtB,GAAR;AACI,aAAKc,SAAS,CAACS,MAAf;AACIF,UAAAA,OAAO,GAAG,KAAKG,YAAL,CAAkBH,OAAlB,CAAV;AACA;;AACJ,aAAKP,SAAS,CAACW,QAAf;AACIJ,UAAAA,OAAO,GAAG,KAAKK,YAAL,CAAkBL,OAAlB,CAAV;AACA;;AACJ,aAAKP,SAAS,CAACa,SAAf;AACI,cAAI,KAAKC,kBAAL,CAAwBC,WAAxB,EAAJ,EAA2C;AACvCR,YAAAA,OAAO,GAAG,KAAKS,aAAL,CAAmBT,OAAnB,CAAV;AACH,WAFD,MAGK;AACDA,YAAAA,OAAO,GAAG,KAAKU,cAAL,CAAoBV,OAApB,CAAV;AACH;;AACD;;AACJ,aAAKP,SAAS,CAACkB,QAAf;AACI,cAAI,KAAKJ,kBAAL,CAAwBC,WAAxB,EAAJ,EAA2C;AACvCR,YAAAA,OAAO,GAAG,KAAKU,cAAL,CAAoBV,OAApB,CAAV;AACH,WAFD,MAGK;AACDA,YAAAA,OAAO,GAAG,KAAKS,aAAL,CAAmBT,OAAnB,CAAV;AACH;;AACD;;AACJ;AACIA,UAAAA,OAAO,GAAG,IAAV;AACAY,UAAAA,OAAO,CAACC,IAAR,CAAa,yCAAyClC,GAAtD;AACA;AA1BR;;AA4BA,UAAIqB,OAAJ,EAAa;AACTC,QAAAA,QAAQ,GAAG,KAAKa,mBAAL,CAAyBd,OAAzB,CAAX;AACH,OAFD,MAGK;AACDC,QAAAA,QAAQ,GAAG,IAAX;AACH;AACJ;;AACD,WAAOD,OAAP;AACH,GA7CD;;AA8CAL,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgCwC,mBAAhC,GAAsD,UAAUC,QAAV,EAAoB;AACtE,QAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;AACA,QAAIC,OAAJ;;AACA,YAAQF,QAAQ,CAACG,SAAjB;AACI,WAAKzB,SAAS,CAAC0B,UAAf;AACIF,QAAAA,OAAO,GAAG,KAAKG,cAAL,CAAoBC,eAApB,CAAoCN,QAAQ,CAACO,QAA7C,CAAV;AACA;;AACJ,WAAK7B,SAAS,CAAC8B,aAAf;AACIN,QAAAA,OAAO,GAAG,KAAKG,cAAL,CAAoBI,kBAApB,CAAuCT,QAAQ,CAACO,QAAhD,CAAV;AACA;;AACJ;AACIL,QAAAA,OAAO,GAAG,KAAKQ,QAAL,CAAcC,MAAd,CAAqBX,QAAQ,CAACO,QAA9B,CAAV;AACA;AATR;;AAWA,QAAIK,iBAAiB,GAAGX,MAAM,CAACY,mBAAP,CAA2BX,OAA3B,CAAxB;AACA,WAAO,CAACU,iBAAR;AACH,GAhBD;;AAiBAhC,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgCmC,aAAhC,GAAgD,UAAUoB,QAAV,EAAoB;AAChE,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,IAAP;AACH;;AACD,QAAIC,SAAS,GAAG,KAAKC,gBAAL,CAAsBC,qBAAtB,CAA4CH,QAAQ,CAACb,MAArD,CAAhB;;AACA,QAAI,CAACc,SAAL,EAAgB;AACZ,aAAO,IAAP;AACH;;AACD,WAAO;AACHR,MAAAA,QAAQ,EAAEO,QAAQ,CAACP,QADhB;AAEHN,MAAAA,MAAM,EAAEc,SAFL;AAGHZ,MAAAA,SAAS,EAAEW,QAAQ,CAACX;AAHjB,KAAP;AAKH,GAbD;;AAcAvB,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgCoC,cAAhC,GAAiD,UAAUmB,QAAV,EAAoB;AACjE,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,IAAP;AACH;;AACD,QAAII,UAAU,GAAG,KAAKF,gBAAL,CAAsBG,oBAAtB,CAA2CL,QAAQ,CAACb,MAApD,CAAjB,CAJiE,CAKjE;;AACA,QAAI,CAACiB,UAAL,EAAiB;AACb,aAAO,IAAP;AACH;;AACD,WAAO;AACHX,MAAAA,QAAQ,EAAEO,QAAQ,CAACP,QADhB;AAEHN,MAAAA,MAAM,EAAEiB,UAFL;AAGHf,MAAAA,SAAS,EAAEW,QAAQ,CAACX;AAHjB,KAAP;AAKH,GAdD;;AAeAvB,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgC6D,WAAhC,GAA8C,UAAUC,WAAV,EAAuB;AACjE;AACA,QAAIC,KAAK,GAAGD,WAAW,CAACd,QAAxB;AACA,QAAIgB,MAAM,GAAGF,WAAW,CAAClB,SAAzB;;AACA,QAAI,KAAKqB,oBAAL,CAA0BH,WAA1B,CAAJ,EAA4C;AACxC,cAAQE,MAAR;AACI,aAAK7C,SAAS,CAAC8B,aAAf;AACI;AACA,iBAAO,IAAP;;AACJ,aAAK9B,SAAS,CAAC0B,UAAf;AACI;AACA;AACA,cAAI,KAAKM,QAAL,CAAce,cAAd,EAAJ,EAAoC;AAChC,mBAAO;AAAElB,cAAAA,QAAQ,EAAE,CAAZ;AAAeJ,cAAAA,SAAS,EAAE;AAA1B,aAAP;AACH,WAFD,MAGK,IAAI,KAAKE,cAAL,CAAoBoB,cAApB,CAAmC/C,SAAS,CAAC8B,aAA7C,CAAJ,EAAiE;AAClE,mBAAO;AAAED,cAAAA,QAAQ,EAAE,CAAZ;AAAeJ,cAAAA,SAAS,EAAEzB,SAAS,CAAC8B;AAApC,aAAP;AACH;;AACD,iBAAO,IAAP;;AACJ;AACI;AACA,cAAI,KAAKH,cAAL,CAAoBoB,cAApB,CAAmC/C,SAAS,CAAC8B,aAA7C,CAAJ,EAAiE;AAC7D,mBAAO;AAAED,cAAAA,QAAQ,EAAE,CAAZ;AAAeJ,cAAAA,SAAS,EAAEzB,SAAS,CAAC8B;AAApC,aAAP;AACH;;AACD,iBAAO,IAAP;AAnBR;AAqBH;;AACD,WAAO;AAAED,MAAAA,QAAQ,EAAEe,KAAK,GAAG,CAApB;AAAuBnB,MAAAA,SAAS,EAAEoB;AAAlC,KAAP;AACH,GA5BD;;AA6BA3C,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgC+B,YAAhC,GAA+C,UAAUwB,QAAV,EAAoB;AAC/D,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,IAAP;AACH;;AACD,QAAIY,QAAQ,GAAG,KAAKN,WAAL,CAAiBN,QAAjB,CAAf;;AACA,QAAIY,QAAJ,EAAc;AACV,aAAO;AACHnB,QAAAA,QAAQ,EAAEmB,QAAQ,CAACnB,QADhB;AAEHN,QAAAA,MAAM,EAAEa,QAAQ,CAACb,MAFd;AAGHE,QAAAA,SAAS,EAAEuB,QAAQ,CAACvB;AAHjB,OAAP;AAKH;;AACD,WAAO,IAAP;AACH,GAbD;;AAcAvB,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgCiE,oBAAhC,GAAuD,UAAUH,WAAV,EAAuB;AAC1E,QAAIE,MAAM,GAAGF,WAAW,CAAClB,SAAzB;AACA,QAAImB,KAAK,GAAGD,WAAW,CAACd,QAAxB;;AACA,QAAIgB,MAAM,KAAK7C,SAAS,CAAC0B,UAAzB,EAAqC;AACjC,UAAIuB,YAAY,GAAG,KAAKtB,cAAL,CAAoBuB,mBAApB,GAA0C5D,MAA1C,GAAmD,CAAtE;AACA,aAAO2D,YAAY,IAAIL,KAAvB;AACH,KAHD,MAIK,IAAIC,MAAM,KAAK7C,SAAS,CAAC8B,aAAzB,EAAwC;AACzC,UAAIqB,eAAe,GAAG,KAAKxB,cAAL,CAAoByB,sBAApB,GAA6C9D,MAA7C,GAAsD,CAA5E;AACA,aAAO6D,eAAe,IAAIP,KAA1B;AACH;;AACD,QAAIS,aAAa,GAAG,KAAKrB,QAAL,CAAcsB,WAAd,KAA8B,CAAlD;AACA,WAAOD,aAAa,IAAIT,KAAxB;AACH,GAbD;;AAcA1C,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgC0E,WAAhC,GAA8C,UAAUZ,WAAV,EAAuB;AACjE;AACA,QAAIC,KAAK,GAAGD,WAAW,CAACd,QAAxB;AACA,QAAIgB,MAAM,GAAGF,WAAW,CAAClB,SAAzB,CAHiE,CAIjE;;AACA,QAAImB,KAAK,KAAK,CAAd,EAAiB;AACb,UAAIC,MAAM,KAAK7C,SAAS,CAAC0B,UAAzB,EAAqC;AACjC,eAAO,IAAP;AACH,OAFD,MAGK,IAAI,CAACmB,MAAL,EAAa;AACd,YAAI,KAAKlB,cAAL,CAAoBoB,cAApB,CAAmC/C,SAAS,CAAC0B,UAA7C,CAAJ,EAA8D;AAC1D,iBAAO,KAAK8B,qBAAL,EAAP;AACH;;AACD,eAAO,IAAP;AACH,OALI,MAMA;AACD;AACA,YAAI,KAAKxB,QAAL,CAAce,cAAd,EAAJ,EAAoC;AAChC,iBAAO,KAAKU,eAAL,EAAP;AACH,SAFD,MAGK,IAAI,KAAK9B,cAAL,CAAoBoB,cAApB,CAAmC/C,SAAS,CAAC0B,UAA7C,CAAJ,EAA8D;AAC/D,iBAAO,KAAK8B,qBAAL,EAAP;AACH;;AACD,eAAO,IAAP;AACH;AACJ;;AACD,WAAO;AAAE3B,MAAAA,QAAQ,EAAEe,KAAK,GAAG,CAApB;AAAuBnB,MAAAA,SAAS,EAAEoB;AAAlC,KAAP;AACH,GA3BD;;AA4BA3C,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgC6B,YAAhC,GAA+C,UAAU0B,QAAV,EAAoB;AAC/D,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,IAAP;AACH;;AACD,QAAIsB,QAAQ,GAAG,KAAKH,WAAL,CAAiB;AAAE1B,MAAAA,QAAQ,EAAEO,QAAQ,CAACP,QAArB;AAA+BJ,MAAAA,SAAS,EAAEW,QAAQ,CAACX;AAAnD,KAAjB,CAAf;;AACA,QAAIiC,QAAJ,EAAc;AACV,aAAO;AACH7B,QAAAA,QAAQ,EAAE6B,QAAQ,CAAC7B,QADhB;AAEHN,QAAAA,MAAM,EAAEa,QAAQ,CAACb,MAFd;AAGHE,QAAAA,SAAS,EAAEiC,QAAQ,CAACjC;AAHjB,OAAP;AAKH;;AACD,WAAO,IAAP;AACH,GAbD;;AAcAvB,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgC4E,eAAhC,GAAkD,YAAY;AAC1D,QAAIE,WAAW,GAAG,KAAK3B,QAAL,CAAcsB,WAAd,KAA8B,CAAhD;AACA,WAAO;AAAEzB,MAAAA,QAAQ,EAAE8B,WAAZ;AAAyBlC,MAAAA,SAAS,EAAE;AAApC,KAAP;AACH,GAHD;;AAIAvB,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgC2E,qBAAhC,GAAwD,YAAY;AAChE,QAAII,eAAe,GAAG,KAAKjC,cAAL,CAAoBuB,mBAApB,GAA0C5D,MAA1C,GAAmD,CAAzE;AACA,WAAO;AAAEuC,MAAAA,QAAQ,EAAE+B,eAAZ;AAA6BnC,MAAAA,SAAS,EAAEzB,SAAS,CAAC0B;AAAlD,KAAP;AACH,GAHD;;AAIAxB,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgCgF,iBAAhC,GAAoD,UAAUvC,QAAV,EAAoBwC,SAApB,EAA+B;AAC/E,QAAIA,SAAJ,EAAe;AACX,aAAO,KAAKC,0BAAL,CAAgCzC,QAAhC,CAAP;AACH;;AACD,WAAO,KAAK0C,yBAAL,CAA+B1C,QAA/B,CAAP;AACH,GALD;;AAMApB,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgCmF,yBAAhC,GAA4D,UAAU1C,QAAV,EAAoB;AAC5E,QAAI2C,gBAAgB,GAAG,KAAK3B,gBAAL,CAAsB4B,sBAAtB,EAAvB;AACA,QAAIC,WAAW,GAAG7C,QAAQ,CAACO,QAA3B;AACA,QAAIuC,WAAW,GAAG9C,QAAQ,CAACG,SAA3B,CAH4E,CAI5E;;AACA,QAAI4C,SAAS,GAAG,KAAK/B,gBAAL,CAAsBG,oBAAtB,CAA2CnB,QAAQ,CAACC,MAApD,CAAhB,CAL4E,CAM5E;;AACA,QAAI,CAAC8C,SAAL,EAAgB;AACZA,MAAAA,SAAS,GAAGJ,gBAAgB,CAAC,CAAD,CAA5B;AACA,UAAIjB,QAAQ,GAAG,KAAKN,WAAL,CAAiBpB,QAAjB,CAAf;;AACA,UAAIrB,CAAC,CAACqE,OAAF,CAAUtB,QAAV,CAAJ,EAAyB;AACrB,eAAO,IAAP;AACH;;AACDmB,MAAAA,WAAW,GAAGnB,QAAQ,GAAGA,QAAQ,CAACnB,QAAZ,GAAuB,IAA7C;AACAuC,MAAAA,WAAW,GAAGpB,QAAQ,GAAGA,QAAQ,CAACvB,SAAZ,GAAwB,IAA9C;AACH;;AACD,WAAO;AAAEI,MAAAA,QAAQ,EAAEsC,WAAZ;AAAyB5C,MAAAA,MAAM,EAAE8C,SAAjC;AAA4C5C,MAAAA,SAAS,EAAE2C;AAAvD,KAAP;AACH,GAjBD;;AAkBAlE,EAAAA,qBAAqB,CAACrB,SAAtB,CAAgCkF,0BAAhC,GAA6D,UAAUzC,QAAV,EAAoB;AAC7E,QAAI2C,gBAAgB,GAAG,KAAK3B,gBAAL,CAAsB4B,sBAAtB,EAAvB;AACA,QAAIC,WAAW,GAAG7C,QAAQ,CAACO,QAA3B;AACA,QAAIuC,WAAW,GAAG9C,QAAQ,CAACG,SAA3B,CAH6E,CAI7E;;AACA,QAAI4C,SAAS,GAAG,KAAK/B,gBAAL,CAAsBC,qBAAtB,CAA4CjB,QAAQ,CAACC,MAArD,CAAhB,CAL6E,CAM7E;;AACA,QAAI,CAAC8C,SAAL,EAAgB;AACZA,MAAAA,SAAS,GAAGpE,CAAC,CAACsE,IAAF,CAAON,gBAAP,CAAZ;AACA,UAAIP,QAAQ,GAAG,KAAKH,WAAL,CAAiB;AAAE1B,QAAAA,QAAQ,EAAEP,QAAQ,CAACO,QAArB;AAA+BJ,QAAAA,SAAS,EAAEH,QAAQ,CAACG;AAAnD,OAAjB,CAAf;;AACA,UAAIxB,CAAC,CAACqE,OAAF,CAAUZ,QAAV,CAAJ,EAAyB;AACrB,eAAO,IAAP;AACH;;AACDS,MAAAA,WAAW,GAAGT,QAAQ,GAAGA,QAAQ,CAAC7B,QAAZ,GAAuB,IAA7C;AACAuC,MAAAA,WAAW,GAAGV,QAAQ,GAAGA,QAAQ,CAACjC,SAAZ,GAAwB,IAA9C;AACH;;AACD,WAAO;AAAEI,MAAAA,QAAQ,EAAEsC,WAAZ;AAAyB5C,MAAAA,MAAM,EAAE8C,SAAjC;AAA4C5C,MAAAA,SAAS,EAAE2C;AAAvD,KAAP;AACH,GAjBD;;AAkBArF,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,kBAAD,CADF,CAAD,EAEPK,qBAAqB,CAACrB,SAFf,EAE0B,kBAF1B,EAE8C,KAAK,CAFnD,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,UAAD,CADF,CAAD,EAEPK,qBAAqB,CAACrB,SAFf,EAE0B,UAF1B,EAEsC,KAAK,CAF3C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,gBAAD,CADF,CAAD,EAEPK,qBAAqB,CAACrB,SAFf,EAE0B,gBAF1B,EAE4C,KAAK,CAFjD,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,oBAAD,CADF,CAAD,EAEPK,qBAAqB,CAACrB,SAFf,EAE0B,oBAF1B,EAEgD,KAAK,CAFrD,CAAV;;AAGAqB,EAAAA,qBAAqB,GAAGnB,UAAU,CAAC,CAC/Be,IAAI,CAAC,uBAAD,CAD2B,CAAD,EAE/BI,qBAF+B,CAAlC;AAGA,SAAOA,qBAAP;AACH,CAvQ0C,CAuQzCH,QAvQyC,CAA3C;;AAwQA,SAASG,qBAAT","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Constants } from \"./constants\";\nimport { _ } from \"./utils\";\nvar CellNavigationService = /** @class */ (function (_super) {\n    __extends(CellNavigationService, _super);\n    function CellNavigationService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // returns null if no cell to focus on, ie at the end of the grid\n    CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {\n        // starting with the provided cell, we keep moving until we find a cell we can\n        // focus on.\n        var pointer = lastCellToFocus;\n        var finished = false;\n        // finished will be true when either:\n        // a) cell found that we can focus on\n        // b) run out of cells (ie the method returns null)\n        while (!finished) {\n            switch (key) {\n                case Constants.KEY_UP:\n                    pointer = this.getCellAbove(pointer);\n                    break;\n                case Constants.KEY_DOWN:\n                    pointer = this.getCellBelow(pointer);\n                    break;\n                case Constants.KEY_RIGHT:\n                    if (this.gridOptionsWrapper.isEnableRtl()) {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    else {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    break;\n                case Constants.KEY_LEFT:\n                    if (this.gridOptionsWrapper.isEnableRtl()) {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    else {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    break;\n                default:\n                    pointer = null;\n                    console.warn('ag-Grid: unknown key for navigation ' + key);\n                    break;\n            }\n            if (pointer) {\n                finished = this.isCellGoodToFocusOn(pointer);\n            }\n            else {\n                finished = true;\n            }\n        }\n        return pointer;\n    };\n    CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {\n        var column = gridCell.column;\n        var rowNode;\n        switch (gridCell.rowPinned) {\n            case Constants.PINNED_TOP:\n                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n                break;\n            case Constants.PINNED_BOTTOM:\n                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n                break;\n            default:\n                rowNode = this.rowModel.getRow(gridCell.rowIndex);\n                break;\n        }\n        var suppressNavigable = column.isSuppressNavigable(rowNode);\n        return !suppressNavigable;\n    };\n    CellNavigationService.prototype.getCellToLeft = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);\n        if (!colToLeft) {\n            return null;\n        }\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToLeft,\n            rowPinned: lastCell.rowPinned\n        };\n    };\n    CellNavigationService.prototype.getCellToRight = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var colToRight = this.columnController.getDisplayedColAfter(lastCell.column);\n        // if already on right, do nothing\n        if (!colToRight) {\n            return null;\n        }\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToRight,\n            rowPinned: lastCell.rowPinned\n        };\n    };\n    CellNavigationService.prototype.getRowBelow = function (rowPosition) {\n        // if already on top row, do nothing\n        var index = rowPosition.rowIndex;\n        var pinned = rowPosition.rowPinned;\n        if (this.isLastRowInContainer(rowPosition)) {\n            switch (pinned) {\n                case Constants.PINNED_BOTTOM:\n                    // never any rows after pinned bottom\n                    return null;\n                case Constants.PINNED_TOP:\n                    // if on last row of pinned top, then next row is main body (if rows exist),\n                    // otherwise it's the pinned bottom\n                    if (this.rowModel.isRowsToRender()) {\n                        return { rowIndex: 0, rowPinned: null };\n                    }\n                    else if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n                        return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };\n                    }\n                    return null;\n                default:\n                    // if in the main body, then try pinned bottom, otherwise return nothing\n                    if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n                        return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };\n                    }\n                    return null;\n            }\n        }\n        return { rowIndex: index + 1, rowPinned: pinned };\n    };\n    CellNavigationService.prototype.getCellBelow = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var rowBelow = this.getRowBelow(lastCell);\n        if (rowBelow) {\n            return {\n                rowIndex: rowBelow.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowBelow.rowPinned\n            };\n        }\n        return null;\n    };\n    CellNavigationService.prototype.isLastRowInContainer = function (rowPosition) {\n        var pinned = rowPosition.rowPinned;\n        var index = rowPosition.rowIndex;\n        if (pinned === Constants.PINNED_TOP) {\n            var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n            return lastTopIndex <= index;\n        }\n        else if (pinned === Constants.PINNED_BOTTOM) {\n            var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n            return lastBottomIndex <= index;\n        }\n        var lastBodyIndex = this.rowModel.getRowCount() - 1;\n        return lastBodyIndex <= index;\n    };\n    CellNavigationService.prototype.getRowAbove = function (rowPosition) {\n        // if already on top row, do nothing\n        var index = rowPosition.rowIndex;\n        var pinned = rowPosition.rowPinned;\n        // if already on top row, do nothing\n        if (index === 0) {\n            if (pinned === Constants.PINNED_TOP) {\n                return null;\n            }\n            else if (!pinned) {\n                if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n            else {\n                // last floating bottom\n                if (this.rowModel.isRowsToRender()) {\n                    return this.getLastBodyCell();\n                }\n                else if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n        }\n        return { rowIndex: index - 1, rowPinned: pinned };\n    };\n    CellNavigationService.prototype.getCellAbove = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });\n        if (rowAbove) {\n            return {\n                rowIndex: rowAbove.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowAbove.rowPinned\n            };\n        }\n        return null;\n    };\n    CellNavigationService.prototype.getLastBodyCell = function () {\n        var lastBodyRow = this.rowModel.getRowCount() - 1;\n        return { rowIndex: lastBodyRow, rowPinned: null };\n    };\n    CellNavigationService.prototype.getLastFloatingTopRow = function () {\n        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n        return { rowIndex: lastFloatingRow, rowPinned: Constants.PINNED_TOP };\n    };\n    CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {\n        if (backwards) {\n            return this.getNextTabbedCellBackwards(gridCell);\n        }\n        return this.getNextTabbedCellForwards(gridCell);\n    };\n    CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {\n        var displayedColumns = this.columnController.getAllDisplayedColumns();\n        var newRowIndex = gridCell.rowIndex;\n        var newFloating = gridCell.rowPinned;\n        // move along to the next cell\n        var newColumn = this.columnController.getDisplayedColAfter(gridCell.column);\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = displayedColumns[0];\n            var rowBelow = this.getRowBelow(gridCell);\n            if (_.missing(rowBelow)) {\n                return null;\n            }\n            newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n            newFloating = rowBelow ? rowBelow.rowPinned : null;\n        }\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };\n    };\n    CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {\n        var displayedColumns = this.columnController.getAllDisplayedColumns();\n        var newRowIndex = gridCell.rowIndex;\n        var newFloating = gridCell.rowPinned;\n        // move along to the next cell\n        var newColumn = this.columnController.getDisplayedColBefore(gridCell.column);\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = _.last(displayedColumns);\n            var rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });\n            if (_.missing(rowAbove)) {\n                return null;\n            }\n            newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n            newFloating = rowAbove ? rowAbove.rowPinned : null;\n        }\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };\n    };\n    __decorate([\n        Autowired('columnController')\n    ], CellNavigationService.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], CellNavigationService.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], CellNavigationService.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], CellNavigationService.prototype, \"gridOptionsWrapper\", void 0);\n    CellNavigationService = __decorate([\n        Bean('cellNavigationService')\n    ], CellNavigationService);\n    return CellNavigationService;\n}(BeanStub));\nexport { CellNavigationService };\n"]},"metadata":{},"sourceType":"module"}