{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Events } from \"./events\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\n\nvar AlignedGridsService =\n/** @class */\nfunction (_super) {\n  __extends(AlignedGridsService, _super);\n\n  function AlignedGridsService() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n    // while processing a master event) we mark this if consuming an event, and if we are, then\n    // we don't fire back any events.\n\n\n    _this.consuming = false;\n    return _this;\n  }\n\n  AlignedGridsService.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('AlignedGridsService');\n  };\n\n  AlignedGridsService.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  AlignedGridsService.prototype.init = function () {\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n  }; // common logic across all the fire methods\n\n\n  AlignedGridsService.prototype.fireEvent = function (callback) {\n    // if we are already consuming, then we are acting on an event from a master,\n    // so we don't cause a cyclic firing of events\n    if (this.consuming) {\n      return;\n    } // iterate through the aligned grids, and pass each aligned grid service to the callback\n\n\n    var otherGrids = this.gridOptionsWrapper.getAlignedGrids();\n\n    if (otherGrids) {\n      otherGrids.forEach(function (otherGridOptions) {\n        if (otherGridOptions.api) {\n          var alignedGridService = otherGridOptions.api.__getAlignedGridService();\n\n          callback(alignedGridService);\n        }\n      });\n    }\n  }; // common logic across all consume methods. very little common logic, however extracting\n  // guarantees consistency across the methods.\n\n\n  AlignedGridsService.prototype.onEvent = function (callback) {\n    this.consuming = true;\n    callback();\n    this.consuming = false;\n  };\n\n  AlignedGridsService.prototype.fireColumnEvent = function (event) {\n    this.fireEvent(function (alignedGridsService) {\n      alignedGridsService.onColumnEvent(event);\n    });\n  };\n\n  AlignedGridsService.prototype.fireScrollEvent = function (event) {\n    if (event.direction !== 'horizontal') {\n      return;\n    }\n\n    this.fireEvent(function (alignedGridsService) {\n      alignedGridsService.onScrollEvent(event);\n    });\n  };\n\n  AlignedGridsService.prototype.onScrollEvent = function (event) {\n    var _this = this;\n\n    this.onEvent(function () {\n      _this.gridPanel.setHorizontalScrollPosition(event.left);\n    });\n  };\n\n  AlignedGridsService.prototype.getMasterColumns = function (event) {\n    var result = [];\n\n    if (event.columns) {\n      event.columns.forEach(function (column) {\n        result.push(column);\n      });\n    } else if (event.column) {\n      result.push(event.column);\n    }\n\n    return result;\n  };\n\n  AlignedGridsService.prototype.getColumnIds = function (event) {\n    var result = [];\n\n    if (event.columns) {\n      event.columns.forEach(function (column) {\n        result.push(column.getColId());\n      });\n    } else if (event.column) {\n      result.push(event.column.getColId());\n    }\n\n    return result;\n  };\n\n  AlignedGridsService.prototype.onColumnEvent = function (event) {\n    var _this = this;\n\n    this.onEvent(function () {\n      switch (event.type) {\n        case Events.EVENT_COLUMN_MOVED:\n        case Events.EVENT_COLUMN_VISIBLE:\n        case Events.EVENT_COLUMN_PINNED:\n        case Events.EVENT_COLUMN_RESIZED:\n          var colEvent = event;\n\n          _this.processColumnEvent(colEvent);\n\n          break;\n\n        case Events.EVENT_COLUMN_GROUP_OPENED:\n          var groupOpenedEvent = event;\n\n          _this.processGroupOpenedEvent(groupOpenedEvent);\n\n          break;\n\n        case Events.EVENT_COLUMN_PIVOT_CHANGED:\n          // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n          // grids will have columns created based on the row data of the grid.\n          console.warn('ag-Grid: pivoting is not supported with aligned grids. ' + 'You can only use one of these features at a time in a grid.');\n          break;\n      }\n    });\n  };\n\n  AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {\n    // likewise for column group\n    var masterColumnGroup = groupOpenedEvent.columnGroup;\n    var otherColumnGroup;\n\n    if (masterColumnGroup) {\n      var groupId = masterColumnGroup.getGroupId();\n      otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);\n    }\n\n    if (masterColumnGroup && !otherColumnGroup) {\n      return;\n    }\n\n    this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());\n    this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), \"alignedGridChanged\");\n  };\n\n  AlignedGridsService.prototype.processColumnEvent = function (colEvent) {\n    var _this = this; // the column in the event is from the master grid. need to\n    // look up the equivalent from this (other) grid\n\n\n    var masterColumn = colEvent.column;\n    var otherColumn;\n\n    if (masterColumn) {\n      otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());\n    } // if event was with respect to a master column, that is not present in this\n    // grid, then we ignore the event\n\n\n    if (masterColumn && !otherColumn) {\n      return;\n    } // in time, all the methods below should use the column ids, it's a more generic way\n    // of handling columns, and also allows for single or multi column events\n\n\n    var columnIds = this.getColumnIds(colEvent);\n    var masterColumns = this.getMasterColumns(colEvent);\n\n    switch (colEvent.type) {\n      case Events.EVENT_COLUMN_MOVED:\n        var movedEvent = colEvent;\n        this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" toIndex = \" + movedEvent.toIndex);\n        this.columnController.moveColumns(columnIds, movedEvent.toIndex, \"alignedGridChanged\");\n        break;\n\n      case Events.EVENT_COLUMN_VISIBLE:\n        var visibleEvent = colEvent;\n        this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" visible = \" + visibleEvent.visible);\n        this.columnController.setColumnsVisible(columnIds, visibleEvent.visible, \"alignedGridChanged\");\n        break;\n\n      case Events.EVENT_COLUMN_PINNED:\n        var pinnedEvent = colEvent;\n        this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" pinned = \" + pinnedEvent.pinned);\n        this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned, \"alignedGridChanged\");\n        break;\n\n      case Events.EVENT_COLUMN_RESIZED:\n        var resizedEvent_1 = colEvent;\n        masterColumns.forEach(function (column) {\n          _this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" actualWidth = \" + column.getActualWidth());\n\n          var columnWidths = [{\n            key: column.getColId(),\n            newWidth: column.getActualWidth()\n          }];\n\n          _this.columnController.setColumnWidths(columnWidths, false, resizedEvent_1.finished, \"alignedGridChanged\");\n        });\n        break;\n    }\n\n    var isVerticalScrollShowing = this.gridPanel.isVerticalScrollShowing();\n    var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();\n    alignedGrids.forEach(function (grid) {\n      grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);\n    });\n  };\n\n  __decorate([Autowired('gridOptionsWrapper')], AlignedGridsService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnController')], AlignedGridsService.prototype, \"columnController\", void 0);\n\n  __decorate([__param(0, Qualifier('loggerFactory'))], AlignedGridsService.prototype, \"setBeans\", null);\n\n  __decorate([PostConstruct], AlignedGridsService.prototype, \"init\", null);\n\n  AlignedGridsService = __decorate([Bean('alignedGridsService')], AlignedGridsService);\n  return AlignedGridsService;\n}(BeanStub);\n\nexport { AlignedGridsService };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/alignedGridsService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Events","Bean","Qualifier","Autowired","PostConstruct","BeanStub","AlignedGridsService","_super","_this","apply","consuming","setBeans","loggerFactory","logger","registerGridComp","gridPanel","init","addManagedListener","eventService","EVENT_COLUMN_MOVED","fireColumnEvent","bind","EVENT_COLUMN_VISIBLE","EVENT_COLUMN_PINNED","EVENT_COLUMN_GROUP_OPENED","EVENT_COLUMN_RESIZED","EVENT_BODY_SCROLL","fireScrollEvent","fireEvent","callback","otherGrids","gridOptionsWrapper","getAlignedGrids","forEach","otherGridOptions","api","alignedGridService","__getAlignedGridService","onEvent","event","alignedGridsService","onColumnEvent","direction","onScrollEvent","setHorizontalScrollPosition","left","getMasterColumns","result","columns","column","push","getColumnIds","getColId","type","colEvent","processColumnEvent","groupOpenedEvent","processGroupOpenedEvent","EVENT_COLUMN_PIVOT_CHANGED","console","warn","masterColumnGroup","columnGroup","otherColumnGroup","groupId","getGroupId","columnController","getOriginalColumnGroup","log","isExpanded","setColumnGroupOpened","masterColumn","otherColumn","getPrimaryColumn","columnIds","masterColumns","movedEvent","toIndex","moveColumns","visibleEvent","visible","setColumnsVisible","pinnedEvent","pinned","setColumnsPinned","resizedEvent_1","getActualWidth","columnWidths","newWidth","setColumnWidths","finished","isVerticalScrollShowing","alignedGrids","grid","setAlwaysShowVerticalScroll"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Events } from \"./events\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nvar AlignedGridsService = /** @class */ (function (_super) {\n    __extends(AlignedGridsService, _super);\n    function AlignedGridsService() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n        // while processing a master event) we mark this if consuming an event, and if we are, then\n        // we don't fire back any events.\n        _this.consuming = false;\n        return _this;\n    }\n    AlignedGridsService.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('AlignedGridsService');\n    };\n    AlignedGridsService.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    AlignedGridsService.prototype.init = function () {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n    };\n    // common logic across all the fire methods\n    AlignedGridsService.prototype.fireEvent = function (callback) {\n        // if we are already consuming, then we are acting on an event from a master,\n        // so we don't cause a cyclic firing of events\n        if (this.consuming) {\n            return;\n        }\n        // iterate through the aligned grids, and pass each aligned grid service to the callback\n        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();\n        if (otherGrids) {\n            otherGrids.forEach(function (otherGridOptions) {\n                if (otherGridOptions.api) {\n                    var alignedGridService = otherGridOptions.api.__getAlignedGridService();\n                    callback(alignedGridService);\n                }\n            });\n        }\n    };\n    // common logic across all consume methods. very little common logic, however extracting\n    // guarantees consistency across the methods.\n    AlignedGridsService.prototype.onEvent = function (callback) {\n        this.consuming = true;\n        callback();\n        this.consuming = false;\n    };\n    AlignedGridsService.prototype.fireColumnEvent = function (event) {\n        this.fireEvent(function (alignedGridsService) {\n            alignedGridsService.onColumnEvent(event);\n        });\n    };\n    AlignedGridsService.prototype.fireScrollEvent = function (event) {\n        if (event.direction !== 'horizontal') {\n            return;\n        }\n        this.fireEvent(function (alignedGridsService) {\n            alignedGridsService.onScrollEvent(event);\n        });\n    };\n    AlignedGridsService.prototype.onScrollEvent = function (event) {\n        var _this = this;\n        this.onEvent(function () {\n            _this.gridPanel.setHorizontalScrollPosition(event.left);\n        });\n    };\n    AlignedGridsService.prototype.getMasterColumns = function (event) {\n        var result = [];\n        if (event.columns) {\n            event.columns.forEach(function (column) {\n                result.push(column);\n            });\n        }\n        else if (event.column) {\n            result.push(event.column);\n        }\n        return result;\n    };\n    AlignedGridsService.prototype.getColumnIds = function (event) {\n        var result = [];\n        if (event.columns) {\n            event.columns.forEach(function (column) {\n                result.push(column.getColId());\n            });\n        }\n        else if (event.column) {\n            result.push(event.column.getColId());\n        }\n        return result;\n    };\n    AlignedGridsService.prototype.onColumnEvent = function (event) {\n        var _this = this;\n        this.onEvent(function () {\n            switch (event.type) {\n                case Events.EVENT_COLUMN_MOVED:\n                case Events.EVENT_COLUMN_VISIBLE:\n                case Events.EVENT_COLUMN_PINNED:\n                case Events.EVENT_COLUMN_RESIZED:\n                    var colEvent = event;\n                    _this.processColumnEvent(colEvent);\n                    break;\n                case Events.EVENT_COLUMN_GROUP_OPENED:\n                    var groupOpenedEvent = event;\n                    _this.processGroupOpenedEvent(groupOpenedEvent);\n                    break;\n                case Events.EVENT_COLUMN_PIVOT_CHANGED:\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n                    // grids will have columns created based on the row data of the grid.\n                    console.warn('ag-Grid: pivoting is not supported with aligned grids. ' +\n                        'You can only use one of these features at a time in a grid.');\n                    break;\n            }\n        });\n    };\n    AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {\n        // likewise for column group\n        var masterColumnGroup = groupOpenedEvent.columnGroup;\n        var otherColumnGroup;\n        if (masterColumnGroup) {\n            var groupId = masterColumnGroup.getGroupId();\n            otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);\n        }\n        if (masterColumnGroup && !otherColumnGroup) {\n            return;\n        }\n        this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());\n        this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), \"alignedGridChanged\");\n    };\n    AlignedGridsService.prototype.processColumnEvent = function (colEvent) {\n        var _this = this;\n        // the column in the event is from the master grid. need to\n        // look up the equivalent from this (other) grid\n        var masterColumn = colEvent.column;\n        var otherColumn;\n        if (masterColumn) {\n            otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());\n        }\n        // if event was with respect to a master column, that is not present in this\n        // grid, then we ignore the event\n        if (masterColumn && !otherColumn) {\n            return;\n        }\n        // in time, all the methods below should use the column ids, it's a more generic way\n        // of handling columns, and also allows for single or multi column events\n        var columnIds = this.getColumnIds(colEvent);\n        var masterColumns = this.getMasterColumns(colEvent);\n        switch (colEvent.type) {\n            case Events.EVENT_COLUMN_MOVED:\n                var movedEvent = colEvent;\n                this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" toIndex = \" + movedEvent.toIndex);\n                this.columnController.moveColumns(columnIds, movedEvent.toIndex, \"alignedGridChanged\");\n                break;\n            case Events.EVENT_COLUMN_VISIBLE:\n                var visibleEvent = colEvent;\n                this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" visible = \" + visibleEvent.visible);\n                this.columnController.setColumnsVisible(columnIds, visibleEvent.visible, \"alignedGridChanged\");\n                break;\n            case Events.EVENT_COLUMN_PINNED:\n                var pinnedEvent = colEvent;\n                this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" pinned = \" + pinnedEvent.pinned);\n                this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned, \"alignedGridChanged\");\n                break;\n            case Events.EVENT_COLUMN_RESIZED:\n                var resizedEvent_1 = colEvent;\n                masterColumns.forEach(function (column) {\n                    _this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" actualWidth = \" + column.getActualWidth());\n                    var columnWidths = [{ key: column.getColId(), newWidth: column.getActualWidth() }];\n                    _this.columnController.setColumnWidths(columnWidths, false, resizedEvent_1.finished, \"alignedGridChanged\");\n                });\n                break;\n        }\n        var isVerticalScrollShowing = this.gridPanel.isVerticalScrollShowing();\n        var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();\n        alignedGrids.forEach(function (grid) {\n            grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);\n        });\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], AlignedGridsService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], AlignedGridsService.prototype, \"columnController\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], AlignedGridsService.prototype, \"setBeans\", null);\n    __decorate([\n        PostConstruct\n    ], AlignedGridsService.prototype, \"init\", null);\n    AlignedGridsService = __decorate([\n        Bean('alignedGridsService')\n    ], AlignedGridsService);\n    return AlignedGridsService;\n}(BeanStub));\nexport { AlignedGridsService };\n"]},"metadata":{},"sourceType":"module"}