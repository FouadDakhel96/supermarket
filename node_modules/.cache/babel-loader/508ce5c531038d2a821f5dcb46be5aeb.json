{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Constants } from \"../../constants\";\nimport { Autowired } from \"../../context/context\";\nimport { Component } from \"../../widgets/component\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { ComponentSource } from \"../../components/framework/userComponentFactory\";\nimport { _ } from \"../../utils\";\n\nvar GroupCellRenderer =\n/** @class */\nfunction (_super) {\n  __extends(GroupCellRenderer, _super);\n\n  function GroupCellRenderer() {\n    return _super.call(this, GroupCellRenderer.TEMPLATE) || this;\n  }\n\n  GroupCellRenderer.prototype.init = function (params) {\n    this.params = params;\n\n    if (this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {\n      this.assignBlankValueToGroupFooterCell(params);\n    }\n\n    var embeddedRowMismatch = this.isEmbeddedRowMismatch(); // This allows for empty strings to appear as groups since\n    // it will only return for null or undefined.\n\n    var nullValue = params.value == null;\n    var skipCell = false; // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true\n    // we should only display the groupCellRenderer if the current column is the rowGroupedColumn\n\n    if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {\n      var node = params.node;\n\n      if (node.footer) {\n        var showRowGroup = params.colDef && params.colDef.showRowGroup;\n        var rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();\n        skipCell = showRowGroup !== rowGroupColumnId;\n      }\n    }\n\n    this.cellIsBlank = embeddedRowMismatch || nullValue || skipCell;\n\n    if (this.cellIsBlank) {\n      return;\n    }\n\n    this.setupDragOpenParents();\n    this.addExpandAndContract();\n    this.addCheckboxIfNeeded();\n    this.addValueElement();\n    this.setupIndent();\n  };\n\n  GroupCellRenderer.prototype.assignBlankValueToGroupFooterCell = function (params) {\n    // this is not ideal, but it was the only way we could get footer working for the root node\n    if (!params.value && params.node.level == -1) {\n      params.value = '';\n    }\n  }; // if we are doing embedded full width rows, we only show the renderer when\n  // in the body, or if pinning in the pinned section, or if pinning and RTL,\n  // in the right section. otherwise we would have the cell repeated in each section.\n\n\n  GroupCellRenderer.prototype.isEmbeddedRowMismatch = function () {\n    if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) {\n      return false;\n    }\n\n    var pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;\n    var pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;\n    var bodyCell = !pinnedLeftCell && !pinnedRightCell;\n\n    if (this.gridOptionsWrapper.isEnableRtl()) {\n      if (this.columnController.isPinningLeft()) {\n        return !pinnedRightCell;\n      }\n\n      return !bodyCell;\n    }\n\n    if (this.columnController.isPinningLeft()) {\n      return !pinnedLeftCell;\n    }\n\n    return !bodyCell;\n  };\n\n  GroupCellRenderer.prototype.setIndent = function () {\n    if (this.gridOptionsWrapper.isGroupHideOpenParents()) {\n      return;\n    }\n\n    var params = this.params;\n    var rowNode = params.node;\n    var paddingCount = rowNode.uiLevel;\n    var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;\n\n    if (userProvidedPaddingPixelsTheDeprecatedWay) {\n      this.setPaddingDeprecatedWay(paddingCount, params.padding);\n      return;\n    }\n\n    if (this.indentClass) {\n      this.removeCssClass(this.indentClass);\n    }\n\n    this.indentClass = 'ag-row-group-indent-' + paddingCount;\n    this.addCssClass(this.indentClass);\n  };\n\n  GroupCellRenderer.prototype.setPaddingDeprecatedWay = function (paddingCount, padding) {\n    _.doOnce(function () {\n      return console.warn('ag-Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the ag-Grid documentation page for Themes, in particular the property $row-group-indent-size.');\n    }, 'groupCellRenderer->doDeprecatedWay');\n\n    var paddingPx = paddingCount * padding;\n    var eGui = this.getGui();\n    var paddingSide = this.gridOptionsWrapper.isEnableRtl() ? 'paddingRight' : 'paddingLeft';\n    eGui.style[paddingSide] = paddingPx + \"px\";\n  };\n\n  GroupCellRenderer.prototype.setupIndent = function () {\n    // only do this if an indent - as this overwrites the padding that\n    // the theme set, which will make things look 'not aligned' for the\n    // first group level.\n    var node = this.params.node;\n    var suppressPadding = this.params.suppressPadding;\n\n    if (!suppressPadding) {\n      this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));\n      this.setIndent();\n    }\n  };\n\n  GroupCellRenderer.prototype.addValueElement = function () {\n    var params = this.params;\n    var rowNode = this.displayedGroup;\n\n    if (rowNode.footer) {\n      this.createFooterCell();\n    } else if (rowNode.hasChildren() || _.get(params.colDef, 'cellRendererParams.innerRenderer', null) || _.get(params.colDef, 'cellRendererParams.innerRendererFramework', null)) {\n      this.createGroupCell();\n\n      if (rowNode.hasChildren()) {\n        this.addChildCount();\n      }\n    } else {\n      this.createLeafCell();\n    }\n  };\n\n  GroupCellRenderer.prototype.createFooterCell = function () {\n    var footerValueGetter = this.params.footerValueGetter;\n    var footerValue;\n\n    if (footerValueGetter) {\n      // params is same as we were given, except we set the value as the item to display\n      var paramsClone = _.cloneObject(this.params);\n\n      paramsClone.value = this.params.value;\n\n      if (typeof footerValueGetter === 'function') {\n        footerValue = footerValueGetter(paramsClone);\n      } else if (typeof footerValueGetter === 'string') {\n        footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n      } else {\n        console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');\n      }\n    } else {\n      footerValue = 'Total ' + this.params.value;\n    }\n\n    this.eValue.innerHTML = footerValue;\n  };\n\n  GroupCellRenderer.prototype.createGroupCell = function () {\n    var _this = this;\n\n    var params = this.params;\n    var rowGroupColumn = this.displayedGroup.rowGroupColumn; // we try and use the cellRenderer of the column used for the grouping if we can\n\n    var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;\n    var groupName = this.params.value;\n    var valueFormatted = columnToUse ? this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;\n    params.valueFormatted = valueFormatted;\n    var rendererPromise;\n    rendererPromise = params.fullWidth ? this.useFullWidth(params) : this.useInnerRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), params); // retain a reference to the created renderer - we'll use this later for cleanup (in destroy)\n\n    if (rendererPromise) {\n      rendererPromise.then(function (value) {\n        _this.innerCellRenderer = value;\n      });\n    }\n  };\n\n  GroupCellRenderer.prototype.useInnerRenderer = function (groupCellRendererParams, groupedColumnDef, // the column this group row is for, eg 'Country'\n  params) {\n    var _this = this; // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n    // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n    // cell renderer for each rating group row.\n    //\n    // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n    // of the grouped columns.\n    //\n    // so we check and use in the following order:\n    //\n    // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n    // 2) groupedColDef.cellRenderer of the grouped column\n    // 3) groupedColDef.cellRendererParams.innerRenderer\n\n\n    var cellRendererPromise = null; // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n\n    var groupInnerRendererClass = this.userComponentFactory.lookupComponentClassDef(groupCellRendererParams, \"innerRenderer\");\n\n    if (groupInnerRendererClass && groupInnerRendererClass.component != null && groupInnerRendererClass.source != ComponentSource.DEFAULT) {\n      // use the renderer defined in cellRendererParams.innerRenderer\n      cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupCellRendererParams, params);\n    } else {\n      // otherwise see if we can use the cellRenderer of the column we are grouping by\n      var groupColumnRendererClass = this.userComponentFactory.lookupComponentClassDef(groupedColumnDef, \"cellRenderer\");\n\n      if (groupColumnRendererClass && groupColumnRendererClass.source != ComponentSource.DEFAULT) {\n        // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n        cellRendererPromise = this.userComponentFactory.newCellRenderer(groupedColumnDef, params);\n      } else if (groupColumnRendererClass && groupColumnRendererClass.source == ComponentSource.DEFAULT && _.get(groupedColumnDef, 'cellRendererParams.innerRenderer', null)) {\n        // EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'\n        // AND HAS A INNER CELL RENDERER\n        cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupedColumnDef.cellRendererParams, params);\n      } else {\n        // This forces the retrieval of the default plain cellRenderer that just renders the values.\n        cellRendererPromise = this.userComponentFactory.newCellRenderer({}, params);\n      }\n    }\n\n    if (cellRendererPromise != null) {\n      cellRendererPromise.then(function (rendererToUse) {\n        if (rendererToUse == null) {\n          _this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n          return;\n        }\n\n        _.bindCellRendererToHtmlElement(cellRendererPromise, _this.eValue);\n      });\n    } else {\n      this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n    }\n\n    return cellRendererPromise;\n  };\n\n  GroupCellRenderer.prototype.useFullWidth = function (params) {\n    var cellRendererPromise = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer(params);\n\n    if (cellRendererPromise != null) {\n      _.bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);\n    } else {\n      this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n    }\n\n    return cellRendererPromise;\n  };\n\n  GroupCellRenderer.prototype.addChildCount = function () {\n    // only include the child count if it's included, eg if user doing custom aggregation,\n    // then this could be left out, or set to -1, ie no child count\n    if (this.params.suppressCount) {\n      return;\n    }\n\n    this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this)); // filtering changes the child count, so need to cater for it\n\n    this.updateChildCount();\n  };\n\n  GroupCellRenderer.prototype.updateChildCount = function () {\n    var allChildrenCount = this.displayedGroup.allChildrenCount;\n    this.eChildCount.innerHTML = allChildrenCount >= 0 ? \"(\" + allChildrenCount + \")\" : \"\";\n  };\n\n  GroupCellRenderer.prototype.createLeafCell = function () {\n    if (_.exists(this.params.value)) {\n      this.eValue.innerText = this.params.valueFormatted ? this.params.valueFormatted : this.params.value;\n    }\n  };\n\n  GroupCellRenderer.prototype.isUserWantsSelected = function () {\n    var paramsCheckbox = this.params.checkbox;\n\n    if (typeof paramsCheckbox === 'function') {\n      return paramsCheckbox(this.params);\n    }\n\n    return paramsCheckbox === true;\n  };\n\n  GroupCellRenderer.prototype.addCheckboxIfNeeded = function () {\n    var _this = this;\n\n    var rowNode = this.displayedGroup;\n    var checkboxNeeded = this.isUserWantsSelected() && // footers cannot be selected\n    !rowNode.footer && // pinned rows cannot be selected\n    !rowNode.rowPinned && // details cannot be selected\n    !rowNode.detail;\n\n    if (checkboxNeeded) {\n      var cbSelectionComponent_1 = new CheckboxSelectionComponent();\n      this.getContext().createBean(cbSelectionComponent_1);\n      cbSelectionComponent_1.init({\n        rowNode: rowNode,\n        column: this.params.column\n      });\n      this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());\n      this.addDestroyFunc(function () {\n        return _this.getContext().destroyBean(cbSelectionComponent_1);\n      });\n    }\n\n    _.addOrRemoveCssClass(this.eCheckbox, 'ag-invisible', !checkboxNeeded);\n  };\n\n  GroupCellRenderer.prototype.addExpandAndContract = function () {\n    var params = this.params;\n    var eGroupCell = params.eGridCell;\n\n    var eExpandedIcon = _.createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);\n\n    var eContractedIcon = _.createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);\n\n    this.eExpanded.appendChild(eExpandedIcon);\n    this.eContracted.appendChild(eContractedIcon);\n    this.addManagedListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));\n    this.addManagedListener(this.eContracted, 'click', this.onExpandClicked.bind(this)); // expand / contract as the user hits enter\n\n    this.addManagedListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));\n    this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));\n    this.showExpandAndContractIcons(); // because we don't show the expand / contract when there are no children, we need to check every time\n    // the number of children change.\n\n    this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.onRowNodeIsExpandableChanged.bind(this));\n    this.addManagedListener(this.displayedGroup, RowNode.EVENT_MASTER_CHANGED, this.onRowNodeIsExpandableChanged.bind(this)); // if editing groups, then double click is to start editing\n\n    if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {\n      this.addManagedListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));\n    }\n  };\n\n  GroupCellRenderer.prototype.onRowNodeIsExpandableChanged = function () {\n    // maybe if no children now, we should hide the expand / contract icons\n    this.showExpandAndContractIcons(); // if we have no children, this impacts the indent\n\n    this.setIndent();\n  };\n\n  GroupCellRenderer.prototype.onKeyDown = function (event) {\n    var enterKeyPressed = _.isKeyPressed(event, Constants.KEY_ENTER);\n\n    if (!enterKeyPressed || this.params.suppressEnterExpand) {\n      return;\n    }\n\n    var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n\n    if (cellEditable) {\n      return;\n    }\n\n    event.preventDefault();\n    this.onExpandOrContract();\n  };\n\n  GroupCellRenderer.prototype.setupDragOpenParents = function () {\n    var column = this.params.column;\n    var rowNode = this.params.node;\n\n    if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n      this.draggedFromHideOpenParents = false;\n    } else if (!rowNode.hasChildren()) {\n      // if we are here, and we are not a group, then we must of been dragged down,\n      // as otherwise the cell would be blank, and if cell is blank, this method is never called.\n      this.draggedFromHideOpenParents = true;\n    } else {\n      var rowGroupColumn = rowNode.rowGroupColumn;\n\n      if (rowGroupColumn) {\n        // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,\n        // then nothing was dragged down\n        this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());\n      } else {\n        // the only way we can end up here (no column, but a group) is if we are at the root node,\n        // which only happens when 'groupIncludeTotalFooter' is true. here, we are never dragging\n        this.draggedFromHideOpenParents = false;\n      }\n    }\n\n    if (this.draggedFromHideOpenParents) {\n      var pointer = rowNode.parent;\n\n      while (true) {\n        if (_.missing(pointer)) {\n          break;\n        }\n\n        if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n          this.displayedGroup = pointer;\n          break;\n        }\n\n        pointer = pointer.parent;\n      }\n    } // if we didn't find a displayed group, set it to the row node\n\n\n    if (_.missing(this.displayedGroup)) {\n      this.displayedGroup = rowNode;\n    }\n  };\n\n  GroupCellRenderer.prototype.onExpandClicked = function (mouseEvent) {\n    if (_.isStopPropagationForAgGrid(mouseEvent)) {\n      return;\n    } // so if we expand a node, it does not also get selected.\n\n\n    _.stopPropagationForAgGrid(mouseEvent);\n\n    this.onExpandOrContract();\n  };\n\n  GroupCellRenderer.prototype.onCellDblClicked = function (mouseEvent) {\n    if (_.isStopPropagationForAgGrid(mouseEvent)) {\n      return;\n    } // we want to avoid acting on double click events on the expand / contract icon,\n    // as that icons already has expand / collapse functionality on it. otherwise if\n    // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n    // is open->close->open, however double click should be open->close only.\n\n\n    var targetIsExpandIcon = _.isElementInEventPath(this.eExpanded, mouseEvent) || _.isElementInEventPath(this.eContracted, mouseEvent);\n\n    if (!targetIsExpandIcon) {\n      this.onExpandOrContract();\n    }\n  };\n\n  GroupCellRenderer.prototype.onExpandOrContract = function () {\n    // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n    var rowNode = this.displayedGroup;\n    rowNode.setExpanded(!rowNode.expanded);\n  };\n\n  GroupCellRenderer.prototype.isExpandable = function () {\n    var rowNode = this.params.node;\n    var reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;\n    return this.draggedFromHideOpenParents || rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;\n  };\n\n  GroupCellRenderer.prototype.showExpandAndContractIcons = function () {\n    var rowNode = this.params.node;\n\n    if (this.isExpandable()) {\n      // if expandable, show one based on expand state.\n      // if we were dragged down, means our parent is always expanded\n      var expanded = this.draggedFromHideOpenParents ? true : rowNode.expanded;\n\n      _.setDisplayed(this.eContracted, !expanded);\n\n      _.setDisplayed(this.eExpanded, expanded);\n    } else {\n      // it not expandable, show neither\n      _.setDisplayed(this.eExpanded, false);\n\n      _.setDisplayed(this.eContracted, false);\n    }\n\n    var displayedGroup = this.displayedGroup; // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n\n    var pivotModeAndLeafGroup = this.columnController.isPivotMode() && displayedGroup.leafGroup;\n    var notExpandable = !displayedGroup.isExpandable();\n    var addLeafIndentClass = displayedGroup.footer || notExpandable || pivotModeAndLeafGroup;\n    this.addOrRemoveCssClass('ag-row-group', !addLeafIndentClass);\n    this.addOrRemoveCssClass('ag-row-group-leaf-indent', addLeafIndentClass);\n  }; // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to have public here instead of private or protected\n\n\n  GroupCellRenderer.prototype.destroy = function () {\n    this.getContext().destroyBean(this.innerCellRenderer);\n\n    _super.prototype.destroy.call(this);\n  };\n\n  GroupCellRenderer.prototype.refresh = function () {\n    return false;\n  };\n\n  GroupCellRenderer.TEMPLATE = '<span class=\"ag-cell-wrapper\">' + '<span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>' + '<span class=\"ag-group-contracted\" ref=\"eContracted\"></span>' + '<span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>' + '<span class=\"ag-group-value\" ref=\"eValue\"></span>' + '<span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>' + '</span>';\n\n  __decorate([Autowired('gridOptionsWrapper')], GroupCellRenderer.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('expressionService')], GroupCellRenderer.prototype, \"expressionService\", void 0);\n\n  __decorate([Autowired('valueFormatterService')], GroupCellRenderer.prototype, \"valueFormatterService\", void 0);\n\n  __decorate([Autowired('columnController')], GroupCellRenderer.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('userComponentFactory')], GroupCellRenderer.prototype, \"userComponentFactory\", void 0);\n\n  __decorate([RefSelector('eExpanded')], GroupCellRenderer.prototype, \"eExpanded\", void 0);\n\n  __decorate([RefSelector('eContracted')], GroupCellRenderer.prototype, \"eContracted\", void 0);\n\n  __decorate([RefSelector('eCheckbox')], GroupCellRenderer.prototype, \"eCheckbox\", void 0);\n\n  __decorate([RefSelector('eValue')], GroupCellRenderer.prototype, \"eValue\", void 0);\n\n  __decorate([RefSelector('eChildCount')], GroupCellRenderer.prototype, \"eChildCount\", void 0);\n\n  return GroupCellRenderer;\n}(Component);\n\nexport { GroupCellRenderer };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/rendering/cellRenderers/groupCellRenderer.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Constants","Autowired","Component","RowNode","CheckboxSelectionComponent","RefSelector","ComponentSource","_","GroupCellRenderer","_super","call","TEMPLATE","init","params","gridOptionsWrapper","isGroupIncludeTotalFooter","assignBlankValueToGroupFooterCell","embeddedRowMismatch","isEmbeddedRowMismatch","nullValue","value","skipCell","isGroupIncludeFooter","isGroupHideOpenParents","node","footer","showRowGroup","colDef","rowGroupColumnId","rowGroupColumn","getColId","cellIsBlank","setupDragOpenParents","addExpandAndContract","addCheckboxIfNeeded","addValueElement","setupIndent","level","fullWidth","isEmbedFullWidthRows","pinnedLeftCell","pinned","PINNED_LEFT","pinnedRightCell","PINNED_RIGHT","bodyCell","isEnableRtl","columnController","isPinningLeft","setIndent","rowNode","paddingCount","uiLevel","userProvidedPaddingPixelsTheDeprecatedWay","padding","setPaddingDeprecatedWay","indentClass","removeCssClass","addCssClass","doOnce","console","warn","paddingPx","eGui","getGui","paddingSide","style","suppressPadding","addManagedListener","EVENT_UI_LEVEL_CHANGED","bind","displayedGroup","createFooterCell","hasChildren","get","createGroupCell","addChildCount","createLeafCell","footerValueGetter","footerValue","paramsClone","cloneObject","expressionService","evaluate","eValue","innerHTML","_this","columnToUse","column","groupName","valueFormatted","valueFormatterService","formatValue","scope","rendererPromise","useFullWidth","useInnerRenderer","cellRendererParams","getColDef","then","innerCellRenderer","groupCellRendererParams","groupedColumnDef","cellRendererPromise","groupInnerRendererClass","userComponentFactory","lookupComponentClassDef","component","source","DEFAULT","newInnerCellRenderer","groupColumnRendererClass","newCellRenderer","rendererToUse","innerText","bindCellRendererToHtmlElement","newFullWidthGroupRowInnerCellRenderer","suppressCount","EVENT_ALL_CHILDREN_COUNT_CHANGED","updateChildCount","allChildrenCount","eChildCount","exists","isUserWantsSelected","paramsCheckbox","checkbox","checkboxNeeded","rowPinned","detail","cbSelectionComponent_1","getContext","createBean","eCheckbox","appendChild","addDestroyFunc","destroyBean","addOrRemoveCssClass","eGroupCell","eGridCell","eExpandedIcon","createIconNoSpan","eContractedIcon","eExpanded","eContracted","onExpandClicked","onKeyDown","EVENT_EXPANDED_CHANGED","showExpandAndContractIcons","onRowNodeIsExpandableChanged","EVENT_MASTER_CHANGED","isEnableGroupEdit","isExpandable","suppressDoubleClickExpand","onCellDblClicked","event","enterKeyPressed","isKeyPressed","KEY_ENTER","suppressEnterExpand","cellEditable","isCellEditable","preventDefault","onExpandOrContract","draggedFromHideOpenParents","isRowGroupDisplayed","getId","pointer","parent","missing","mouseEvent","isStopPropagationForAgGrid","stopPropagationForAgGrid","targetIsExpandIcon","isElementInEventPath","setExpanded","expanded","reducedLeafNode","isPivotMode","leafGroup","setDisplayed","pivotModeAndLeafGroup","notExpandable","addLeafIndentClass","destroy","refresh"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Constants } from \"../../constants\";\nimport { Autowired } from \"../../context/context\";\nimport { Component } from \"../../widgets/component\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { ComponentSource } from \"../../components/framework/userComponentFactory\";\nimport { _ } from \"../../utils\";\nvar GroupCellRenderer = /** @class */ (function (_super) {\n    __extends(GroupCellRenderer, _super);\n    function GroupCellRenderer() {\n        return _super.call(this, GroupCellRenderer.TEMPLATE) || this;\n    }\n    GroupCellRenderer.prototype.init = function (params) {\n        this.params = params;\n        if (this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {\n            this.assignBlankValueToGroupFooterCell(params);\n        }\n        var embeddedRowMismatch = this.isEmbeddedRowMismatch();\n        // This allows for empty strings to appear as groups since\n        // it will only return for null or undefined.\n        var nullValue = params.value == null;\n        var skipCell = false;\n        // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true\n        // we should only display the groupCellRenderer if the current column is the rowGroupedColumn\n        if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            var node = params.node;\n            if (node.footer) {\n                var showRowGroup = params.colDef && params.colDef.showRowGroup;\n                var rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();\n                skipCell = showRowGroup !== rowGroupColumnId;\n            }\n        }\n        this.cellIsBlank = embeddedRowMismatch || nullValue || skipCell;\n        if (this.cellIsBlank) {\n            return;\n        }\n        this.setupDragOpenParents();\n        this.addExpandAndContract();\n        this.addCheckboxIfNeeded();\n        this.addValueElement();\n        this.setupIndent();\n    };\n    GroupCellRenderer.prototype.assignBlankValueToGroupFooterCell = function (params) {\n        // this is not ideal, but it was the only way we could get footer working for the root node\n        if (!params.value && params.node.level == -1) {\n            params.value = '';\n        }\n    };\n    // if we are doing embedded full width rows, we only show the renderer when\n    // in the body, or if pinning in the pinned section, or if pinning and RTL,\n    // in the right section. otherwise we would have the cell repeated in each section.\n    GroupCellRenderer.prototype.isEmbeddedRowMismatch = function () {\n        if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) {\n            return false;\n        }\n        var pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;\n        var pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;\n        var bodyCell = !pinnedLeftCell && !pinnedRightCell;\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            if (this.columnController.isPinningLeft()) {\n                return !pinnedRightCell;\n            }\n            return !bodyCell;\n        }\n        if (this.columnController.isPinningLeft()) {\n            return !pinnedLeftCell;\n        }\n        return !bodyCell;\n    };\n    GroupCellRenderer.prototype.setIndent = function () {\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        var params = this.params;\n        var rowNode = params.node;\n        var paddingCount = rowNode.uiLevel;\n        var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;\n        if (userProvidedPaddingPixelsTheDeprecatedWay) {\n            this.setPaddingDeprecatedWay(paddingCount, params.padding);\n            return;\n        }\n        if (this.indentClass) {\n            this.removeCssClass(this.indentClass);\n        }\n        this.indentClass = 'ag-row-group-indent-' + paddingCount;\n        this.addCssClass(this.indentClass);\n    };\n    GroupCellRenderer.prototype.setPaddingDeprecatedWay = function (paddingCount, padding) {\n        _.doOnce(function () { return console.warn('ag-Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the ag-Grid documentation page for Themes, in particular the property $row-group-indent-size.'); }, 'groupCellRenderer->doDeprecatedWay');\n        var paddingPx = paddingCount * padding;\n        var eGui = this.getGui();\n        var paddingSide = this.gridOptionsWrapper.isEnableRtl() ? 'paddingRight' : 'paddingLeft';\n        eGui.style[paddingSide] = paddingPx + \"px\";\n    };\n    GroupCellRenderer.prototype.setupIndent = function () {\n        // only do this if an indent - as this overwrites the padding that\n        // the theme set, which will make things look 'not aligned' for the\n        // first group level.\n        var node = this.params.node;\n        var suppressPadding = this.params.suppressPadding;\n        if (!suppressPadding) {\n            this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));\n            this.setIndent();\n        }\n    };\n    GroupCellRenderer.prototype.addValueElement = function () {\n        var params = this.params;\n        var rowNode = this.displayedGroup;\n        if (rowNode.footer) {\n            this.createFooterCell();\n        }\n        else if (rowNode.hasChildren() ||\n            _.get(params.colDef, 'cellRendererParams.innerRenderer', null) ||\n            _.get(params.colDef, 'cellRendererParams.innerRendererFramework', null)) {\n            this.createGroupCell();\n            if (rowNode.hasChildren()) {\n                this.addChildCount();\n            }\n        }\n        else {\n            this.createLeafCell();\n        }\n    };\n    GroupCellRenderer.prototype.createFooterCell = function () {\n        var footerValueGetter = this.params.footerValueGetter;\n        var footerValue;\n        if (footerValueGetter) {\n            // params is same as we were given, except we set the value as the item to display\n            var paramsClone = _.cloneObject(this.params);\n            paramsClone.value = this.params.value;\n            if (typeof footerValueGetter === 'function') {\n                footerValue = footerValueGetter(paramsClone);\n            }\n            else if (typeof footerValueGetter === 'string') {\n                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n            }\n            else {\n                console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');\n            }\n        }\n        else {\n            footerValue = 'Total ' + this.params.value;\n        }\n        this.eValue.innerHTML = footerValue;\n    };\n    GroupCellRenderer.prototype.createGroupCell = function () {\n        var _this = this;\n        var params = this.params;\n        var rowGroupColumn = this.displayedGroup.rowGroupColumn;\n        // we try and use the cellRenderer of the column used for the grouping if we can\n        var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;\n        var groupName = this.params.value;\n        var valueFormatted = columnToUse ?\n            this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;\n        params.valueFormatted = valueFormatted;\n        var rendererPromise;\n        rendererPromise = params.fullWidth\n            ? this.useFullWidth(params)\n            : this.useInnerRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), params);\n        // retain a reference to the created renderer - we'll use this later for cleanup (in destroy)\n        if (rendererPromise) {\n            rendererPromise.then(function (value) {\n                _this.innerCellRenderer = value;\n            });\n        }\n    };\n    GroupCellRenderer.prototype.useInnerRenderer = function (groupCellRendererParams, groupedColumnDef, // the column this group row is for, eg 'Country'\n    params) {\n        var _this = this;\n        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n        // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n        // cell renderer for each rating group row.\n        //\n        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n        // of the grouped columns.\n        //\n        // so we check and use in the following order:\n        //\n        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n        // 2) groupedColDef.cellRenderer of the grouped column\n        // 3) groupedColDef.cellRendererParams.innerRenderer\n        var cellRendererPromise = null;\n        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n        var groupInnerRendererClass = this.userComponentFactory\n            .lookupComponentClassDef(groupCellRendererParams, \"innerRenderer\");\n        if (groupInnerRendererClass && groupInnerRendererClass.component != null\n            && groupInnerRendererClass.source != ComponentSource.DEFAULT) {\n            // use the renderer defined in cellRendererParams.innerRenderer\n            cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupCellRendererParams, params);\n        }\n        else {\n            // otherwise see if we can use the cellRenderer of the column we are grouping by\n            var groupColumnRendererClass = this.userComponentFactory\n                .lookupComponentClassDef(groupedColumnDef, \"cellRenderer\");\n            if (groupColumnRendererClass &&\n                groupColumnRendererClass.source != ComponentSource.DEFAULT) {\n                // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n                cellRendererPromise = this.userComponentFactory.newCellRenderer(groupedColumnDef, params);\n            }\n            else if (groupColumnRendererClass &&\n                groupColumnRendererClass.source == ComponentSource.DEFAULT &&\n                (_.get(groupedColumnDef, 'cellRendererParams.innerRenderer', null))) {\n                // EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'\n                // AND HAS A INNER CELL RENDERER\n                cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupedColumnDef.cellRendererParams, params);\n            }\n            else {\n                // This forces the retrieval of the default plain cellRenderer that just renders the values.\n                cellRendererPromise = this.userComponentFactory.newCellRenderer({}, params);\n            }\n        }\n        if (cellRendererPromise != null) {\n            cellRendererPromise.then(function (rendererToUse) {\n                if (rendererToUse == null) {\n                    _this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n                    return;\n                }\n                _.bindCellRendererToHtmlElement(cellRendererPromise, _this.eValue);\n            });\n        }\n        else {\n            this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n        }\n        return cellRendererPromise;\n    };\n    GroupCellRenderer.prototype.useFullWidth = function (params) {\n        var cellRendererPromise = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer(params);\n        if (cellRendererPromise != null) {\n            _.bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);\n        }\n        else {\n            this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n        }\n        return cellRendererPromise;\n    };\n    GroupCellRenderer.prototype.addChildCount = function () {\n        // only include the child count if it's included, eg if user doing custom aggregation,\n        // then this could be left out, or set to -1, ie no child count\n        if (this.params.suppressCount) {\n            return;\n        }\n        this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));\n        // filtering changes the child count, so need to cater for it\n        this.updateChildCount();\n    };\n    GroupCellRenderer.prototype.updateChildCount = function () {\n        var allChildrenCount = this.displayedGroup.allChildrenCount;\n        this.eChildCount.innerHTML = allChildrenCount >= 0 ? \"(\" + allChildrenCount + \")\" : \"\";\n    };\n    GroupCellRenderer.prototype.createLeafCell = function () {\n        if (_.exists(this.params.value)) {\n            this.eValue.innerText = this.params.valueFormatted ? this.params.valueFormatted : this.params.value;\n        }\n    };\n    GroupCellRenderer.prototype.isUserWantsSelected = function () {\n        var paramsCheckbox = this.params.checkbox;\n        if (typeof paramsCheckbox === 'function') {\n            return paramsCheckbox(this.params);\n        }\n        return paramsCheckbox === true;\n    };\n    GroupCellRenderer.prototype.addCheckboxIfNeeded = function () {\n        var _this = this;\n        var rowNode = this.displayedGroup;\n        var checkboxNeeded = this.isUserWantsSelected() &&\n            // footers cannot be selected\n            !rowNode.footer &&\n            // pinned rows cannot be selected\n            !rowNode.rowPinned &&\n            // details cannot be selected\n            !rowNode.detail;\n        if (checkboxNeeded) {\n            var cbSelectionComponent_1 = new CheckboxSelectionComponent();\n            this.getContext().createBean(cbSelectionComponent_1);\n            cbSelectionComponent_1.init({ rowNode: rowNode, column: this.params.column });\n            this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());\n            this.addDestroyFunc(function () { return _this.getContext().destroyBean(cbSelectionComponent_1); });\n        }\n        _.addOrRemoveCssClass(this.eCheckbox, 'ag-invisible', !checkboxNeeded);\n    };\n    GroupCellRenderer.prototype.addExpandAndContract = function () {\n        var params = this.params;\n        var eGroupCell = params.eGridCell;\n        var eExpandedIcon = _.createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);\n        var eContractedIcon = _.createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);\n        this.eExpanded.appendChild(eExpandedIcon);\n        this.eContracted.appendChild(eContractedIcon);\n        this.addManagedListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eContracted, 'click', this.onExpandClicked.bind(this));\n        // expand / contract as the user hits enter\n        this.addManagedListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));\n        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));\n        this.showExpandAndContractIcons();\n        // because we don't show the expand / contract when there are no children, we need to check every time\n        // the number of children change.\n        this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.onRowNodeIsExpandableChanged.bind(this));\n        this.addManagedListener(this.displayedGroup, RowNode.EVENT_MASTER_CHANGED, this.onRowNodeIsExpandableChanged.bind(this));\n        // if editing groups, then double click is to start editing\n        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {\n            this.addManagedListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));\n        }\n    };\n    GroupCellRenderer.prototype.onRowNodeIsExpandableChanged = function () {\n        // maybe if no children now, we should hide the expand / contract icons\n        this.showExpandAndContractIcons();\n        // if we have no children, this impacts the indent\n        this.setIndent();\n    };\n    GroupCellRenderer.prototype.onKeyDown = function (event) {\n        var enterKeyPressed = _.isKeyPressed(event, Constants.KEY_ENTER);\n        if (!enterKeyPressed || this.params.suppressEnterExpand) {\n            return;\n        }\n        var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n        if (cellEditable) {\n            return;\n        }\n        event.preventDefault();\n        this.onExpandOrContract();\n    };\n    GroupCellRenderer.prototype.setupDragOpenParents = function () {\n        var column = this.params.column;\n        var rowNode = this.params.node;\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            this.draggedFromHideOpenParents = false;\n        }\n        else if (!rowNode.hasChildren()) {\n            // if we are here, and we are not a group, then we must of been dragged down,\n            // as otherwise the cell would be blank, and if cell is blank, this method is never called.\n            this.draggedFromHideOpenParents = true;\n        }\n        else {\n            var rowGroupColumn = rowNode.rowGroupColumn;\n            if (rowGroupColumn) {\n                // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,\n                // then nothing was dragged down\n                this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());\n            }\n            else {\n                // the only way we can end up here (no column, but a group) is if we are at the root node,\n                // which only happens when 'groupIncludeTotalFooter' is true. here, we are never dragging\n                this.draggedFromHideOpenParents = false;\n            }\n        }\n        if (this.draggedFromHideOpenParents) {\n            var pointer = rowNode.parent;\n            while (true) {\n                if (_.missing(pointer)) {\n                    break;\n                }\n                if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n                    this.displayedGroup = pointer;\n                    break;\n                }\n                pointer = pointer.parent;\n            }\n        }\n        // if we didn't find a displayed group, set it to the row node\n        if (_.missing(this.displayedGroup)) {\n            this.displayedGroup = rowNode;\n        }\n    };\n    GroupCellRenderer.prototype.onExpandClicked = function (mouseEvent) {\n        if (_.isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n        // so if we expand a node, it does not also get selected.\n        _.stopPropagationForAgGrid(mouseEvent);\n        this.onExpandOrContract();\n    };\n    GroupCellRenderer.prototype.onCellDblClicked = function (mouseEvent) {\n        if (_.isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n        // we want to avoid acting on double click events on the expand / contract icon,\n        // as that icons already has expand / collapse functionality on it. otherwise if\n        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n        // is open->close->open, however double click should be open->close only.\n        var targetIsExpandIcon = _.isElementInEventPath(this.eExpanded, mouseEvent)\n            || _.isElementInEventPath(this.eContracted, mouseEvent);\n        if (!targetIsExpandIcon) {\n            this.onExpandOrContract();\n        }\n    };\n    GroupCellRenderer.prototype.onExpandOrContract = function () {\n        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n        var rowNode = this.displayedGroup;\n        rowNode.setExpanded(!rowNode.expanded);\n    };\n    GroupCellRenderer.prototype.isExpandable = function () {\n        var rowNode = this.params.node;\n        var reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;\n        return this.draggedFromHideOpenParents ||\n            (rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode);\n    };\n    GroupCellRenderer.prototype.showExpandAndContractIcons = function () {\n        var rowNode = this.params.node;\n        if (this.isExpandable()) {\n            // if expandable, show one based on expand state.\n            // if we were dragged down, means our parent is always expanded\n            var expanded = this.draggedFromHideOpenParents ? true : rowNode.expanded;\n            _.setDisplayed(this.eContracted, !expanded);\n            _.setDisplayed(this.eExpanded, expanded);\n        }\n        else {\n            // it not expandable, show neither\n            _.setDisplayed(this.eExpanded, false);\n            _.setDisplayed(this.eContracted, false);\n        }\n        var displayedGroup = this.displayedGroup;\n        // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n        var pivotModeAndLeafGroup = this.columnController.isPivotMode() && displayedGroup.leafGroup;\n        var notExpandable = !displayedGroup.isExpandable();\n        var addLeafIndentClass = displayedGroup.footer || notExpandable || pivotModeAndLeafGroup;\n        this.addOrRemoveCssClass('ag-row-group', !addLeafIndentClass);\n        this.addOrRemoveCssClass('ag-row-group-leaf-indent', addLeafIndentClass);\n    };\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to have public here instead of private or protected\n    GroupCellRenderer.prototype.destroy = function () {\n        this.getContext().destroyBean(this.innerCellRenderer);\n        _super.prototype.destroy.call(this);\n    };\n    GroupCellRenderer.prototype.refresh = function () {\n        return false;\n    };\n    GroupCellRenderer.TEMPLATE = '<span class=\"ag-cell-wrapper\">' +\n        '<span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>' +\n        '<span class=\"ag-group-contracted\" ref=\"eContracted\"></span>' +\n        '<span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>' +\n        '<span class=\"ag-group-value\" ref=\"eValue\"></span>' +\n        '<span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>' +\n        '</span>';\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], GroupCellRenderer.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('expressionService')\n    ], GroupCellRenderer.prototype, \"expressionService\", void 0);\n    __decorate([\n        Autowired('valueFormatterService')\n    ], GroupCellRenderer.prototype, \"valueFormatterService\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], GroupCellRenderer.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('userComponentFactory')\n    ], GroupCellRenderer.prototype, \"userComponentFactory\", void 0);\n    __decorate([\n        RefSelector('eExpanded')\n    ], GroupCellRenderer.prototype, \"eExpanded\", void 0);\n    __decorate([\n        RefSelector('eContracted')\n    ], GroupCellRenderer.prototype, \"eContracted\", void 0);\n    __decorate([\n        RefSelector('eCheckbox')\n    ], GroupCellRenderer.prototype, \"eCheckbox\", void 0);\n    __decorate([\n        RefSelector('eValue')\n    ], GroupCellRenderer.prototype, \"eValue\", void 0);\n    __decorate([\n        RefSelector('eChildCount')\n    ], GroupCellRenderer.prototype, \"eChildCount\", void 0);\n    return GroupCellRenderer;\n}(Component));\nexport { GroupCellRenderer };\n"]},"metadata":{},"sourceType":"module"}