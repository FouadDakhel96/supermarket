{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { ChartBuilder } from \"ag-charts-community\";\nimport { _ } from \"@ag-grid-community/core\";\nimport { PolarChartProxy } from \"./polarChartProxy\";\n\nvar DoughnutChartProxy =\n/** @class */\nfunction (_super) {\n  __extends(DoughnutChartProxy, _super);\n\n  function DoughnutChartProxy(params) {\n    var _this = _super.call(this, params) || this;\n\n    _this.initChartOptions();\n\n    _this.recreateChart();\n\n    return _this;\n  }\n\n  DoughnutChartProxy.prototype.createChart = function (options) {\n    return ChartBuilder.createDoughnutChart(this.chartProxyParams.parentElement, options || this.chartOptions);\n  };\n\n  DoughnutChartProxy.prototype.update = function (params) {\n    if (params.fields.length === 0) {\n      this.chart.removeAllSeries();\n      return;\n    }\n\n    var doughnutChart = this.chart;\n    var fieldIds = params.fields.map(function (f) {\n      return f.colId;\n    });\n    var seriesMap = {};\n    doughnutChart.series.forEach(function (series) {\n      var pieSeries = series;\n      var id = pieSeries.angleKey;\n\n      if (_.includes(fieldIds, id)) {\n        seriesMap[id] = pieSeries;\n      }\n    });\n    var seriesDefaults = this.chartOptions.seriesDefaults;\n\n    var _a = this.getPalette(),\n        fills = _a.fills,\n        strokes = _a.strokes;\n\n    var offset = 0;\n    params.fields.forEach(function (f, index) {\n      var existingSeries = seriesMap[f.colId];\n\n      var seriesOptions = __assign(__assign({}, seriesDefaults), {\n        type: \"pie\",\n        field: {\n          angleKey: f.colId\n        },\n        showInLegend: index === 0,\n        title: __assign(__assign({}, seriesDefaults.title), {\n          text: seriesDefaults.title.text || f.displayName\n        })\n      });\n\n      var calloutColors = seriesOptions.callout && seriesOptions.callout.colors;\n      var pieSeries = existingSeries || ChartBuilder.createSeries(seriesOptions);\n      pieSeries.angleName = f.displayName;\n      pieSeries.labelKey = params.category.id;\n      pieSeries.labelName = params.category.name;\n      pieSeries.data = params.data;\n      pieSeries.fills = fills;\n      pieSeries.strokes = strokes; // Normally all series provide legend items for every slice.\n      // For our use case, where all series have the same number of slices in the same order with the same labels\n      // (all of which can be different in other use cases) we don't want to show repeating labels in the legend,\n      // so we only show legend items for the first series, and then when the user toggles the slices of the\n      // first series in the legend, we programmatically toggle the corresponding slices of other series.\n\n      if (index === 0) {\n        pieSeries.toggleSeriesItem = function (itemId, enabled) {\n          if (doughnutChart) {\n            doughnutChart.series.forEach(function (series) {\n              series.seriesItemEnabled[itemId] = enabled;\n            });\n          }\n\n          pieSeries.scheduleData();\n        };\n      }\n\n      pieSeries.outerRadiusOffset = offset;\n      offset -= 20;\n      pieSeries.innerRadiusOffset = offset;\n      offset -= 20;\n\n      if (calloutColors) {\n        pieSeries.callout.colors = calloutColors;\n      }\n\n      if (!existingSeries) {\n        seriesMap[f.colId] = pieSeries;\n      }\n    }); // Because repaints are automatic, it's important to remove/add/update series at once,\n    // so that we don't get painted twice.\n\n    doughnutChart.series = _.values(seriesMap);\n  };\n\n  DoughnutChartProxy.prototype.getDefaultOptions = function () {\n    var strokes = this.getPredefinedPalette().strokes;\n    var options = this.getDefaultChartOptions();\n    var fontOptions = this.getDefaultFontOptions();\n    options.seriesDefaults = __assign(__assign({}, options.seriesDefaults), {\n      title: __assign(__assign({}, fontOptions), {\n        enabled: true,\n        fontSize: 12,\n        fontWeight: 'bold'\n      }),\n      callout: {\n        colors: strokes,\n        length: 10,\n        strokeWidth: 2\n      },\n      label: __assign(__assign({}, fontOptions), {\n        enabled: false,\n        offset: 3,\n        minRequiredAngle: 0\n      }),\n      tooltip: {\n        enabled: true\n      },\n      shadow: this.getDefaultDropShadowOptions()\n    });\n    return options;\n  };\n\n  return DoughnutChartProxy;\n}(PolarChartProxy);\n\nexport { DoughnutChartProxy };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/charts/dist/es6/chartAdaptor/chartComp/chartProxies/polar/doughnutChartProxy.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","ChartBuilder","_","PolarChartProxy","DoughnutChartProxy","_super","params","_this","initChartOptions","recreateChart","createChart","options","createDoughnutChart","chartProxyParams","parentElement","chartOptions","update","fields","chart","removeAllSeries","doughnutChart","fieldIds","map","f","colId","seriesMap","series","forEach","pieSeries","id","angleKey","includes","seriesDefaults","_a","getPalette","fills","strokes","offset","index","existingSeries","seriesOptions","type","field","showInLegend","title","text","displayName","calloutColors","callout","colors","createSeries","angleName","labelKey","category","labelName","name","data","toggleSeriesItem","itemId","enabled","seriesItemEnabled","scheduleData","outerRadiusOffset","innerRadiusOffset","values","getDefaultOptions","getPredefinedPalette","getDefaultChartOptions","fontOptions","getDefaultFontOptions","fontSize","fontWeight","strokeWidth","label","minRequiredAngle","tooltip","shadow","getDefaultDropShadowOptions"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ChartBuilder } from \"ag-charts-community\";\nimport { _ } from \"@ag-grid-community/core\";\nimport { PolarChartProxy } from \"./polarChartProxy\";\nvar DoughnutChartProxy = /** @class */ (function (_super) {\n    __extends(DoughnutChartProxy, _super);\n    function DoughnutChartProxy(params) {\n        var _this = _super.call(this, params) || this;\n        _this.initChartOptions();\n        _this.recreateChart();\n        return _this;\n    }\n    DoughnutChartProxy.prototype.createChart = function (options) {\n        return ChartBuilder.createDoughnutChart(this.chartProxyParams.parentElement, options || this.chartOptions);\n    };\n    DoughnutChartProxy.prototype.update = function (params) {\n        if (params.fields.length === 0) {\n            this.chart.removeAllSeries();\n            return;\n        }\n        var doughnutChart = this.chart;\n        var fieldIds = params.fields.map(function (f) { return f.colId; });\n        var seriesMap = {};\n        doughnutChart.series.forEach(function (series) {\n            var pieSeries = series;\n            var id = pieSeries.angleKey;\n            if (_.includes(fieldIds, id)) {\n                seriesMap[id] = pieSeries;\n            }\n        });\n        var seriesDefaults = this.chartOptions.seriesDefaults;\n        var _a = this.getPalette(), fills = _a.fills, strokes = _a.strokes;\n        var offset = 0;\n        params.fields.forEach(function (f, index) {\n            var existingSeries = seriesMap[f.colId];\n            var seriesOptions = __assign(__assign({}, seriesDefaults), { type: \"pie\", field: {\n                    angleKey: f.colId,\n                }, showInLegend: index === 0, title: __assign(__assign({}, seriesDefaults.title), { text: seriesDefaults.title.text || f.displayName }) });\n            var calloutColors = seriesOptions.callout && seriesOptions.callout.colors;\n            var pieSeries = existingSeries || ChartBuilder.createSeries(seriesOptions);\n            pieSeries.angleName = f.displayName;\n            pieSeries.labelKey = params.category.id;\n            pieSeries.labelName = params.category.name;\n            pieSeries.data = params.data;\n            pieSeries.fills = fills;\n            pieSeries.strokes = strokes;\n            // Normally all series provide legend items for every slice.\n            // For our use case, where all series have the same number of slices in the same order with the same labels\n            // (all of which can be different in other use cases) we don't want to show repeating labels in the legend,\n            // so we only show legend items for the first series, and then when the user toggles the slices of the\n            // first series in the legend, we programmatically toggle the corresponding slices of other series.\n            if (index === 0) {\n                pieSeries.toggleSeriesItem = function (itemId, enabled) {\n                    if (doughnutChart) {\n                        doughnutChart.series.forEach(function (series) {\n                            series.seriesItemEnabled[itemId] = enabled;\n                        });\n                    }\n                    pieSeries.scheduleData();\n                };\n            }\n            pieSeries.outerRadiusOffset = offset;\n            offset -= 20;\n            pieSeries.innerRadiusOffset = offset;\n            offset -= 20;\n            if (calloutColors) {\n                pieSeries.callout.colors = calloutColors;\n            }\n            if (!existingSeries) {\n                seriesMap[f.colId] = pieSeries;\n            }\n        });\n        // Because repaints are automatic, it's important to remove/add/update series at once,\n        // so that we don't get painted twice.\n        doughnutChart.series = _.values(seriesMap);\n    };\n    DoughnutChartProxy.prototype.getDefaultOptions = function () {\n        var strokes = this.getPredefinedPalette().strokes;\n        var options = this.getDefaultChartOptions();\n        var fontOptions = this.getDefaultFontOptions();\n        options.seriesDefaults = __assign(__assign({}, options.seriesDefaults), { title: __assign(__assign({}, fontOptions), { enabled: true, fontSize: 12, fontWeight: 'bold' }), callout: {\n                colors: strokes,\n                length: 10,\n                strokeWidth: 2,\n            }, label: __assign(__assign({}, fontOptions), { enabled: false, offset: 3, minRequiredAngle: 0 }), tooltip: {\n                enabled: true,\n            }, shadow: this.getDefaultDropShadowOptions() });\n        return options;\n    };\n    return DoughnutChartProxy;\n}(PolarChartProxy));\nexport { DoughnutChartProxy };\n"]},"metadata":{},"sourceType":"module"}