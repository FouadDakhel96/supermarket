{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _ } from \"../../utils\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { PreDestroy } from \"../../context/context\";\nimport { BeanStub } from \"../../context/beanStub\";\n\nvar RowNodeBlock =\n/** @class */\nfunction (_super) {\n  __extends(RowNodeBlock, _super);\n\n  function RowNodeBlock(blockNumber, rowNodeCacheParams) {\n    var _this = _super.call(this) || this;\n\n    _this.version = 0;\n    _this.state = RowNodeBlock.STATE_DIRTY;\n    _this.rowNodeCacheParams = rowNodeCacheParams;\n    _this.blockNumber = blockNumber; // we don't need to calculate these now, as the inputs don't change,\n    // however it makes the code easier to read if we work them out up front\n\n    _this.startRow = blockNumber * rowNodeCacheParams.blockSize;\n    _this.endRow = _this.startRow + rowNodeCacheParams.blockSize;\n    return _this;\n  }\n\n  RowNodeBlock.prototype.isAnyNodeOpen = function (rowCount) {\n    var result = false;\n    this.forEachNodeCallback(function (rowNode) {\n      if (rowNode.expanded) {\n        result = true;\n      }\n    }, rowCount);\n    return result;\n  };\n\n  RowNodeBlock.prototype.forEachNodeCallback = function (callback, rowCount) {\n    for (var rowIndex = this.startRow; rowIndex < this.endRow; rowIndex++) {\n      // we check against rowCount as this page may be the last one, and if it is, then\n      // the last rows are not part of the set\n      if (rowIndex < rowCount) {\n        var rowNode = this.getRowUsingLocalIndex(rowIndex);\n        callback(rowNode, rowIndex);\n      }\n    }\n  };\n\n  RowNodeBlock.prototype.forEachNode = function (callback, sequence, rowCount, deep) {\n    this.forEachNodeCallback(function (rowNode) {\n      callback(rowNode, sequence.next()); // this will only every happen for server side row model, as infinite\n      // row model doesn't have groups\n\n      if (deep && rowNode.childrenCache) {\n        rowNode.childrenCache.forEachNodeDeep(callback, sequence);\n      }\n    }, rowCount);\n  };\n\n  RowNodeBlock.prototype.forEachNodeDeep = function (callback, sequence, rowCount) {\n    this.forEachNode(callback, sequence, rowCount, true);\n  };\n\n  RowNodeBlock.prototype.forEachNodeShallow = function (callback, sequence, rowCount) {\n    this.forEachNode(callback, sequence, rowCount, false);\n  };\n\n  RowNodeBlock.prototype.getVersion = function () {\n    return this.version;\n  };\n\n  RowNodeBlock.prototype.getLastAccessed = function () {\n    return this.lastAccessed;\n  };\n\n  RowNodeBlock.prototype.getRowUsingLocalIndex = function (rowIndex, dontTouchLastAccessed) {\n    if (dontTouchLastAccessed === void 0) {\n      dontTouchLastAccessed = false;\n    }\n\n    if (!dontTouchLastAccessed) {\n      this.lastAccessed = this.rowNodeCacheParams.lastAccessedSequence.next();\n    }\n\n    var localIndex = rowIndex - this.startRow;\n    return this.rowNodes[localIndex];\n  };\n\n  RowNodeBlock.prototype.init = function (beans) {\n    this.beans = beans;\n    this.createRowNodes();\n  };\n\n  RowNodeBlock.prototype.getStartRow = function () {\n    return this.startRow;\n  };\n\n  RowNodeBlock.prototype.getEndRow = function () {\n    return this.endRow;\n  };\n\n  RowNodeBlock.prototype.getBlockNumber = function () {\n    return this.blockNumber;\n  };\n\n  RowNodeBlock.prototype.setDirty = function () {\n    // in case any current loads in progress, this will have their results ignored\n    this.version++;\n    this.state = RowNodeBlock.STATE_DIRTY;\n  };\n\n  RowNodeBlock.prototype.setDirtyAndPurge = function () {\n    this.setDirty();\n    this.rowNodes.forEach(function (rowNode) {\n      rowNode.setData(null);\n    });\n  };\n\n  RowNodeBlock.prototype.getState = function () {\n    return this.state;\n  };\n\n  RowNodeBlock.prototype.setRowNode = function (rowIndex, rowNode) {\n    var localIndex = rowIndex - this.startRow;\n    this.rowNodes[localIndex] = rowNode;\n  };\n\n  RowNodeBlock.prototype.setBlankRowNode = function (rowIndex) {\n    var localIndex = rowIndex - this.startRow;\n    var newRowNode = this.createBlankRowNode(rowIndex);\n    this.rowNodes[localIndex] = newRowNode;\n    return newRowNode;\n  };\n\n  RowNodeBlock.prototype.setNewData = function (rowIndex, dataItem) {\n    var newRowNode = this.setBlankRowNode(rowIndex);\n    this.setDataAndId(newRowNode, dataItem, this.startRow + rowIndex);\n    return newRowNode;\n  };\n\n  RowNodeBlock.prototype.createBlankRowNode = function (rowIndex) {\n    var rowNode = new RowNode();\n    this.beans.context.createBean(rowNode);\n    rowNode.setRowHeight(this.rowNodeCacheParams.rowHeight);\n    return rowNode;\n  }; // creates empty row nodes, data is missing as not loaded yet\n\n\n  RowNodeBlock.prototype.createRowNodes = function () {\n    this.rowNodes = [];\n\n    for (var i = 0; i < this.rowNodeCacheParams.blockSize; i++) {\n      var rowIndex = this.startRow + i;\n      var rowNode = this.createBlankRowNode(rowIndex);\n      this.rowNodes.push(rowNode);\n    }\n  };\n\n  RowNodeBlock.prototype.load = function () {\n    this.state = RowNodeBlock.STATE_LOADING;\n    this.loadFromDatasource();\n  };\n\n  RowNodeBlock.prototype.pageLoadFailed = function () {\n    this.state = RowNodeBlock.STATE_FAILED;\n    var event = {\n      type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n      success: false,\n      page: this,\n      lastRow: null\n    };\n    this.dispatchEvent(event);\n  };\n\n  RowNodeBlock.prototype.populateWithRowData = function (rows) {\n    var _this = this;\n\n    var rowNodesToRefresh = [];\n    this.rowNodes.forEach(function (rowNode, index) {\n      var data = rows[index];\n\n      if (rowNode.stub) {\n        rowNodesToRefresh.push(rowNode);\n      }\n\n      _this.setDataAndId(rowNode, data, _this.startRow + index);\n    });\n\n    if (rowNodesToRefresh.length > 0) {\n      this.beans.rowRenderer.redrawRows(rowNodesToRefresh);\n    }\n  };\n\n  RowNodeBlock.prototype.destroyRowNodes = function () {\n    var _this = this;\n\n    this.rowNodes.forEach(function (rowNode) {\n      if (rowNode.childrenCache) {\n        _this.destroyBean(rowNode.childrenCache);\n\n        rowNode.childrenCache = null;\n      } // this is needed, so row render knows to fade out the row, otherwise it\n      // sees row top is present, and thinks the row should be shown. maybe\n      // rowNode should have a flag on whether it is visible???\n\n\n      rowNode.clearRowTop();\n    });\n  };\n\n  RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {\n    // we need to check the version, in case there was an old request\n    // from the server that was sent before we refreshed the cache,\n    // if the load was done as a result of a cache refresh\n    if (version === this.version) {\n      this.state = RowNodeBlock.STATE_LOADED;\n      this.populateWithRowData(rows);\n    }\n\n    lastRow = _.cleanNumber(lastRow); // check here if lastRow should be set\n\n    var event = {\n      type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n      success: true,\n      page: this,\n      lastRow: lastRow\n    };\n    this.dispatchEvent(event);\n  };\n\n  RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';\n  RowNodeBlock.STATE_DIRTY = 'dirty';\n  RowNodeBlock.STATE_LOADING = 'loading';\n  RowNodeBlock.STATE_LOADED = 'loaded';\n  RowNodeBlock.STATE_FAILED = 'failed';\n\n  __decorate([PreDestroy], RowNodeBlock.prototype, \"destroyRowNodes\", null);\n\n  return RowNodeBlock;\n}(BeanStub);\n\nexport { RowNodeBlock };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/modules/rowNodeCache/rowNodeBlock.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","RowNode","PreDestroy","BeanStub","RowNodeBlock","_super","blockNumber","rowNodeCacheParams","_this","call","version","state","STATE_DIRTY","startRow","blockSize","endRow","isAnyNodeOpen","rowCount","result","forEachNodeCallback","rowNode","expanded","callback","rowIndex","getRowUsingLocalIndex","forEachNode","sequence","deep","next","childrenCache","forEachNodeDeep","forEachNodeShallow","getVersion","getLastAccessed","lastAccessed","dontTouchLastAccessed","lastAccessedSequence","localIndex","rowNodes","init","beans","createRowNodes","getStartRow","getEndRow","getBlockNumber","setDirty","setDirtyAndPurge","forEach","setData","getState","setRowNode","setBlankRowNode","newRowNode","createBlankRowNode","setNewData","dataItem","setDataAndId","context","createBean","setRowHeight","rowHeight","push","load","STATE_LOADING","loadFromDatasource","pageLoadFailed","STATE_FAILED","event","type","EVENT_LOAD_COMPLETE","success","page","lastRow","dispatchEvent","populateWithRowData","rows","rowNodesToRefresh","index","data","stub","rowRenderer","redrawRows","destroyRowNodes","destroyBean","clearRowTop","pageLoaded","STATE_LOADED","cleanNumber"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _ } from \"../../utils\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { PreDestroy } from \"../../context/context\";\nimport { BeanStub } from \"../../context/beanStub\";\nvar RowNodeBlock = /** @class */ (function (_super) {\n    __extends(RowNodeBlock, _super);\n    function RowNodeBlock(blockNumber, rowNodeCacheParams) {\n        var _this = _super.call(this) || this;\n        _this.version = 0;\n        _this.state = RowNodeBlock.STATE_DIRTY;\n        _this.rowNodeCacheParams = rowNodeCacheParams;\n        _this.blockNumber = blockNumber;\n        // we don't need to calculate these now, as the inputs don't change,\n        // however it makes the code easier to read if we work them out up front\n        _this.startRow = blockNumber * rowNodeCacheParams.blockSize;\n        _this.endRow = _this.startRow + rowNodeCacheParams.blockSize;\n        return _this;\n    }\n    RowNodeBlock.prototype.isAnyNodeOpen = function (rowCount) {\n        var result = false;\n        this.forEachNodeCallback(function (rowNode) {\n            if (rowNode.expanded) {\n                result = true;\n            }\n        }, rowCount);\n        return result;\n    };\n    RowNodeBlock.prototype.forEachNodeCallback = function (callback, rowCount) {\n        for (var rowIndex = this.startRow; rowIndex < this.endRow; rowIndex++) {\n            // we check against rowCount as this page may be the last one, and if it is, then\n            // the last rows are not part of the set\n            if (rowIndex < rowCount) {\n                var rowNode = this.getRowUsingLocalIndex(rowIndex);\n                callback(rowNode, rowIndex);\n            }\n        }\n    };\n    RowNodeBlock.prototype.forEachNode = function (callback, sequence, rowCount, deep) {\n        this.forEachNodeCallback(function (rowNode) {\n            callback(rowNode, sequence.next());\n            // this will only every happen for server side row model, as infinite\n            // row model doesn't have groups\n            if (deep && rowNode.childrenCache) {\n                rowNode.childrenCache.forEachNodeDeep(callback, sequence);\n            }\n        }, rowCount);\n    };\n    RowNodeBlock.prototype.forEachNodeDeep = function (callback, sequence, rowCount) {\n        this.forEachNode(callback, sequence, rowCount, true);\n    };\n    RowNodeBlock.prototype.forEachNodeShallow = function (callback, sequence, rowCount) {\n        this.forEachNode(callback, sequence, rowCount, false);\n    };\n    RowNodeBlock.prototype.getVersion = function () {\n        return this.version;\n    };\n    RowNodeBlock.prototype.getLastAccessed = function () {\n        return this.lastAccessed;\n    };\n    RowNodeBlock.prototype.getRowUsingLocalIndex = function (rowIndex, dontTouchLastAccessed) {\n        if (dontTouchLastAccessed === void 0) { dontTouchLastAccessed = false; }\n        if (!dontTouchLastAccessed) {\n            this.lastAccessed = this.rowNodeCacheParams.lastAccessedSequence.next();\n        }\n        var localIndex = rowIndex - this.startRow;\n        return this.rowNodes[localIndex];\n    };\n    RowNodeBlock.prototype.init = function (beans) {\n        this.beans = beans;\n        this.createRowNodes();\n    };\n    RowNodeBlock.prototype.getStartRow = function () {\n        return this.startRow;\n    };\n    RowNodeBlock.prototype.getEndRow = function () {\n        return this.endRow;\n    };\n    RowNodeBlock.prototype.getBlockNumber = function () {\n        return this.blockNumber;\n    };\n    RowNodeBlock.prototype.setDirty = function () {\n        // in case any current loads in progress, this will have their results ignored\n        this.version++;\n        this.state = RowNodeBlock.STATE_DIRTY;\n    };\n    RowNodeBlock.prototype.setDirtyAndPurge = function () {\n        this.setDirty();\n        this.rowNodes.forEach(function (rowNode) {\n            rowNode.setData(null);\n        });\n    };\n    RowNodeBlock.prototype.getState = function () {\n        return this.state;\n    };\n    RowNodeBlock.prototype.setRowNode = function (rowIndex, rowNode) {\n        var localIndex = rowIndex - this.startRow;\n        this.rowNodes[localIndex] = rowNode;\n    };\n    RowNodeBlock.prototype.setBlankRowNode = function (rowIndex) {\n        var localIndex = rowIndex - this.startRow;\n        var newRowNode = this.createBlankRowNode(rowIndex);\n        this.rowNodes[localIndex] = newRowNode;\n        return newRowNode;\n    };\n    RowNodeBlock.prototype.setNewData = function (rowIndex, dataItem) {\n        var newRowNode = this.setBlankRowNode(rowIndex);\n        this.setDataAndId(newRowNode, dataItem, this.startRow + rowIndex);\n        return newRowNode;\n    };\n    RowNodeBlock.prototype.createBlankRowNode = function (rowIndex) {\n        var rowNode = new RowNode();\n        this.beans.context.createBean(rowNode);\n        rowNode.setRowHeight(this.rowNodeCacheParams.rowHeight);\n        return rowNode;\n    };\n    // creates empty row nodes, data is missing as not loaded yet\n    RowNodeBlock.prototype.createRowNodes = function () {\n        this.rowNodes = [];\n        for (var i = 0; i < this.rowNodeCacheParams.blockSize; i++) {\n            var rowIndex = this.startRow + i;\n            var rowNode = this.createBlankRowNode(rowIndex);\n            this.rowNodes.push(rowNode);\n        }\n    };\n    RowNodeBlock.prototype.load = function () {\n        this.state = RowNodeBlock.STATE_LOADING;\n        this.loadFromDatasource();\n    };\n    RowNodeBlock.prototype.pageLoadFailed = function () {\n        this.state = RowNodeBlock.STATE_FAILED;\n        var event = {\n            type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n            success: false,\n            page: this,\n            lastRow: null\n        };\n        this.dispatchEvent(event);\n    };\n    RowNodeBlock.prototype.populateWithRowData = function (rows) {\n        var _this = this;\n        var rowNodesToRefresh = [];\n        this.rowNodes.forEach(function (rowNode, index) {\n            var data = rows[index];\n            if (rowNode.stub) {\n                rowNodesToRefresh.push(rowNode);\n            }\n            _this.setDataAndId(rowNode, data, _this.startRow + index);\n        });\n        if (rowNodesToRefresh.length > 0) {\n            this.beans.rowRenderer.redrawRows(rowNodesToRefresh);\n        }\n    };\n    RowNodeBlock.prototype.destroyRowNodes = function () {\n        var _this = this;\n        this.rowNodes.forEach(function (rowNode) {\n            if (rowNode.childrenCache) {\n                _this.destroyBean(rowNode.childrenCache);\n                rowNode.childrenCache = null;\n            }\n            // this is needed, so row render knows to fade out the row, otherwise it\n            // sees row top is present, and thinks the row should be shown. maybe\n            // rowNode should have a flag on whether it is visible???\n            rowNode.clearRowTop();\n        });\n    };\n    RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {\n        // we need to check the version, in case there was an old request\n        // from the server that was sent before we refreshed the cache,\n        // if the load was done as a result of a cache refresh\n        if (version === this.version) {\n            this.state = RowNodeBlock.STATE_LOADED;\n            this.populateWithRowData(rows);\n        }\n        lastRow = _.cleanNumber(lastRow);\n        // check here if lastRow should be set\n        var event = {\n            type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n            success: true,\n            page: this,\n            lastRow: lastRow\n        };\n        this.dispatchEvent(event);\n    };\n    RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';\n    RowNodeBlock.STATE_DIRTY = 'dirty';\n    RowNodeBlock.STATE_LOADING = 'loading';\n    RowNodeBlock.STATE_LOADED = 'loaded';\n    RowNodeBlock.STATE_FAILED = 'failed';\n    __decorate([\n        PreDestroy\n    ], RowNodeBlock.prototype, \"destroyRowNodes\", null);\n    return RowNodeBlock;\n}(BeanStub));\nexport { RowNodeBlock };\n"]},"metadata":{},"sourceType":"module"}