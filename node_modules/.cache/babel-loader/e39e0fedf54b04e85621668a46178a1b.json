{"ast":null,"code":"import { Constants, Promise, TextFilter, _, EventService } from '@ag-grid-community/core';\nexport var SetFilterModelValuesType;\n\n(function (SetFilterModelValuesType) {\n  SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_LIST\"] = 0] = \"PROVIDED_LIST\";\n  SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_CALLBACK\"] = 1] = \"PROVIDED_CALLBACK\";\n  SetFilterModelValuesType[SetFilterModelValuesType[\"TAKEN_FROM_GRID_VALUES\"] = 2] = \"TAKEN_FROM_GRID_VALUES\";\n})(SetFilterModelValuesType || (SetFilterModelValuesType = {}));\n\nvar SetValueModel =\n/** @class */\nfunction () {\n  function SetValueModel(rowModel, colDef, column, valueGetter, doesRowPassOtherFilters, suppressSorting, setIsLoading, valueFormatterService, translate) {\n    var _this = this;\n\n    this.colDef = colDef;\n    this.column = column;\n    this.valueGetter = valueGetter;\n    this.doesRowPassOtherFilters = doesRowPassOtherFilters;\n    this.suppressSorting = suppressSorting;\n    this.setIsLoading = setIsLoading;\n    this.valueFormatterService = valueFormatterService;\n    this.translate = translate;\n    this.localEventService = new EventService();\n    this.miniFilterText = null; // The lookup for a set is much faster than the lookup for an array, especially when the length of the array is\n    // thousands of records long, so where lookups are important we use a set.\n\n    /** Values provided to the filter for use. */\n\n    this.providedValues = null;\n    /** All possible values for the filter, sorted if required. */\n\n    this.allValues = [];\n    /** Remaining values when filters from other columns have been applied. */\n\n    this.availableValues = new Set();\n    /** All values that are currently displayed, after the mini-filter has been applied. */\n\n    this.displayedValues = [];\n    /** Values that have been selected for this filter. */\n\n    this.selectedValues = new Set();\n\n    if (rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      this.clientSideRowModel = rowModel;\n    }\n\n    this.filterParams = this.colDef.filterParams || {};\n    this.formatter = this.filterParams.textFormatter || TextFilter.DEFAULT_FORMATTER;\n    var values = this.filterParams.values;\n\n    if (values == null) {\n      this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    } else {\n      this.valuesType = Array.isArray(values) ? SetFilterModelValuesType.PROVIDED_LIST : SetFilterModelValuesType.PROVIDED_CALLBACK;\n      this.providedValues = values;\n    }\n\n    this.updateAllValues().then(function (values) {\n      return _this.resetSelectionState(values);\n    });\n  }\n\n  SetValueModel.prototype.addEventListener = function (eventType, listener, async) {\n    this.localEventService.addEventListener(eventType, listener, async);\n  };\n\n  SetValueModel.prototype.removeEventListener = function (eventType, listener, async) {\n    this.localEventService.removeEventListener(eventType, listener, async);\n  };\n  /**\n   * Re-fetches the values used in the filter from the value source.\n   * If keepSelection is false, the filter selection will be reset to everything selected,\n   * otherwise the current selection will be preserved.\n   */\n\n\n  SetValueModel.prototype.refreshValues = function (keepSelection) {\n    if (keepSelection === void 0) {\n      keepSelection = true;\n    }\n\n    var currentModel = this.getModel();\n    this.updateAllValues(); // ensure model is updated for new values\n\n    return this.setModel(keepSelection ? currentModel : null);\n  };\n  /**\n   * Overrides the current values being used for the set filter.\n   * If keepSelection is false, the filter selection will be reset to everything selected,\n   * otherwise the current selection will be preserved.\n   */\n\n\n  SetValueModel.prototype.overrideValues = function (valuesToUse, keepSelection) {\n    var _this = this;\n\n    if (keepSelection === void 0) {\n      keepSelection = true;\n    }\n\n    return new Promise(function (resolve) {\n      // wait for any existing values to be populated before overriding\n      _this.allValuesPromise.then(function () {\n        _this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;\n        _this.providedValues = valuesToUse;\n\n        _this.refreshValues(keepSelection).then(function () {\n          return resolve();\n        });\n      });\n    });\n  };\n\n  SetValueModel.prototype.refreshAfterAnyFilterChanged = function () {\n    var _this = this;\n\n    if (this.showAvailableOnly()) {\n      this.allValuesPromise.then(function (values) {\n        return _this.updateAvailableValues(values);\n      });\n    }\n  };\n\n  SetValueModel.prototype.updateAllValues = function () {\n    var _this = this;\n\n    this.allValuesPromise = new Promise(function (resolve) {\n      switch (_this.valuesType) {\n        case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:\n        case SetFilterModelValuesType.PROVIDED_LIST:\n          {\n            var values = _this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES ? _this.getValuesFromRows(false) : _.toStrings(_this.providedValues);\n\n            var sortedValues = _this.sortValues(values);\n\n            _this.allValues = sortedValues;\n            resolve(sortedValues);\n            break;\n          }\n\n        case SetFilterModelValuesType.PROVIDED_CALLBACK:\n          {\n            _this.setIsLoading(true);\n\n            var callback_1 = _this.providedValues;\n            var params_1 = {\n              success: function success(values) {\n                var processedValues = _.toStrings(values);\n\n                _this.setIsLoading(false);\n\n                var sortedValues = _this.sortValues(processedValues);\n\n                _this.allValues = sortedValues;\n                resolve(sortedValues);\n              },\n              colDef: _this.colDef\n            };\n            window.setTimeout(function () {\n              return callback_1(params_1);\n            }, 0);\n            break;\n          }\n\n        default:\n          throw new Error('Unrecognised valuesType');\n      }\n    });\n    this.allValuesPromise.then(function (values) {\n      return _this.updateAvailableValues(values);\n    });\n    return this.allValuesPromise;\n  };\n\n  SetValueModel.prototype.setValuesType = function (value) {\n    this.valuesType = value;\n  };\n\n  SetValueModel.prototype.getValuesType = function () {\n    return this.valuesType;\n  };\n\n  SetValueModel.prototype.isValueAvailable = function (value) {\n    return this.availableValues.has(value);\n  };\n\n  SetValueModel.prototype.showAvailableOnly = function () {\n    return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES && !this.filterParams.suppressRemoveEntries;\n  };\n\n  SetValueModel.prototype.updateAvailableValues = function (allValues) {\n    var availableValues = this.showAvailableOnly() ? this.sortValues(this.getValuesFromRows(true)) : allValues;\n    this.availableValues = _.convertToSet(availableValues);\n    this.localEventService.dispatchEvent({\n      type: SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED\n    });\n    this.updateDisplayedValues();\n  };\n\n  SetValueModel.prototype.sortValues = function (values) {\n    if (this.suppressSorting) {\n      return values;\n    }\n\n    var comparator = this.filterParams.comparator || this.colDef.comparator || _.defaultComparator;\n\n    if (!this.filterParams.excelMode || values.indexOf(null) < 0) {\n      return values.sort(comparator);\n    } // ensure the blank value always appears last\n\n\n    return _.filter(values, function (v) {\n      return v != null;\n    }).sort(comparator).concat(null);\n  };\n\n  SetValueModel.prototype.getValuesFromRows = function (removeUnavailableValues) {\n    var _this = this;\n\n    if (removeUnavailableValues === void 0) {\n      removeUnavailableValues = false;\n    }\n\n    if (!this.clientSideRowModel) {\n      console.error('ag-Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');\n      return [];\n    }\n\n    var values = new Set();\n    var keyCreator = this.colDef.keyCreator;\n    this.clientSideRowModel.forEachLeafNode(function (node) {\n      // only pull values from rows that have data. this means we skip filler group nodes.\n      if (!node.data || removeUnavailableValues && !_this.doesRowPassOtherFilters(node)) {\n        return;\n      }\n\n      var value = _this.valueGetter(node);\n\n      if (keyCreator) {\n        value = keyCreator({\n          value: value\n        });\n      }\n\n      value = _.makeNull(value);\n\n      if (value != null && Array.isArray(value)) {\n        _.forEach(value, function (x) {\n          var formatted = _.toStringOrNull(_.makeNull(x));\n\n          values.add(formatted);\n        });\n      } else {\n        values.add(_.toStringOrNull(value));\n      }\n    });\n    return _.values(values);\n  };\n  /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */\n\n\n  SetValueModel.prototype.setMiniFilter = function (value) {\n    value = _.makeNull(value);\n\n    if (this.miniFilterText === value) {\n      //do nothing if filter has not changed\n      return false;\n    }\n\n    this.miniFilterText = value;\n    this.updateDisplayedValues();\n    return true;\n  };\n\n  SetValueModel.prototype.getMiniFilter = function () {\n    return this.miniFilterText;\n  };\n\n  SetValueModel.prototype.updateDisplayedValues = function () {\n    var _this = this; // if no filter, just display all available values\n\n\n    if (this.miniFilterText == null) {\n      this.displayedValues = _.values(this.availableValues);\n      return;\n    } // if filter present, we filter down the list\n\n\n    this.displayedValues = []; // to allow for case insensitive searches, upper-case both filter text and value\n\n    var formattedFilterText = this.formatter(this.miniFilterText).toUpperCase();\n\n    var matchesFilter = function matchesFilter(valueToCheck) {\n      return valueToCheck != null && valueToCheck.toUpperCase().indexOf(formattedFilterText) >= 0;\n    };\n\n    this.availableValues.forEach(function (value) {\n      if (value == null) {\n        if (_this.filterParams.excelMode && matchesFilter(\"(\" + _this.translate('blanks') + \")\")) {\n          _this.displayedValues.push(value);\n        }\n      } else {\n        var textFormatterValue = _this.formatter(value); // TODO: should this be applying the text formatter *after* the value formatter?\n\n\n        var valueFormatterValue = _this.valueFormatterService.formatValue(_this.column, null, null, textFormatterValue);\n\n        if (matchesFilter(textFormatterValue) || matchesFilter(valueFormatterValue)) {\n          _this.displayedValues.push(value);\n        }\n      }\n    });\n  };\n\n  SetValueModel.prototype.getDisplayedValueCount = function () {\n    return this.displayedValues.length;\n  };\n\n  SetValueModel.prototype.getDisplayedValue = function (index) {\n    return this.displayedValues[index];\n  };\n\n  SetValueModel.prototype.isFilterActive = function () {\n    return this.filterParams.defaultToNothingSelected ? this.selectedValues.size > 0 : this.allValues.length !== this.selectedValues.size;\n  };\n\n  SetValueModel.prototype.getUniqueValueCount = function () {\n    return this.allValues.length;\n  };\n\n  SetValueModel.prototype.getUniqueValue = function (index) {\n    return this.allValues[index];\n  };\n\n  SetValueModel.prototype.getValues = function () {\n    return this.allValues.slice();\n  };\n\n  SetValueModel.prototype.selectAllMatchingMiniFilter = function (clearExistingSelection) {\n    var _this = this;\n\n    if (clearExistingSelection === void 0) {\n      clearExistingSelection = false;\n    }\n\n    if (this.miniFilterText == null) {\n      // ensure everything is selected\n      this.selectedValues = _.convertToSet(this.allValues);\n    } else {\n      // ensure everything that matches the mini filter is selected\n      if (clearExistingSelection) {\n        this.selectedValues.clear();\n      }\n\n      _.forEach(this.displayedValues, function (value) {\n        return _this.selectedValues.add(value);\n      });\n    }\n  };\n\n  SetValueModel.prototype.deselectAllMatchingMiniFilter = function () {\n    var _this = this;\n\n    if (this.miniFilterText == null) {\n      // ensure everything is deselected\n      this.selectedValues.clear();\n    } else {\n      // ensure everything that matches the mini filter is deselected\n      _.forEach(this.displayedValues, function (value) {\n        return _this.selectedValues.delete(value);\n      });\n    }\n  };\n\n  SetValueModel.prototype.selectValue = function (value) {\n    this.selectedValues.add(value);\n  };\n\n  SetValueModel.prototype.deselectValue = function (value) {\n    if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {\n      // ensure we're starting from the correct \"everything selected\" state\n      this.resetSelectionState(this.displayedValues);\n    }\n\n    this.selectedValues.delete(value);\n  };\n\n  SetValueModel.prototype.isValueSelected = function (value) {\n    return this.selectedValues.has(value);\n  };\n\n  SetValueModel.prototype.isEverythingVisibleSelected = function () {\n    var _this = this;\n\n    return _.filter(this.displayedValues, function (it) {\n      return _this.isValueSelected(it);\n    }).length === this.displayedValues.length;\n  };\n\n  SetValueModel.prototype.isNothingVisibleSelected = function () {\n    var _this = this;\n\n    return _.filter(this.displayedValues, function (it) {\n      return _this.isValueSelected(it);\n    }).length === 0;\n  };\n\n  SetValueModel.prototype.getModel = function () {\n    return this.isFilterActive() ? _.values(this.selectedValues) : null;\n  };\n\n  SetValueModel.prototype.setModel = function (model) {\n    var _this = this;\n\n    return this.allValuesPromise.then(function (values) {\n      if (model == null) {\n        _this.resetSelectionState(values);\n      } else {\n        // select all values from the model that exist in the filter\n        _this.selectedValues.clear();\n\n        var allValues_1 = _.convertToSet(values);\n\n        _.forEach(model, function (value) {\n          if (allValues_1.has(value)) {\n            _this.selectedValues.add(value);\n          }\n        });\n      }\n    });\n  };\n\n  SetValueModel.prototype.resetSelectionState = function (values) {\n    if (this.filterParams.defaultToNothingSelected) {\n      this.selectedValues.clear();\n    } else {\n      this.selectedValues = _.convertToSet(values);\n    }\n  };\n\n  SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED = 'availableValuesChanged';\n  return SetValueModel;\n}();\n\nexport { SetValueModel };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/set-filter/dist/es6/setFilter/setValueModel.js"],"names":["Constants","Promise","TextFilter","_","EventService","SetFilterModelValuesType","SetValueModel","rowModel","colDef","column","valueGetter","doesRowPassOtherFilters","suppressSorting","setIsLoading","valueFormatterService","translate","_this","localEventService","miniFilterText","providedValues","allValues","availableValues","Set","displayedValues","selectedValues","getType","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","filterParams","formatter","textFormatter","DEFAULT_FORMATTER","values","valuesType","TAKEN_FROM_GRID_VALUES","Array","isArray","PROVIDED_LIST","PROVIDED_CALLBACK","updateAllValues","then","resetSelectionState","prototype","addEventListener","eventType","listener","async","removeEventListener","refreshValues","keepSelection","currentModel","getModel","setModel","overrideValues","valuesToUse","resolve","allValuesPromise","refreshAfterAnyFilterChanged","showAvailableOnly","updateAvailableValues","getValuesFromRows","toStrings","sortedValues","sortValues","callback_1","params_1","success","processedValues","window","setTimeout","Error","setValuesType","value","getValuesType","isValueAvailable","has","suppressRemoveEntries","convertToSet","dispatchEvent","type","EVENT_AVAILABLE_VALUES_CHANGED","updateDisplayedValues","comparator","defaultComparator","excelMode","indexOf","sort","filter","v","concat","removeUnavailableValues","console","error","keyCreator","forEachLeafNode","node","data","makeNull","forEach","x","formatted","toStringOrNull","add","setMiniFilter","getMiniFilter","formattedFilterText","toUpperCase","matchesFilter","valueToCheck","push","textFormatterValue","valueFormatterValue","formatValue","getDisplayedValueCount","length","getDisplayedValue","index","isFilterActive","defaultToNothingSelected","size","getUniqueValueCount","getUniqueValue","getValues","slice","selectAllMatchingMiniFilter","clearExistingSelection","clear","deselectAllMatchingMiniFilter","delete","selectValue","deselectValue","isEverythingVisibleSelected","isValueSelected","it","isNothingVisibleSelected","model","allValues_1"],"mappings":"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","sourcesContent":["import { Constants, Promise, TextFilter, _, EventService } from '@ag-grid-community/core';\nexport var SetFilterModelValuesType;\n(function (SetFilterModelValuesType) {\n    SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_LIST\"] = 0] = \"PROVIDED_LIST\";\n    SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_CALLBACK\"] = 1] = \"PROVIDED_CALLBACK\";\n    SetFilterModelValuesType[SetFilterModelValuesType[\"TAKEN_FROM_GRID_VALUES\"] = 2] = \"TAKEN_FROM_GRID_VALUES\";\n})(SetFilterModelValuesType || (SetFilterModelValuesType = {}));\nvar SetValueModel = /** @class */ (function () {\n    function SetValueModel(rowModel, colDef, column, valueGetter, doesRowPassOtherFilters, suppressSorting, setIsLoading, valueFormatterService, translate) {\n        var _this = this;\n        this.colDef = colDef;\n        this.column = column;\n        this.valueGetter = valueGetter;\n        this.doesRowPassOtherFilters = doesRowPassOtherFilters;\n        this.suppressSorting = suppressSorting;\n        this.setIsLoading = setIsLoading;\n        this.valueFormatterService = valueFormatterService;\n        this.translate = translate;\n        this.localEventService = new EventService();\n        this.miniFilterText = null;\n        // The lookup for a set is much faster than the lookup for an array, especially when the length of the array is\n        // thousands of records long, so where lookups are important we use a set.\n        /** Values provided to the filter for use. */\n        this.providedValues = null;\n        /** All possible values for the filter, sorted if required. */\n        this.allValues = [];\n        /** Remaining values when filters from other columns have been applied. */\n        this.availableValues = new Set();\n        /** All values that are currently displayed, after the mini-filter has been applied. */\n        this.displayedValues = [];\n        /** Values that have been selected for this filter. */\n        this.selectedValues = new Set();\n        if (rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = rowModel;\n        }\n        this.filterParams = this.colDef.filterParams || {};\n        this.formatter = this.filterParams.textFormatter || TextFilter.DEFAULT_FORMATTER;\n        var values = this.filterParams.values;\n        if (values == null) {\n            this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n        }\n        else {\n            this.valuesType = Array.isArray(values) ?\n                SetFilterModelValuesType.PROVIDED_LIST :\n                SetFilterModelValuesType.PROVIDED_CALLBACK;\n            this.providedValues = values;\n        }\n        this.updateAllValues().then(function (values) { return _this.resetSelectionState(values); });\n    }\n    SetValueModel.prototype.addEventListener = function (eventType, listener, async) {\n        this.localEventService.addEventListener(eventType, listener, async);\n    };\n    SetValueModel.prototype.removeEventListener = function (eventType, listener, async) {\n        this.localEventService.removeEventListener(eventType, listener, async);\n    };\n    /**\n     * Re-fetches the values used in the filter from the value source.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    SetValueModel.prototype.refreshValues = function (keepSelection) {\n        if (keepSelection === void 0) { keepSelection = true; }\n        var currentModel = this.getModel();\n        this.updateAllValues();\n        // ensure model is updated for new values\n        return this.setModel(keepSelection ? currentModel : null);\n    };\n    /**\n     * Overrides the current values being used for the set filter.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    SetValueModel.prototype.overrideValues = function (valuesToUse, keepSelection) {\n        var _this = this;\n        if (keepSelection === void 0) { keepSelection = true; }\n        return new Promise(function (resolve) {\n            // wait for any existing values to be populated before overriding\n            _this.allValuesPromise.then(function () {\n                _this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;\n                _this.providedValues = valuesToUse;\n                _this.refreshValues(keepSelection).then(function () { return resolve(); });\n            });\n        });\n    };\n    SetValueModel.prototype.refreshAfterAnyFilterChanged = function () {\n        var _this = this;\n        if (this.showAvailableOnly()) {\n            this.allValuesPromise.then(function (values) { return _this.updateAvailableValues(values); });\n        }\n    };\n    SetValueModel.prototype.updateAllValues = function () {\n        var _this = this;\n        this.allValuesPromise = new Promise(function (resolve) {\n            switch (_this.valuesType) {\n                case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:\n                case SetFilterModelValuesType.PROVIDED_LIST: {\n                    var values = _this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES ?\n                        _this.getValuesFromRows(false) : _.toStrings(_this.providedValues);\n                    var sortedValues = _this.sortValues(values);\n                    _this.allValues = sortedValues;\n                    resolve(sortedValues);\n                    break;\n                }\n                case SetFilterModelValuesType.PROVIDED_CALLBACK: {\n                    _this.setIsLoading(true);\n                    var callback_1 = _this.providedValues;\n                    var params_1 = {\n                        success: function (values) {\n                            var processedValues = _.toStrings(values);\n                            _this.setIsLoading(false);\n                            var sortedValues = _this.sortValues(processedValues);\n                            _this.allValues = sortedValues;\n                            resolve(sortedValues);\n                        },\n                        colDef: _this.colDef\n                    };\n                    window.setTimeout(function () { return callback_1(params_1); }, 0);\n                    break;\n                }\n                default:\n                    throw new Error('Unrecognised valuesType');\n            }\n        });\n        this.allValuesPromise.then(function (values) { return _this.updateAvailableValues(values); });\n        return this.allValuesPromise;\n    };\n    SetValueModel.prototype.setValuesType = function (value) {\n        this.valuesType = value;\n    };\n    SetValueModel.prototype.getValuesType = function () {\n        return this.valuesType;\n    };\n    SetValueModel.prototype.isValueAvailable = function (value) {\n        return this.availableValues.has(value);\n    };\n    SetValueModel.prototype.showAvailableOnly = function () {\n        return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES &&\n            !this.filterParams.suppressRemoveEntries;\n    };\n    SetValueModel.prototype.updateAvailableValues = function (allValues) {\n        var availableValues = this.showAvailableOnly() ? this.sortValues(this.getValuesFromRows(true)) : allValues;\n        this.availableValues = _.convertToSet(availableValues);\n        this.localEventService.dispatchEvent({ type: SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED });\n        this.updateDisplayedValues();\n    };\n    SetValueModel.prototype.sortValues = function (values) {\n        if (this.suppressSorting) {\n            return values;\n        }\n        var comparator = this.filterParams.comparator ||\n            this.colDef.comparator ||\n            _.defaultComparator;\n        if (!this.filterParams.excelMode || values.indexOf(null) < 0) {\n            return values.sort(comparator);\n        }\n        // ensure the blank value always appears last\n        return _.filter(values, function (v) { return v != null; }).sort(comparator).concat(null);\n    };\n    SetValueModel.prototype.getValuesFromRows = function (removeUnavailableValues) {\n        var _this = this;\n        if (removeUnavailableValues === void 0) { removeUnavailableValues = false; }\n        if (!this.clientSideRowModel) {\n            console.error('ag-Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');\n            return [];\n        }\n        var values = new Set();\n        var keyCreator = this.colDef.keyCreator;\n        this.clientSideRowModel.forEachLeafNode(function (node) {\n            // only pull values from rows that have data. this means we skip filler group nodes.\n            if (!node.data || (removeUnavailableValues && !_this.doesRowPassOtherFilters(node))) {\n                return;\n            }\n            var value = _this.valueGetter(node);\n            if (keyCreator) {\n                value = keyCreator({ value: value });\n            }\n            value = _.makeNull(value);\n            if (value != null && Array.isArray(value)) {\n                _.forEach(value, function (x) {\n                    var formatted = _.toStringOrNull(_.makeNull(x));\n                    values.add(formatted);\n                });\n            }\n            else {\n                values.add(_.toStringOrNull(value));\n            }\n        });\n        return _.values(values);\n    };\n    /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */\n    SetValueModel.prototype.setMiniFilter = function (value) {\n        value = _.makeNull(value);\n        if (this.miniFilterText === value) {\n            //do nothing if filter has not changed\n            return false;\n        }\n        this.miniFilterText = value;\n        this.updateDisplayedValues();\n        return true;\n    };\n    SetValueModel.prototype.getMiniFilter = function () {\n        return this.miniFilterText;\n    };\n    SetValueModel.prototype.updateDisplayedValues = function () {\n        var _this = this;\n        // if no filter, just display all available values\n        if (this.miniFilterText == null) {\n            this.displayedValues = _.values(this.availableValues);\n            return;\n        }\n        // if filter present, we filter down the list\n        this.displayedValues = [];\n        // to allow for case insensitive searches, upper-case both filter text and value\n        var formattedFilterText = this.formatter(this.miniFilterText).toUpperCase();\n        var matchesFilter = function (valueToCheck) {\n            return valueToCheck != null && valueToCheck.toUpperCase().indexOf(formattedFilterText) >= 0;\n        };\n        this.availableValues.forEach(function (value) {\n            if (value == null) {\n                if (_this.filterParams.excelMode && matchesFilter(\"(\" + _this.translate('blanks') + \")\")) {\n                    _this.displayedValues.push(value);\n                }\n            }\n            else {\n                var textFormatterValue = _this.formatter(value);\n                // TODO: should this be applying the text formatter *after* the value formatter?\n                var valueFormatterValue = _this.valueFormatterService.formatValue(_this.column, null, null, textFormatterValue);\n                if (matchesFilter(textFormatterValue) || matchesFilter(valueFormatterValue)) {\n                    _this.displayedValues.push(value);\n                }\n            }\n        });\n    };\n    SetValueModel.prototype.getDisplayedValueCount = function () {\n        return this.displayedValues.length;\n    };\n    SetValueModel.prototype.getDisplayedValue = function (index) {\n        return this.displayedValues[index];\n    };\n    SetValueModel.prototype.isFilterActive = function () {\n        return this.filterParams.defaultToNothingSelected ?\n            this.selectedValues.size > 0 :\n            this.allValues.length !== this.selectedValues.size;\n    };\n    SetValueModel.prototype.getUniqueValueCount = function () {\n        return this.allValues.length;\n    };\n    SetValueModel.prototype.getUniqueValue = function (index) {\n        return this.allValues[index];\n    };\n    SetValueModel.prototype.getValues = function () {\n        return this.allValues.slice();\n    };\n    SetValueModel.prototype.selectAllMatchingMiniFilter = function (clearExistingSelection) {\n        var _this = this;\n        if (clearExistingSelection === void 0) { clearExistingSelection = false; }\n        if (this.miniFilterText == null) {\n            // ensure everything is selected\n            this.selectedValues = _.convertToSet(this.allValues);\n        }\n        else {\n            // ensure everything that matches the mini filter is selected\n            if (clearExistingSelection) {\n                this.selectedValues.clear();\n            }\n            _.forEach(this.displayedValues, function (value) { return _this.selectedValues.add(value); });\n        }\n    };\n    SetValueModel.prototype.deselectAllMatchingMiniFilter = function () {\n        var _this = this;\n        if (this.miniFilterText == null) {\n            // ensure everything is deselected\n            this.selectedValues.clear();\n        }\n        else {\n            // ensure everything that matches the mini filter is deselected\n            _.forEach(this.displayedValues, function (value) { return _this.selectedValues.delete(value); });\n        }\n    };\n    SetValueModel.prototype.selectValue = function (value) {\n        this.selectedValues.add(value);\n    };\n    SetValueModel.prototype.deselectValue = function (value) {\n        if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {\n            // ensure we're starting from the correct \"everything selected\" state\n            this.resetSelectionState(this.displayedValues);\n        }\n        this.selectedValues.delete(value);\n    };\n    SetValueModel.prototype.isValueSelected = function (value) {\n        return this.selectedValues.has(value);\n    };\n    SetValueModel.prototype.isEverythingVisibleSelected = function () {\n        var _this = this;\n        return _.filter(this.displayedValues, function (it) { return _this.isValueSelected(it); }).length === this.displayedValues.length;\n    };\n    SetValueModel.prototype.isNothingVisibleSelected = function () {\n        var _this = this;\n        return _.filter(this.displayedValues, function (it) { return _this.isValueSelected(it); }).length === 0;\n    };\n    SetValueModel.prototype.getModel = function () {\n        return this.isFilterActive() ? _.values(this.selectedValues) : null;\n    };\n    SetValueModel.prototype.setModel = function (model) {\n        var _this = this;\n        return this.allValuesPromise.then(function (values) {\n            if (model == null) {\n                _this.resetSelectionState(values);\n            }\n            else {\n                // select all values from the model that exist in the filter\n                _this.selectedValues.clear();\n                var allValues_1 = _.convertToSet(values);\n                _.forEach(model, function (value) {\n                    if (allValues_1.has(value)) {\n                        _this.selectedValues.add(value);\n                    }\n                });\n            }\n        });\n    };\n    SetValueModel.prototype.resetSelectionState = function (values) {\n        if (this.filterParams.defaultToNothingSelected) {\n            this.selectedValues.clear();\n        }\n        else {\n            this.selectedValues = _.convertToSet(values);\n        }\n    };\n    SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED = 'availableValuesChanged';\n    return SetValueModel;\n}());\nexport { SetValueModel };\n"]},"metadata":{},"sourceType":"module"}