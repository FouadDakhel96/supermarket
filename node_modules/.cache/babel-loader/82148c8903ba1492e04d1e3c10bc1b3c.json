{"ast":null,"code":"import columnFactory from './column';\nimport rowFactory from './row';\nimport mergeCell from './mergeCell';\n\nvar updateColMinMax = function updateColMinMax(col, min, range, prevCol) {\n  if (!col.min) {\n    col.min = min;\n    col.max = min + range;\n    return;\n  }\n\n  var currentMin = min;\n\n  if (prevCol) {\n    currentMin = Math.max(currentMin, prevCol.min);\n  }\n\n  col.min = Math.max(col.min, currentMin);\n  col.max = Math.max(col.max, currentMin + range);\n};\n\nvar getMergedCells = function getMergedCells(rows, cols) {\n  var mergedCells = [];\n  rows.forEach(function (currentRow, rowIdx) {\n    var cells = currentRow.cells;\n    var merges = 0;\n    currentRow.index = rowIdx + 1;\n    var lastCol;\n    cells.forEach(function (currentCell, cellIdx) {\n      var min = cellIdx + merges + 1;\n      var start = getExcelColumnName(min);\n      var outputRow = rowIdx + 1;\n\n      if (currentCell.mergeAcross) {\n        merges += currentCell.mergeAcross;\n        var end = getExcelColumnName(cellIdx + merges + 1);\n        mergedCells.push(\"\" + start + outputRow + \":\" + end + outputRow);\n      }\n\n      if (!cols[min - 1]) {\n        cols[min - 1] = {};\n      }\n\n      updateColMinMax(cols[min - 1], min, merges, lastCol);\n      lastCol = cols[min - 1];\n      currentCell.ref = \"\" + start + outputRow;\n    });\n  });\n  return mergedCells;\n};\n\nexport var getExcelColumnName = function getExcelColumnName(colIdx) {\n  var startCode = 65;\n  var tableWidth = 26;\n  var fromCharCode = String.fromCharCode;\n  var pos = Math.floor(colIdx / tableWidth);\n  var tableIdx = colIdx % tableWidth;\n\n  if (!pos || colIdx === tableWidth) {\n    return fromCharCode(startCode + colIdx - 1);\n  }\n\n  if (!tableIdx) {\n    return getExcelColumnName(pos - 1) + 'Z';\n  }\n\n  if (pos < tableWidth) {\n    return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1);\n  }\n\n  return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};\nvar worksheetFactory = {\n  getTemplate: function getTemplate(config) {\n    var table = config.table;\n    var rows = table.rows,\n        columns = table.columns;\n    var mergedCells = columns && columns.length ? getMergedCells(rows, columns) : [];\n    var children = [];\n\n    if (columns.length) {\n      children.push({\n        name: 'cols',\n        children: columns.map(columnFactory.getTemplate)\n      });\n    }\n\n    if (rows.length) {\n      children.push({\n        name: 'sheetData',\n        children: rows.map(rowFactory.getTemplate)\n      });\n    }\n\n    if (mergedCells.length) {\n      children.push({\n        name: 'mergeCells',\n        properties: {\n          rawMap: {\n            count: mergedCells.length\n          }\n        },\n        children: mergedCells.map(mergeCell.getTemplate)\n      });\n    }\n\n    return {\n      name: \"worksheet\",\n      properties: {\n        prefixedAttributes: [{\n          prefix: \"xmlns:\",\n          map: {\n            r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n          }\n        }],\n        rawMap: {\n          xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n        }\n      },\n      children: children\n    };\n  }\n};\nexport default worksheetFactory;","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/excel-export/dist/es6/excelExport/files/ooxml/worksheet.js"],"names":["columnFactory","rowFactory","mergeCell","updateColMinMax","col","min","range","prevCol","max","currentMin","Math","getMergedCells","rows","cols","mergedCells","forEach","currentRow","rowIdx","cells","merges","index","lastCol","currentCell","cellIdx","start","getExcelColumnName","outputRow","mergeAcross","end","push","ref","colIdx","startCode","tableWidth","fromCharCode","String","pos","floor","tableIdx","worksheetFactory","getTemplate","config","table","columns","length","children","name","map","properties","rawMap","count","prefixedAttributes","prefix","r","xmlns"],"mappings":"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","sourcesContent":["import columnFactory from './column';\nimport rowFactory from './row';\nimport mergeCell from './mergeCell';\nvar updateColMinMax = function (col, min, range, prevCol) {\n    if (!col.min) {\n        col.min = min;\n        col.max = min + range;\n        return;\n    }\n    var currentMin = min;\n    if (prevCol) {\n        currentMin = Math.max(currentMin, prevCol.min);\n    }\n    col.min = Math.max(col.min, currentMin);\n    col.max = Math.max(col.max, currentMin + range);\n};\nvar getMergedCells = function (rows, cols) {\n    var mergedCells = [];\n    rows.forEach(function (currentRow, rowIdx) {\n        var cells = currentRow.cells;\n        var merges = 0;\n        currentRow.index = rowIdx + 1;\n        var lastCol;\n        cells.forEach(function (currentCell, cellIdx) {\n            var min = cellIdx + merges + 1;\n            var start = getExcelColumnName(min);\n            var outputRow = rowIdx + 1;\n            if (currentCell.mergeAcross) {\n                merges += currentCell.mergeAcross;\n                var end = getExcelColumnName(cellIdx + merges + 1);\n                mergedCells.push(\"\" + start + outputRow + \":\" + end + outputRow);\n            }\n            if (!cols[min - 1]) {\n                cols[min - 1] = {};\n            }\n            updateColMinMax(cols[min - 1], min, merges, lastCol);\n            lastCol = cols[min - 1];\n            currentCell.ref = \"\" + start + outputRow;\n        });\n    });\n    return mergedCells;\n};\nexport var getExcelColumnName = function (colIdx) {\n    var startCode = 65;\n    var tableWidth = 26;\n    var fromCharCode = String.fromCharCode;\n    var pos = Math.floor(colIdx / tableWidth);\n    var tableIdx = colIdx % tableWidth;\n    if (!pos || colIdx === tableWidth) {\n        return fromCharCode(startCode + colIdx - 1);\n    }\n    if (!tableIdx) {\n        return getExcelColumnName(pos - 1) + 'Z';\n    }\n    if (pos < tableWidth) {\n        return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1);\n    }\n    return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};\nvar worksheetFactory = {\n    getTemplate: function (config) {\n        var table = config.table;\n        var rows = table.rows, columns = table.columns;\n        var mergedCells = (columns && columns.length) ? getMergedCells(rows, columns) : [];\n        var children = [];\n        if (columns.length) {\n            children.push({\n                name: 'cols',\n                children: columns.map(columnFactory.getTemplate)\n            });\n        }\n        if (rows.length) {\n            children.push({\n                name: 'sheetData',\n                children: rows.map(rowFactory.getTemplate)\n            });\n        }\n        if (mergedCells.length) {\n            children.push({\n                name: 'mergeCells',\n                properties: {\n                    rawMap: {\n                        count: mergedCells.length\n                    }\n                },\n                children: mergedCells.map(mergeCell.getTemplate)\n            });\n        }\n        return {\n            name: \"worksheet\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"xmlns:\",\n                        map: {\n                            r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n                        }\n                    }],\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n                }\n            },\n            children: children\n        };\n    }\n};\nexport default worksheetFactory;\n"]},"metadata":{},"sourceType":"module"}