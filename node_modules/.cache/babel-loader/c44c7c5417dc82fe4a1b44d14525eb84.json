{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Qualifier } from \"./context/context\";\nimport { Events } from \"./events\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { Constants } from \"./constants\";\nimport { ChangedPath } from \"./utils/changedPath\";\nimport { _ } from './utils';\n\nvar SelectionController =\n/** @class */\nfunction (_super) {\n  __extends(SelectionController, _super);\n\n  function SelectionController() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SelectionController.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('SelectionController');\n    this.reset();\n\n    if (this.gridOptionsWrapper.isRowModelDefault()) {\n      this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));\n    }\n  };\n\n  SelectionController.prototype.init = function () {\n    this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n  };\n\n  SelectionController.prototype.setLastSelectedNode = function (rowNode) {\n    this.lastSelectedNode = rowNode;\n  };\n\n  SelectionController.prototype.getLastSelectedNode = function () {\n    return this.lastSelectedNode;\n  };\n\n  SelectionController.prototype.getSelectedNodes = function () {\n    var selectedNodes = [];\n\n    _.iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode) {\n        selectedNodes.push(rowNode);\n      }\n    });\n\n    return selectedNodes;\n  };\n\n  SelectionController.prototype.getSelectedRows = function () {\n    var selectedRows = [];\n\n    _.iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode && rowNode.data) {\n        selectedRows.push(rowNode.data);\n      }\n    });\n\n    return selectedRows;\n  };\n\n  SelectionController.prototype.removeGroupsFromSelection = function () {\n    var _this = this;\n\n    _.iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode && rowNode.group) {\n        _this.selectedNodes[rowNode.id] = undefined;\n      }\n    });\n  }; // should only be called if groupSelectsChildren=true\n\n\n  SelectionController.prototype.updateGroupsFromChildrenSelections = function (changedPath) {\n    // we only do this when group selection state depends on selected children\n    if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {\n      return;\n    } // also only do it if CSRM (code should never allow this anyway)\n\n\n    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      return;\n    }\n\n    var clientSideRowModel = this.rowModel;\n    var rootNode = clientSideRowModel.getRootNode();\n\n    if (!changedPath) {\n      changedPath = new ChangedPath(true, rootNode);\n      changedPath.setInactive();\n    }\n\n    changedPath.forEachChangedNodeDepthFirst(function (rowNode) {\n      if (rowNode !== rootNode) {\n        rowNode.calculateSelectedFromChildren();\n      }\n    }); // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {\n    //     rowNode.depthFirstSearch((node) => {\n    //         if (node.group) {\n    //         }\n    //     });\n    // });\n  };\n\n  SelectionController.prototype.getNodeForIdIfSelected = function (id) {\n    return this.selectedNodes[id];\n  };\n\n  SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {\n    var _this = this;\n\n    var groupsToRefresh = {};\n    var updatedCount = 0;\n\n    _.iterateObject(this.selectedNodes, function (key, otherRowNode) {\n      if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n        var rowNode = _this.selectedNodes[otherRowNode.id];\n        updatedCount += rowNode.setSelectedParams({\n          newValue: false,\n          clearSelection: false,\n          suppressFinishActions: true\n        });\n\n        if (_this.groupSelectsChildren && otherRowNode.parent) {\n          groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;\n        }\n      }\n    });\n\n    _.iterateObject(groupsToRefresh, function (key, group) {\n      group.calculateSelectedFromChildren();\n    });\n\n    return updatedCount;\n  };\n\n  SelectionController.prototype.onRowSelected = function (event) {\n    var rowNode = event.node; // we do not store the group rows when the groups select children\n\n    if (this.groupSelectsChildren && rowNode.group) {\n      return;\n    }\n\n    if (rowNode.isSelected()) {\n      this.selectedNodes[rowNode.id] = rowNode;\n    } else {\n      this.selectedNodes[rowNode.id] = undefined;\n    }\n  };\n\n  SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {\n    this.syncInOldRowNode(rowNode, oldNode);\n    this.syncInNewRowNode(rowNode);\n  }; // if the id has changed for the node, then this means the rowNode\n  // is getting used for a different data item, which breaks\n  // our selectedNodes, as the node now is mapped by the old id\n  // which is inconsistent. so to keep the old node as selected,\n  // we swap in the clone (with the old id and old data). this means\n  // the oldNode is effectively a daemon we keep a reference to,\n  // so if client calls api.getSelectedNodes(), it gets the daemon\n  // in the result. when the client un-selects, the reference to the\n  // daemon is removed. the daemon, because it's an oldNode, is not\n  // used by the grid for rendering, it's a copy of what the node used\n  // to be like before the id was changed.\n\n\n  SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {\n    var oldNodeHasDifferentId = _.exists(oldNode) && rowNode.id !== oldNode.id;\n\n    if (oldNodeHasDifferentId) {\n      var oldNodeSelected = _.exists(this.selectedNodes[oldNode.id]);\n\n      if (oldNodeSelected) {\n        this.selectedNodes[oldNode.id] = oldNode;\n      }\n    }\n  };\n\n  SelectionController.prototype.syncInNewRowNode = function (rowNode) {\n    if (_.exists(this.selectedNodes[rowNode.id])) {\n      rowNode.setSelectedInitialValue(true);\n      this.selectedNodes[rowNode.id] = rowNode;\n    } else {\n      rowNode.setSelectedInitialValue(false);\n    }\n  };\n\n  SelectionController.prototype.reset = function () {\n    this.logger.log('reset');\n    this.selectedNodes = {};\n    this.lastSelectedNode = null;\n  }; // returns a list of all nodes at 'best cost' - a feature to be used\n  // with groups / trees. if a group has all it's children selected,\n  // then the group appears in the result, but not the children.\n  // Designed for use with 'children' as the group selection type,\n  // where groups don't actually appear in the selection normally.\n\n\n  SelectionController.prototype.getBestCostNodeSelection = function () {\n    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      console.warn('getBestCostNodeSelection is only available when using normal row model');\n      return;\n    }\n\n    var clientSideRowModel = this.rowModel;\n    var topLevelNodes = clientSideRowModel.getTopLevelNodes();\n\n    if (topLevelNodes === null) {\n      console.warn('selectAll not available doing rowModel=virtual');\n      return;\n    }\n\n    var result = []; // recursive function, to find the selected nodes\n\n    function traverse(nodes) {\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var node = nodes[i];\n\n        if (node.isSelected()) {\n          result.push(node);\n        } else {\n          // if not selected, then if it's a group, and the group\n          // has children, continue to search for selections\n          if (node.group && node.children) {\n            traverse(node.children);\n          }\n        }\n      }\n    }\n\n    traverse(topLevelNodes);\n    return result;\n  };\n\n  SelectionController.prototype.setRowModel = function (rowModel) {\n    this.rowModel = rowModel;\n  };\n\n  SelectionController.prototype.isEmpty = function () {\n    var count = 0;\n\n    _.iterateObject(this.selectedNodes, function (nodeId, rowNode) {\n      if (rowNode) {\n        count++;\n      }\n    });\n\n    return count === 0;\n  };\n\n  SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {\n    if (justFiltered === void 0) {\n      justFiltered = false;\n    }\n\n    var callback = function callback(rowNode) {\n      return rowNode.selectThisNode(false);\n    };\n\n    var rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n\n    if (justFiltered) {\n      if (!rowModelClientSide) {\n        console.error('ag-Grid: selecting just filtered only works with In Memory Row Model');\n        return;\n      }\n\n      var clientSideRowModel = this.rowModel;\n      clientSideRowModel.forEachNodeAfterFilter(callback);\n    } else {\n      _.iterateObject(this.selectedNodes, function (id, rowNode) {\n        // remember the reference can be to null, as we never 'delete' from the map\n        if (rowNode) {\n          callback(rowNode);\n        }\n      }); // this clears down the map (whereas above only sets the items in map to 'undefined')\n\n\n      this.reset();\n    } // the above does not clean up the parent rows if they are selected\n\n\n    if (rowModelClientSide && this.groupSelectsChildren) {\n      this.updateGroupsFromChildrenSelections();\n    }\n\n    var event = {\n      type: Events.EVENT_SELECTION_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  SelectionController.prototype.selectAllRowNodes = function (justFiltered) {\n    if (justFiltered === void 0) {\n      justFiltered = false;\n    }\n\n    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      throw new Error(\"selectAll only available with normal row model, ie not \" + this.rowModel.getType());\n    }\n\n    var clientSideRowModel = this.rowModel;\n\n    var callback = function callback(rowNode) {\n      return rowNode.selectThisNode(true);\n    };\n\n    if (justFiltered) {\n      clientSideRowModel.forEachNodeAfterFilter(callback);\n    } else {\n      clientSideRowModel.forEachNode(callback);\n    } // the above does not clean up the parent rows if they are selected\n\n\n    if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {\n      this.updateGroupsFromChildrenSelections();\n    }\n\n    var event = {\n      type: Events.EVENT_SELECTION_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionController.prototype.selectNode = function (rowNode, tryMulti) {\n    if (rowNode) {\n      rowNode.setSelectedParams({\n        newValue: true,\n        clearSelection: !tryMulti\n      });\n    }\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionController.prototype.deselectIndex = function (rowIndex) {\n    var node = this.rowModel.getRow(rowIndex);\n    this.deselectNode(node);\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionController.prototype.deselectNode = function (rowNode) {\n    if (rowNode) {\n      rowNode.setSelectedParams({\n        newValue: false,\n        clearSelection: false\n      });\n    }\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionController.prototype.selectIndex = function (index, tryMulti) {\n    var node = this.rowModel.getRow(index);\n    this.selectNode(node, tryMulti);\n  };\n\n  __decorate([Autowired('rowModel')], SelectionController.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], SelectionController.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnApi')], SelectionController.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], SelectionController.prototype, \"gridApi\", void 0);\n\n  __decorate([__param(0, Qualifier('loggerFactory'))], SelectionController.prototype, \"setBeans\", null);\n\n  __decorate([PostConstruct], SelectionController.prototype, \"init\", null);\n\n  SelectionController = __decorate([Bean('selectionController')], SelectionController);\n  return SelectionController;\n}(BeanStub);\n\nexport { SelectionController };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/selectionController.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Bean","BeanStub","Qualifier","Events","Autowired","PostConstruct","Constants","ChangedPath","_","SelectionController","_super","apply","setBeans","loggerFactory","logger","reset","gridOptionsWrapper","isRowModelDefault","addManagedListener","eventService","EVENT_ROW_DATA_CHANGED","bind","init","groupSelectsChildren","isGroupSelectsChildren","EVENT_ROW_SELECTED","onRowSelected","setLastSelectedNode","rowNode","lastSelectedNode","getLastSelectedNode","getSelectedNodes","selectedNodes","iterateObject","push","getSelectedRows","selectedRows","data","removeGroupsFromSelection","_this","group","id","undefined","updateGroupsFromChildrenSelections","changedPath","rowModel","getType","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","rootNode","getRootNode","setInactive","forEachChangedNodeDepthFirst","calculateSelectedFromChildren","getNodeForIdIfSelected","clearOtherNodes","rowNodeToKeepSelected","groupsToRefresh","updatedCount","otherRowNode","setSelectedParams","newValue","clearSelection","suppressFinishActions","parent","event","node","isSelected","syncInRowNode","oldNode","syncInOldRowNode","syncInNewRowNode","oldNodeHasDifferentId","exists","oldNodeSelected","setSelectedInitialValue","log","getBestCostNodeSelection","console","warn","topLevelNodes","getTopLevelNodes","result","traverse","nodes","l","children","setRowModel","isEmpty","count","nodeId","deselectAllRowNodes","justFiltered","callback","selectThisNode","rowModelClientSide","error","forEachNodeAfterFilter","type","EVENT_SELECTION_CHANGED","api","gridApi","columnApi","dispatchEvent","selectAllRowNodes","Error","forEachNode","selectNode","tryMulti","deselectIndex","rowIndex","getRow","deselectNode","selectIndex","index"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Qualifier } from \"./context/context\";\nimport { Events } from \"./events\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { Constants } from \"./constants\";\nimport { ChangedPath } from \"./utils/changedPath\";\nimport { _ } from './utils';\nvar SelectionController = /** @class */ (function (_super) {\n    __extends(SelectionController, _super);\n    function SelectionController() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SelectionController.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('SelectionController');\n        this.reset();\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));\n        }\n    };\n    SelectionController.prototype.init = function () {\n        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n    };\n    SelectionController.prototype.setLastSelectedNode = function (rowNode) {\n        this.lastSelectedNode = rowNode;\n    };\n    SelectionController.prototype.getLastSelectedNode = function () {\n        return this.lastSelectedNode;\n    };\n    SelectionController.prototype.getSelectedNodes = function () {\n        var selectedNodes = [];\n        _.iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode) {\n                selectedNodes.push(rowNode);\n            }\n        });\n        return selectedNodes;\n    };\n    SelectionController.prototype.getSelectedRows = function () {\n        var selectedRows = [];\n        _.iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode && rowNode.data) {\n                selectedRows.push(rowNode.data);\n            }\n        });\n        return selectedRows;\n    };\n    SelectionController.prototype.removeGroupsFromSelection = function () {\n        var _this = this;\n        _.iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode && rowNode.group) {\n                _this.selectedNodes[rowNode.id] = undefined;\n            }\n        });\n    };\n    // should only be called if groupSelectsChildren=true\n    SelectionController.prototype.updateGroupsFromChildrenSelections = function (changedPath) {\n        // we only do this when group selection state depends on selected children\n        if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {\n            return;\n        }\n        // also only do it if CSRM (code should never allow this anyway)\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            return;\n        }\n        var clientSideRowModel = this.rowModel;\n        var rootNode = clientSideRowModel.getRootNode();\n        if (!changedPath) {\n            changedPath = new ChangedPath(true, rootNode);\n            changedPath.setInactive();\n        }\n        changedPath.forEachChangedNodeDepthFirst(function (rowNode) {\n            if (rowNode !== rootNode) {\n                rowNode.calculateSelectedFromChildren();\n            }\n        });\n        // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {\n        //     rowNode.depthFirstSearch((node) => {\n        //         if (node.group) {\n        //         }\n        //     });\n        // });\n    };\n    SelectionController.prototype.getNodeForIdIfSelected = function (id) {\n        return this.selectedNodes[id];\n    };\n    SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {\n        var _this = this;\n        var groupsToRefresh = {};\n        var updatedCount = 0;\n        _.iterateObject(this.selectedNodes, function (key, otherRowNode) {\n            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n                var rowNode = _this.selectedNodes[otherRowNode.id];\n                updatedCount += rowNode.setSelectedParams({\n                    newValue: false,\n                    clearSelection: false,\n                    suppressFinishActions: true\n                });\n                if (_this.groupSelectsChildren && otherRowNode.parent) {\n                    groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;\n                }\n            }\n        });\n        _.iterateObject(groupsToRefresh, function (key, group) {\n            group.calculateSelectedFromChildren();\n        });\n        return updatedCount;\n    };\n    SelectionController.prototype.onRowSelected = function (event) {\n        var rowNode = event.node;\n        // we do not store the group rows when the groups select children\n        if (this.groupSelectsChildren && rowNode.group) {\n            return;\n        }\n        if (rowNode.isSelected()) {\n            this.selectedNodes[rowNode.id] = rowNode;\n        }\n        else {\n            this.selectedNodes[rowNode.id] = undefined;\n        }\n    };\n    SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {\n        this.syncInOldRowNode(rowNode, oldNode);\n        this.syncInNewRowNode(rowNode);\n    };\n    // if the id has changed for the node, then this means the rowNode\n    // is getting used for a different data item, which breaks\n    // our selectedNodes, as the node now is mapped by the old id\n    // which is inconsistent. so to keep the old node as selected,\n    // we swap in the clone (with the old id and old data). this means\n    // the oldNode is effectively a daemon we keep a reference to,\n    // so if client calls api.getSelectedNodes(), it gets the daemon\n    // in the result. when the client un-selects, the reference to the\n    // daemon is removed. the daemon, because it's an oldNode, is not\n    // used by the grid for rendering, it's a copy of what the node used\n    // to be like before the id was changed.\n    SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {\n        var oldNodeHasDifferentId = _.exists(oldNode) && (rowNode.id !== oldNode.id);\n        if (oldNodeHasDifferentId) {\n            var oldNodeSelected = _.exists(this.selectedNodes[oldNode.id]);\n            if (oldNodeSelected) {\n                this.selectedNodes[oldNode.id] = oldNode;\n            }\n        }\n    };\n    SelectionController.prototype.syncInNewRowNode = function (rowNode) {\n        if (_.exists(this.selectedNodes[rowNode.id])) {\n            rowNode.setSelectedInitialValue(true);\n            this.selectedNodes[rowNode.id] = rowNode;\n        }\n        else {\n            rowNode.setSelectedInitialValue(false);\n        }\n    };\n    SelectionController.prototype.reset = function () {\n        this.logger.log('reset');\n        this.selectedNodes = {};\n        this.lastSelectedNode = null;\n    };\n    // returns a list of all nodes at 'best cost' - a feature to be used\n    // with groups / trees. if a group has all it's children selected,\n    // then the group appears in the result, but not the children.\n    // Designed for use with 'children' as the group selection type,\n    // where groups don't actually appear in the selection normally.\n    SelectionController.prototype.getBestCostNodeSelection = function () {\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            console.warn('getBestCostNodeSelection is only available when using normal row model');\n            return;\n        }\n        var clientSideRowModel = this.rowModel;\n        var topLevelNodes = clientSideRowModel.getTopLevelNodes();\n        if (topLevelNodes === null) {\n            console.warn('selectAll not available doing rowModel=virtual');\n            return;\n        }\n        var result = [];\n        // recursive function, to find the selected nodes\n        function traverse(nodes) {\n            for (var i = 0, l = nodes.length; i < l; i++) {\n                var node = nodes[i];\n                if (node.isSelected()) {\n                    result.push(node);\n                }\n                else {\n                    // if not selected, then if it's a group, and the group\n                    // has children, continue to search for selections\n                    if (node.group && node.children) {\n                        traverse(node.children);\n                    }\n                }\n            }\n        }\n        traverse(topLevelNodes);\n        return result;\n    };\n    SelectionController.prototype.setRowModel = function (rowModel) {\n        this.rowModel = rowModel;\n    };\n    SelectionController.prototype.isEmpty = function () {\n        var count = 0;\n        _.iterateObject(this.selectedNodes, function (nodeId, rowNode) {\n            if (rowNode) {\n                count++;\n            }\n        });\n        return count === 0;\n    };\n    SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {\n        if (justFiltered === void 0) { justFiltered = false; }\n        var callback = function (rowNode) { return rowNode.selectThisNode(false); };\n        var rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        if (justFiltered) {\n            if (!rowModelClientSide) {\n                console.error('ag-Grid: selecting just filtered only works with In Memory Row Model');\n                return;\n            }\n            var clientSideRowModel = this.rowModel;\n            clientSideRowModel.forEachNodeAfterFilter(callback);\n        }\n        else {\n            _.iterateObject(this.selectedNodes, function (id, rowNode) {\n                // remember the reference can be to null, as we never 'delete' from the map\n                if (rowNode) {\n                    callback(rowNode);\n                }\n            });\n            // this clears down the map (whereas above only sets the items in map to 'undefined')\n            this.reset();\n        }\n        // the above does not clean up the parent rows if they are selected\n        if (rowModelClientSide && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections();\n        }\n        var event = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    SelectionController.prototype.selectAllRowNodes = function (justFiltered) {\n        if (justFiltered === void 0) { justFiltered = false; }\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            throw new Error(\"selectAll only available with normal row model, ie not \" + this.rowModel.getType());\n        }\n        var clientSideRowModel = this.rowModel;\n        var callback = function (rowNode) { return rowNode.selectThisNode(true); };\n        if (justFiltered) {\n            clientSideRowModel.forEachNodeAfterFilter(callback);\n        }\n        else {\n            clientSideRowModel.forEachNode(callback);\n        }\n        // the above does not clean up the parent rows if they are selected\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections();\n        }\n        var event = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionController.prototype.selectNode = function (rowNode, tryMulti) {\n        if (rowNode) {\n            rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n        }\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionController.prototype.deselectIndex = function (rowIndex) {\n        var node = this.rowModel.getRow(rowIndex);\n        this.deselectNode(node);\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionController.prototype.deselectNode = function (rowNode) {\n        if (rowNode) {\n            rowNode.setSelectedParams({ newValue: false, clearSelection: false });\n        }\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionController.prototype.selectIndex = function (index, tryMulti) {\n        var node = this.rowModel.getRow(index);\n        this.selectNode(node, tryMulti);\n    };\n    __decorate([\n        Autowired('rowModel')\n    ], SelectionController.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], SelectionController.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], SelectionController.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], SelectionController.prototype, \"gridApi\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], SelectionController.prototype, \"setBeans\", null);\n    __decorate([\n        PostConstruct\n    ], SelectionController.prototype, \"init\", null);\n    SelectionController = __decorate([\n        Bean('selectionController')\n    ], SelectionController);\n    return SelectionController;\n}(BeanStub));\nexport { SelectionController };\n"]},"metadata":{},"sourceType":"module"}