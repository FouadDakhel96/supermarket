{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { find } from \"../util/array\";\nimport mappings from './chartMappings';\n\nvar AgChart =\n/** @class */\nfunction () {\n  function AgChart() {}\n\n  AgChart.create = function (options, container, data) {\n    options = Object.create(options); // avoid mutating user provided options\n\n    if (container) {\n      options.container = container;\n    }\n\n    if (data) {\n      options.data = data;\n    } // special handling when both `autoSize` and `width` / `height` are present in the options\n\n\n    var autoSize = options && options.autoSize;\n    var chart = create(options);\n\n    if (chart && autoSize) {\n      // `autoSize` takes precedence over `width` / `height`\n      chart.autoSize = true;\n    } // console.log(JSON.stringify(flattenObject(options), null, 4));\n\n\n    return chart;\n  };\n\n  AgChart.update = function (chart, options) {\n    var autoSize = options && options.autoSize;\n    update(chart, Object.create(options));\n\n    if (chart && autoSize) {\n      chart.autoSize = true;\n    }\n  };\n\n  return AgChart;\n}();\n\nexport { AgChart };\nvar pathToSeriesTypeMap = {\n  'cartesian.series': 'line',\n  'line.series': 'line',\n  'area.series': 'area',\n  'bar.series': 'bar',\n  'column.series': 'column',\n  'scatter.series': 'scatter',\n  'polar.series': 'pie',\n  'pie.series': 'pie'\n};\n\nfunction provideDefaultType(options, path) {\n  if (!path) {\n    // if `path` is undefined, `options` is a top-level (chart) config\n    provideDefaultChartType(options);\n  }\n\n  if (!options.type) {\n    var seriesType = pathToSeriesTypeMap[path];\n\n    if (seriesType) {\n      options.type = seriesType;\n    }\n  }\n}\n\nfunction getMapping(path) {\n  var parts = path.split('.');\n  var value = mappings;\n  parts.forEach(function (part) {\n    value = value[part];\n  });\n  return value;\n}\n\nfunction create(options, path, component) {\n  var _a;\n\n  provideDefaultType(options, path);\n\n  if (path) {\n    if (options.type) {\n      path = path + '.' + options.type;\n    }\n  } else {\n    path = options.type;\n  }\n\n  var mapping = getMapping(path);\n\n  if (mapping) {\n    provideDefaultOptions(options, mapping);\n    var meta = mapping.meta || {};\n    var constructorParams = meta.constructorParams || [];\n    var skipKeys = ['type', 'listeners'].concat(constructorParams); // TODO: Constructor params processing could be improved, but it's good enough for current params.\n\n    var constructorParamValues = constructorParams.map(function (param) {\n      return options[param];\n    }).filter(function (value) {\n      return value !== undefined;\n    });\n    component = component || new ((_a = meta.constructor).bind.apply(_a, __spreadArrays([void 0], constructorParamValues)))();\n\n    var _loop_1 = function _loop_1(key) {\n      // Process every non-special key in the config object.\n      if (skipKeys.indexOf(key) < 0) {\n        var value = options[key];\n\n        if (value && key in mapping && !(meta.setAsIs && meta.setAsIs.indexOf(key) >= 0)) {\n          if (Array.isArray(value)) {\n            var subComponents = value.map(function (config) {\n              return create(config, path + '.' + key);\n            }).filter(function (config) {\n              return !!config;\n            });\n            component[key] = subComponents;\n          } else {\n            if (mapping[key] && component[key]) {\n              // The instance property already exists on the component (e.g. chart.legend).\n              // Simply configure the existing instance, without creating a new one.\n              create(value, path + '.' + key, component[key]);\n            } else {\n              var subComponent = create(value, value.type ? path : path + '.' + key);\n\n              if (subComponent) {\n                component[key] = subComponent;\n              }\n            }\n          }\n        } else {\n          // if (key in meta.constructor.defaults) { // prevent users from creating custom properties\n          component[key] = value;\n        }\n      }\n    };\n\n    for (var key in options) {\n      _loop_1(key);\n    }\n\n    var listeners = options.listeners;\n\n    if (component && component.addEventListener && listeners) {\n      for (var key in listeners) {\n        if (listeners.hasOwnProperty(key)) {\n          var listener = listeners[key];\n\n          if (typeof listener === 'function') {\n            component.addEventListener(key, listener);\n          }\n        }\n      }\n    }\n\n    return component;\n  }\n}\n\nfunction update(component, options, path) {\n  if (!(options && typeof options === 'object')) {\n    return;\n  }\n\n  provideDefaultType(options, path);\n\n  if (path) {\n    if (options.type) {\n      path = path + '.' + options.type;\n    }\n  } else {\n    path = options.type;\n  }\n\n  var mapping = getMapping(path);\n\n  if (mapping) {\n    provideDefaultOptions(options, mapping);\n    var meta = mapping.meta || {};\n    var constructorParams = meta && meta.constructorParams || [];\n    var skipKeys = ['type'].concat(constructorParams);\n\n    for (var key in options) {\n      if (skipKeys.indexOf(key) < 0) {\n        var value = options[key];\n        var keyPath = path + '.' + key;\n\n        if (meta.setAsIs && meta.setAsIs.indexOf(key) >= 0) {\n          component[key] = value;\n        } else {\n          var oldValue = component[key];\n\n          if (Array.isArray(oldValue) && Array.isArray(value)) {\n            if (path in mappings) {\n              // component is a chart\n              if (key === 'series') {\n                var chart = component;\n                var configs = value;\n                var allSeries = oldValue;\n                var prevSeries = void 0;\n                var i = 0;\n\n                for (; i < configs.length; i++) {\n                  var config = configs[i];\n                  var series = allSeries[i];\n\n                  if (series) {\n                    provideDefaultType(config, keyPath);\n\n                    if (series.type === config.type) {\n                      update(series, config, keyPath);\n                    } else {\n                      var newSeries = create(config, keyPath);\n                      chart.removeSeries(series);\n                      chart.addSeriesAfter(newSeries, prevSeries);\n                      series = newSeries;\n                    }\n                  } else {\n                    // more new configs than existing series\n                    var newSeries = create(config, keyPath);\n                    chart.addSeries(newSeries);\n                  }\n\n                  prevSeries = series;\n                } // more existing series than new configs\n\n\n                for (; i < allSeries.length; i++) {\n                  var series = allSeries[i];\n\n                  if (series) {\n                    chart.removeSeries(series);\n                  }\n                }\n              } else if (key === 'axes') {\n                var chart = component;\n                var configs = value;\n                var axes = oldValue;\n                var axesToAdd = [];\n                var axesToUpdate = [];\n\n                var _loop_2 = function _loop_2(config) {\n                  var axisToUpdate = find(axes, function (axis) {\n                    return axis.type === config.type && axis.position === config.position;\n                  });\n\n                  if (axisToUpdate) {\n                    axesToUpdate.push(axisToUpdate);\n                    update(axisToUpdate, config, keyPath);\n                  } else {\n                    var axisToAdd = create(config, keyPath);\n\n                    if (axisToAdd) {\n                      axesToAdd.push(axisToAdd);\n                    }\n                  }\n                };\n\n                for (var _i = 0, configs_1 = configs; _i < configs_1.length; _i++) {\n                  var config = configs_1[_i];\n\n                  _loop_2(config);\n                }\n\n                chart.axes = axesToUpdate.concat(axesToAdd);\n              }\n            } else {\n              component[key] = value;\n            }\n          } else if (typeof oldValue === 'object') {\n            if (value) {\n              update(oldValue, value, value.type ? path : keyPath);\n            } else if (key in options) {\n              component[key] = value;\n            }\n          } else {\n            var subComponent = isObject(value) && create(value, value.type ? path : keyPath);\n\n            if (subComponent) {\n              component[key] = subComponent;\n            } else {\n              component[key] = value;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (path in mappings) {\n    // top-level component (chart)\n    component.performLayout();\n  }\n}\n\nfunction provideDefaultChartType(options) {\n  // If chart type is not specified, try to infer it from the type of first series.\n  if (!options.type) {\n    var series = options.series && options.series[0];\n\n    if (series && series.type) {\n      outerLoop: for (var chartType in mappings) {\n        for (var seriesType in mappings[chartType].series) {\n          if (series.type === seriesType) {\n            options.type = chartType;\n            break outerLoop;\n          }\n        }\n      }\n    }\n\n    if (!options.type) {\n      options.type = 'cartesian';\n    }\n  }\n}\n/**\n * If certain options were not provided by the user, use the defaults from the mapping.\n * @param options\n * @param mapping\n */\n\n\nfunction provideDefaultOptions(options, mapping) {\n  var defaults = mapping && mapping.meta && mapping.meta.defaults;\n\n  if (defaults) {\n    for (var key in defaults) {\n      if (!(key in options)) {\n        options[key] = defaults[key];\n      }\n    }\n  }\n}\n\nfunction isObject(value) {\n  return typeof value === 'object' && !Array.isArray(value);\n}","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/ag-charts-community/dist/es6/chart/agChart.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","find","mappings","AgChart","create","options","container","data","Object","autoSize","chart","update","pathToSeriesTypeMap","provideDefaultType","path","provideDefaultChartType","type","seriesType","getMapping","parts","split","value","forEach","part","component","_a","mapping","provideDefaultOptions","meta","constructorParams","skipKeys","concat","constructorParamValues","map","param","filter","undefined","constructor","bind","apply","_loop_1","key","indexOf","setAsIs","isArray","subComponents","config","subComponent","listeners","addEventListener","hasOwnProperty","listener","keyPath","oldValue","configs","allSeries","prevSeries","series","newSeries","removeSeries","addSeriesAfter","addSeries","axes","axesToAdd","axesToUpdate","_loop_2","axisToUpdate","axis","position","push","axisToAdd","_i","configs_1","isObject","performLayout","outerLoop","chartType","defaults"],"mappings":"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","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { find } from \"../util/array\";\nimport mappings from './chartMappings';\nvar AgChart = /** @class */ (function () {\n    function AgChart() {\n    }\n    AgChart.create = function (options, container, data) {\n        options = Object.create(options); // avoid mutating user provided options\n        if (container) {\n            options.container = container;\n        }\n        if (data) {\n            options.data = data;\n        }\n        // special handling when both `autoSize` and `width` / `height` are present in the options\n        var autoSize = options && options.autoSize;\n        var chart = create(options);\n        if (chart && autoSize) { // `autoSize` takes precedence over `width` / `height`\n            chart.autoSize = true;\n        }\n        // console.log(JSON.stringify(flattenObject(options), null, 4));\n        return chart;\n    };\n    AgChart.update = function (chart, options) {\n        var autoSize = options && options.autoSize;\n        update(chart, Object.create(options));\n        if (chart && autoSize) {\n            chart.autoSize = true;\n        }\n    };\n    return AgChart;\n}());\nexport { AgChart };\nvar pathToSeriesTypeMap = {\n    'cartesian.series': 'line',\n    'line.series': 'line',\n    'area.series': 'area',\n    'bar.series': 'bar',\n    'column.series': 'column',\n    'scatter.series': 'scatter',\n    'polar.series': 'pie',\n    'pie.series': 'pie'\n};\nfunction provideDefaultType(options, path) {\n    if (!path) { // if `path` is undefined, `options` is a top-level (chart) config\n        provideDefaultChartType(options);\n    }\n    if (!options.type) {\n        var seriesType = pathToSeriesTypeMap[path];\n        if (seriesType) {\n            options.type = seriesType;\n        }\n    }\n}\nfunction getMapping(path) {\n    var parts = path.split('.');\n    var value = mappings;\n    parts.forEach(function (part) {\n        value = value[part];\n    });\n    return value;\n}\nfunction create(options, path, component) {\n    var _a;\n    provideDefaultType(options, path);\n    if (path) {\n        if (options.type) {\n            path = path + '.' + options.type;\n        }\n    }\n    else {\n        path = options.type;\n    }\n    var mapping = getMapping(path);\n    if (mapping) {\n        provideDefaultOptions(options, mapping);\n        var meta = mapping.meta || {};\n        var constructorParams = meta.constructorParams || [];\n        var skipKeys = ['type', 'listeners'].concat(constructorParams);\n        // TODO: Constructor params processing could be improved, but it's good enough for current params.\n        var constructorParamValues = constructorParams\n            .map(function (param) { return options[param]; })\n            .filter(function (value) { return value !== undefined; });\n        component = component || new ((_a = meta.constructor).bind.apply(_a, __spreadArrays([void 0], constructorParamValues)))();\n        var _loop_1 = function (key) {\n            // Process every non-special key in the config object.\n            if (skipKeys.indexOf(key) < 0) {\n                var value = options[key];\n                if (value && key in mapping && !(meta.setAsIs && meta.setAsIs.indexOf(key) >= 0)) {\n                    if (Array.isArray(value)) {\n                        var subComponents = value.map(function (config) { return create(config, path + '.' + key); }).filter(function (config) { return !!config; });\n                        component[key] = subComponents;\n                    }\n                    else {\n                        if (mapping[key] && component[key]) {\n                            // The instance property already exists on the component (e.g. chart.legend).\n                            // Simply configure the existing instance, without creating a new one.\n                            create(value, path + '.' + key, component[key]);\n                        }\n                        else {\n                            var subComponent = create(value, value.type ? path : path + '.' + key);\n                            if (subComponent) {\n                                component[key] = subComponent;\n                            }\n                        }\n                    }\n                }\n                else { // if (key in meta.constructor.defaults) { // prevent users from creating custom properties\n                    component[key] = value;\n                }\n            }\n        };\n        for (var key in options) {\n            _loop_1(key);\n        }\n        var listeners = options.listeners;\n        if (component && component.addEventListener && listeners) {\n            for (var key in listeners) {\n                if (listeners.hasOwnProperty(key)) {\n                    var listener = listeners[key];\n                    if (typeof listener === 'function') {\n                        component.addEventListener(key, listener);\n                    }\n                }\n            }\n        }\n        return component;\n    }\n}\nfunction update(component, options, path) {\n    if (!(options && typeof options === 'object')) {\n        return;\n    }\n    provideDefaultType(options, path);\n    if (path) {\n        if (options.type) {\n            path = path + '.' + options.type;\n        }\n    }\n    else {\n        path = options.type;\n    }\n    var mapping = getMapping(path);\n    if (mapping) {\n        provideDefaultOptions(options, mapping);\n        var meta = mapping.meta || {};\n        var constructorParams = meta && meta.constructorParams || [];\n        var skipKeys = ['type'].concat(constructorParams);\n        for (var key in options) {\n            if (skipKeys.indexOf(key) < 0) {\n                var value = options[key];\n                var keyPath = path + '.' + key;\n                if (meta.setAsIs && meta.setAsIs.indexOf(key) >= 0) {\n                    component[key] = value;\n                }\n                else {\n                    var oldValue = component[key];\n                    if (Array.isArray(oldValue) && Array.isArray(value)) {\n                        if (path in mappings) { // component is a chart\n                            if (key === 'series') {\n                                var chart = component;\n                                var configs = value;\n                                var allSeries = oldValue;\n                                var prevSeries = void 0;\n                                var i = 0;\n                                for (; i < configs.length; i++) {\n                                    var config = configs[i];\n                                    var series = allSeries[i];\n                                    if (series) {\n                                        provideDefaultType(config, keyPath);\n                                        if (series.type === config.type) {\n                                            update(series, config, keyPath);\n                                        }\n                                        else {\n                                            var newSeries = create(config, keyPath);\n                                            chart.removeSeries(series);\n                                            chart.addSeriesAfter(newSeries, prevSeries);\n                                            series = newSeries;\n                                        }\n                                    }\n                                    else { // more new configs than existing series\n                                        var newSeries = create(config, keyPath);\n                                        chart.addSeries(newSeries);\n                                    }\n                                    prevSeries = series;\n                                }\n                                // more existing series than new configs\n                                for (; i < allSeries.length; i++) {\n                                    var series = allSeries[i];\n                                    if (series) {\n                                        chart.removeSeries(series);\n                                    }\n                                }\n                            }\n                            else if (key === 'axes') {\n                                var chart = component;\n                                var configs = value;\n                                var axes = oldValue;\n                                var axesToAdd = [];\n                                var axesToUpdate = [];\n                                var _loop_2 = function (config) {\n                                    var axisToUpdate = find(axes, function (axis) {\n                                        return axis.type === config.type && axis.position === config.position;\n                                    });\n                                    if (axisToUpdate) {\n                                        axesToUpdate.push(axisToUpdate);\n                                        update(axisToUpdate, config, keyPath);\n                                    }\n                                    else {\n                                        var axisToAdd = create(config, keyPath);\n                                        if (axisToAdd) {\n                                            axesToAdd.push(axisToAdd);\n                                        }\n                                    }\n                                };\n                                for (var _i = 0, configs_1 = configs; _i < configs_1.length; _i++) {\n                                    var config = configs_1[_i];\n                                    _loop_2(config);\n                                }\n                                chart.axes = axesToUpdate.concat(axesToAdd);\n                            }\n                        }\n                        else {\n                            component[key] = value;\n                        }\n                    }\n                    else if (typeof oldValue === 'object') {\n                        if (value) {\n                            update(oldValue, value, value.type ? path : keyPath);\n                        }\n                        else if (key in options) {\n                            component[key] = value;\n                        }\n                    }\n                    else {\n                        var subComponent = isObject(value) && create(value, value.type ? path : keyPath);\n                        if (subComponent) {\n                            component[key] = subComponent;\n                        }\n                        else {\n                            component[key] = value;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (path in mappings) { // top-level component (chart)\n        component.performLayout();\n    }\n}\nfunction provideDefaultChartType(options) {\n    // If chart type is not specified, try to infer it from the type of first series.\n    if (!options.type) {\n        var series = options.series && options.series[0];\n        if (series && series.type) {\n            outerLoop: for (var chartType in mappings) {\n                for (var seriesType in mappings[chartType].series) {\n                    if (series.type === seriesType) {\n                        options.type = chartType;\n                        break outerLoop;\n                    }\n                }\n            }\n        }\n        if (!options.type) {\n            options.type = 'cartesian';\n        }\n    }\n}\n/**\n * If certain options were not provided by the user, use the defaults from the mapping.\n * @param options\n * @param mapping\n */\nfunction provideDefaultOptions(options, mapping) {\n    var defaults = mapping && mapping.meta && mapping.meta.defaults;\n    if (defaults) {\n        for (var key in defaults) {\n            if (!(key in options)) {\n                options[key] = defaults[key];\n            }\n        }\n    }\n}\nfunction isObject(value) {\n    return typeof value === 'object' && !Array.isArray(value);\n}\n"]},"metadata":{},"sourceType":"module"}