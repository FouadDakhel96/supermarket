{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, BeanStub, ModuleNames, ModuleRegistry, Optional } from \"@ag-grid-community/core\";\nimport { ChartDataModel } from \"./chartDataModel\";\n\nvar ChartDatasource =\n/** @class */\nfunction (_super) {\n  __extends(ChartDatasource, _super);\n\n  function ChartDatasource() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ChartDatasource.prototype.getData = function (params) {\n    var result = this.extractRowsFromGridRowModel(params);\n    result.data = this.aggregateRowsByDimension(params, result.data);\n    return result;\n  };\n\n  ChartDatasource.prototype.extractRowsFromGridRowModel = function (params) {\n    var _this = this;\n\n    var extractedRowData = [];\n    var columnNames = {}; // maps used to keep track of expanded groups that need to be removed\n\n    var groupNodeIndexes = {};\n    var groupsToRemove = {}; // make sure enough rows in range to chart. if user filters and less rows, then end row will be\n    // the last displayed row, not where the range ends.\n\n    var modelLastRow = this.gridRowModel.getRowCount() - 1;\n    var rangeLastRow = params.endRow >= 0 ? Math.min(params.endRow, modelLastRow) : modelLastRow;\n    var numRows = rangeLastRow - params.startRow + 1;\n\n    var _loop_1 = function (i) {\n      var data = {};\n      var rowNode = this_1.gridRowModel.getRow(i + params.startRow); // first get data for dimensions columns\n\n      params.dimensionCols.forEach(function (col) {\n        var colId = col.colId;\n\n        var column = _this.columnController.getGridColumn(colId);\n\n        if (column) {\n          var valueObject = _this.valueService.getValue(column, rowNode); // when grouping we also need to build up multi category labels for charts\n\n\n          if (params.grouping) {\n            var valueString = valueObject && valueObject.toString ? String(valueObject.toString()) : ''; // traverse parents to extract group label path\n\n            var labels = _this.getGroupLabels(rowNode, valueString);\n\n            data[colId] = {\n              labels: labels,\n              toString: function () {\n                return this.labels.filter(function (l) {\n                  return !!l;\n                }).reverse().join(' - ');\n              }\n            }; // keep track of group node indexes so they can be padded when other groups are expanded\n\n            if (rowNode.group) {\n              groupNodeIndexes[labels.toString()] = i;\n            } // if node (group or leaf) has parents then it is expanded and should be removed\n\n\n            var groupKey = labels.slice(1, labels.length).toString();\n\n            if (groupKey) {\n              groupsToRemove[groupKey] = groupNodeIndexes[groupKey];\n            }\n          } else {\n            // leaf nodes can be directly added to dimension columns\n            data[colId] = valueObject;\n          }\n        } else {\n          // introduce a default category when no dimensions exist with a value based off row index (+1)\n          data[ChartDataModel.DEFAULT_CATEGORY] = i + 1;\n        }\n      }); // then get data for value columns\n\n      params.valueCols.forEach(function (col) {\n        var columnNamesArr = []; // pivot keys should be added first\n\n        var pivotKeys = col.getColDef().pivotKeys;\n\n        if (pivotKeys) {\n          columnNamesArr = pivotKeys.slice();\n        } // then add column header name to results\n\n\n        var headerName = col.getColDef().headerName;\n\n        if (headerName) {\n          columnNamesArr.push(headerName);\n        } // add array of column names to results\n\n\n        if (columnNamesArr.length > 0) {\n          columnNames[col.getId()] = columnNamesArr;\n        } // add data value to value column\n\n\n        var value = _this.valueService.getValue(col, rowNode);\n\n        data[col.getId()] = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n      }); // add data to results\n\n      extractedRowData.push(data);\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < numRows; i++) {\n      _loop_1(i);\n    }\n\n    if (params.grouping) {\n      var groupIndexesToRemove_1 = _.values(groupsToRemove);\n\n      extractedRowData = extractedRowData.filter(function (_1, index) {\n        return !_.includes(groupIndexesToRemove_1, index);\n      });\n    }\n\n    return {\n      data: extractedRowData,\n      columnNames: columnNames\n    };\n  };\n\n  ChartDatasource.prototype.aggregateRowsByDimension = function (params, dataFromGrid) {\n    var _this = this;\n\n    var dimensionCols = params.dimensionCols;\n\n    if (!params.aggFunc || dimensionCols.length === 0) {\n      return dataFromGrid;\n    }\n\n    var lastCol = _.last(dimensionCols);\n\n    var lastColId = lastCol && lastCol.colId;\n    var map = {};\n    var dataAggregated = [];\n    dataFromGrid.forEach(function (data) {\n      var currentMap = map;\n      dimensionCols.forEach(function (col) {\n        var colId = col.colId;\n        var key = data[colId];\n\n        if (colId === lastColId) {\n          var groupItem_1 = currentMap[key];\n\n          if (!groupItem_1) {\n            groupItem_1 = {\n              __children: []\n            };\n            dimensionCols.forEach(function (col) {\n              var colId = col.colId;\n              groupItem_1[colId] = data[colId];\n            });\n            currentMap[key] = groupItem_1;\n            dataAggregated.push(groupItem_1);\n          }\n\n          groupItem_1.__children.push(data);\n        } else {\n          // map of maps\n          if (!currentMap[key]) {\n            currentMap[key] = {};\n          }\n\n          currentMap = currentMap[key];\n        }\n      });\n    });\n    dataAggregated.forEach(function (groupItem) {\n      return params.valueCols.forEach(function (col) {\n        var dataToAgg = groupItem.__children.map(function (child) {\n          return child[col.getId()];\n        });\n\n        var aggResult = 0;\n\n        if (ModuleRegistry.assertRegistered(ModuleNames.RowGroupingModule, 'Charting Aggregation')) {\n          aggResult = _this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc);\n        }\n\n        groupItem[col.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n      });\n    });\n    return dataAggregated;\n  };\n\n  ChartDatasource.prototype.getGroupLabels = function (rowNode, initialLabel) {\n    var labels = [initialLabel];\n\n    while (rowNode.level !== 0) {\n      rowNode = rowNode.parent;\n      labels.push(rowNode.key);\n    }\n\n    return labels;\n  };\n\n  __decorate([Autowired('rowModel')], ChartDatasource.prototype, \"gridRowModel\", void 0);\n\n  __decorate([Autowired('valueService')], ChartDatasource.prototype, \"valueService\", void 0);\n\n  __decorate([Autowired('columnController')], ChartDatasource.prototype, \"columnController\", void 0);\n\n  __decorate([Optional('aggregationStage')], ChartDatasource.prototype, \"aggregationStage\", void 0);\n\n  return ChartDatasource;\n}(BeanStub);\n\nexport { ChartDatasource };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/charts/dist/es6/chartAdaptor/chartComp/chartDatasource.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","BeanStub","ModuleNames","ModuleRegistry","Optional","ChartDataModel","ChartDatasource","_super","apply","getData","params","result","extractRowsFromGridRowModel","data","aggregateRowsByDimension","_this","extractedRowData","columnNames","groupNodeIndexes","groupsToRemove","modelLastRow","gridRowModel","getRowCount","rangeLastRow","endRow","Math","min","numRows","startRow","_loop_1","rowNode","this_1","getRow","dimensionCols","forEach","col","colId","column","columnController","getGridColumn","valueObject","valueService","getValue","grouping","valueString","toString","String","labels","getGroupLabels","filter","l","reverse","join","group","groupKey","slice","DEFAULT_CATEGORY","valueCols","columnNamesArr","pivotKeys","getColDef","headerName","push","getId","value","toNumber","groupIndexesToRemove_1","values","_1","index","includes","dataFromGrid","aggFunc","lastCol","last","lastColId","map","dataAggregated","currentMap","groupItem_1","__children","groupItem","dataToAgg","child","aggResult","assertRegistered","RowGroupingModule","aggregationStage","aggregateValues","initialLabel","level","parent"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, BeanStub, ModuleNames, ModuleRegistry, Optional } from \"@ag-grid-community/core\";\nimport { ChartDataModel } from \"./chartDataModel\";\nvar ChartDatasource = /** @class */ (function (_super) {\n    __extends(ChartDatasource, _super);\n    function ChartDatasource() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ChartDatasource.prototype.getData = function (params) {\n        var result = this.extractRowsFromGridRowModel(params);\n        result.data = this.aggregateRowsByDimension(params, result.data);\n        return result;\n    };\n    ChartDatasource.prototype.extractRowsFromGridRowModel = function (params) {\n        var _this = this;\n        var extractedRowData = [];\n        var columnNames = {};\n        // maps used to keep track of expanded groups that need to be removed\n        var groupNodeIndexes = {};\n        var groupsToRemove = {};\n        // make sure enough rows in range to chart. if user filters and less rows, then end row will be\n        // the last displayed row, not where the range ends.\n        var modelLastRow = this.gridRowModel.getRowCount() - 1;\n        var rangeLastRow = params.endRow >= 0 ? Math.min(params.endRow, modelLastRow) : modelLastRow;\n        var numRows = rangeLastRow - params.startRow + 1;\n        var _loop_1 = function (i) {\n            var data = {};\n            var rowNode = this_1.gridRowModel.getRow(i + params.startRow);\n            // first get data for dimensions columns\n            params.dimensionCols.forEach(function (col) {\n                var colId = col.colId;\n                var column = _this.columnController.getGridColumn(colId);\n                if (column) {\n                    var valueObject = _this.valueService.getValue(column, rowNode);\n                    // when grouping we also need to build up multi category labels for charts\n                    if (params.grouping) {\n                        var valueString = valueObject && valueObject.toString ? String(valueObject.toString()) : '';\n                        // traverse parents to extract group label path\n                        var labels = _this.getGroupLabels(rowNode, valueString);\n                        data[colId] = { labels: labels, toString: function () { return this.labels.filter(function (l) { return !!l; }).reverse().join(' - '); } };\n                        // keep track of group node indexes so they can be padded when other groups are expanded\n                        if (rowNode.group) {\n                            groupNodeIndexes[labels.toString()] = i;\n                        }\n                        // if node (group or leaf) has parents then it is expanded and should be removed\n                        var groupKey = labels.slice(1, labels.length).toString();\n                        if (groupKey) {\n                            groupsToRemove[groupKey] = groupNodeIndexes[groupKey];\n                        }\n                    }\n                    else {\n                        // leaf nodes can be directly added to dimension columns\n                        data[colId] = valueObject;\n                    }\n                }\n                else {\n                    // introduce a default category when no dimensions exist with a value based off row index (+1)\n                    data[ChartDataModel.DEFAULT_CATEGORY] = i + 1;\n                }\n            });\n            // then get data for value columns\n            params.valueCols.forEach(function (col) {\n                var columnNamesArr = [];\n                // pivot keys should be added first\n                var pivotKeys = col.getColDef().pivotKeys;\n                if (pivotKeys) {\n                    columnNamesArr = pivotKeys.slice();\n                }\n                // then add column header name to results\n                var headerName = col.getColDef().headerName;\n                if (headerName) {\n                    columnNamesArr.push(headerName);\n                }\n                // add array of column names to results\n                if (columnNamesArr.length > 0) {\n                    columnNames[col.getId()] = columnNamesArr;\n                }\n                // add data value to value column\n                var value = _this.valueService.getValue(col, rowNode);\n                data[col.getId()] = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n            });\n            // add data to results\n            extractedRowData.push(data);\n        };\n        var this_1 = this;\n        for (var i = 0; i < numRows; i++) {\n            _loop_1(i);\n        }\n        if (params.grouping) {\n            var groupIndexesToRemove_1 = _.values(groupsToRemove);\n            extractedRowData = extractedRowData.filter(function (_1, index) { return !_.includes(groupIndexesToRemove_1, index); });\n        }\n        return { data: extractedRowData, columnNames: columnNames };\n    };\n    ChartDatasource.prototype.aggregateRowsByDimension = function (params, dataFromGrid) {\n        var _this = this;\n        var dimensionCols = params.dimensionCols;\n        if (!params.aggFunc || dimensionCols.length === 0) {\n            return dataFromGrid;\n        }\n        var lastCol = _.last(dimensionCols);\n        var lastColId = lastCol && lastCol.colId;\n        var map = {};\n        var dataAggregated = [];\n        dataFromGrid.forEach(function (data) {\n            var currentMap = map;\n            dimensionCols.forEach(function (col) {\n                var colId = col.colId;\n                var key = data[colId];\n                if (colId === lastColId) {\n                    var groupItem_1 = currentMap[key];\n                    if (!groupItem_1) {\n                        groupItem_1 = { __children: [] };\n                        dimensionCols.forEach(function (col) {\n                            var colId = col.colId;\n                            groupItem_1[colId] = data[colId];\n                        });\n                        currentMap[key] = groupItem_1;\n                        dataAggregated.push(groupItem_1);\n                    }\n                    groupItem_1.__children.push(data);\n                }\n                else {\n                    // map of maps\n                    if (!currentMap[key]) {\n                        currentMap[key] = {};\n                    }\n                    currentMap = currentMap[key];\n                }\n            });\n        });\n        dataAggregated.forEach(function (groupItem) { return params.valueCols.forEach(function (col) {\n            var dataToAgg = groupItem.__children.map(function (child) { return child[col.getId()]; });\n            var aggResult = 0;\n            if (ModuleRegistry.assertRegistered(ModuleNames.RowGroupingModule, 'Charting Aggregation')) {\n                aggResult = _this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc);\n            }\n            groupItem[col.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n        }); });\n        return dataAggregated;\n    };\n    ChartDatasource.prototype.getGroupLabels = function (rowNode, initialLabel) {\n        var labels = [initialLabel];\n        while (rowNode.level !== 0) {\n            rowNode = rowNode.parent;\n            labels.push(rowNode.key);\n        }\n        return labels;\n    };\n    __decorate([\n        Autowired('rowModel')\n    ], ChartDatasource.prototype, \"gridRowModel\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], ChartDatasource.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], ChartDatasource.prototype, \"columnController\", void 0);\n    __decorate([\n        Optional('aggregationStage')\n    ], ChartDatasource.prototype, \"aggregationStage\", void 0);\n    return ChartDatasource;\n}(BeanStub));\nexport { ChartDatasource };\n"]},"metadata":{},"sourceType":"module"}