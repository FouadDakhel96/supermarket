{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, Optional, PostConstruct } from \"../context/context\";\nimport { Constants } from \"../constants\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { _ } from \"../utils\";\n\nvar NavigationService =\n/** @class */\nfunction (_super) {\n  __extends(NavigationService, _super);\n\n  function NavigationService() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.timeLastPageEventProcessed = 0;\n    return _this;\n  }\n\n  NavigationService.prototype.init = function () {\n    this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();\n  };\n\n  NavigationService.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  NavigationService.prototype.handlePageScrollingKey = function (event) {\n    var key = event.which || event.keyCode;\n    var alt = event.altKey;\n    var ctrl = event.ctrlKey;\n    var currentCell = this.mouseEventService.getCellPositionForEvent(event);\n\n    if (!currentCell) {\n      return false;\n    }\n\n    var processed = false;\n\n    switch (key) {\n      case Constants.KEY_PAGE_HOME:\n      case Constants.KEY_PAGE_END:\n        // handle home and end when ctrl & alt are NOT pressed\n        if (!ctrl && !alt) {\n          this.onHomeOrEndKey(key);\n          processed = true;\n        }\n\n        break;\n\n      case Constants.KEY_LEFT:\n      case Constants.KEY_RIGHT:\n        // handle left and right when ctrl is pressed only\n        if (ctrl && !alt) {\n          this.onCtrlLeftOrRight(key, currentCell);\n          processed = true;\n        }\n\n        break;\n\n      case Constants.KEY_UP:\n      case Constants.KEY_DOWN:\n        // handle up and down when ctrl is pressed only\n        if (ctrl && !alt) {\n          this.onCtrlUpOrDown(key, currentCell);\n          processed = true;\n        }\n\n        break;\n\n      case Constants.KEY_PAGE_DOWN:\n        // handle page up and page down when ctrl & alt are NOT pressed\n        if (!ctrl && !alt) {\n          this.onPageDown(currentCell);\n          processed = true;\n        }\n\n        break;\n\n      case Constants.KEY_PAGE_UP:\n        // handle page up and page down when ctrl & alt are NOT pressed\n        if (!ctrl && !alt) {\n          this.onPageUp(currentCell);\n          processed = true;\n        }\n\n        break;\n    }\n\n    if (processed) {\n      event.preventDefault();\n    }\n\n    return processed;\n  }; // the page up/down keys caused a problem, in that if the user\n  // held the page up/down key down, lots of events got generated,\n  // which clogged up the event queue (as they take time to process)\n  // which in turn froze the grid. Logic below makes sure we wait 100ms\n  // between processing the page up/down events, so when user has finger\n  // held down on key, we ignore page up/down events until 100ms has passed,\n  // which effectively empties the queue of page up/down events.\n\n\n  NavigationService.prototype.isTimeSinceLastPageEventToRecent = function () {\n    var now = new Date().getTime();\n    var diff = now - this.timeLastPageEventProcessed;\n    return diff < 100;\n  };\n\n  NavigationService.prototype.setTimeLastPageEventProcessed = function () {\n    this.timeLastPageEventProcessed = new Date().getTime();\n  };\n\n  NavigationService.prototype.onPageDown = function (gridCell) {\n    if (this.isTimeSinceLastPageEventToRecent()) {\n      return;\n    }\n\n    var scrollPosition = this.gridPanel.getVScrollPosition();\n    var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n\n    if (this.gridPanel.isHorizontalScrollShowing()) {\n      pixelsInOnePage -= this.scrollWidth;\n    }\n\n    var pagingPixelOffset = this.paginationProxy.getPixelOffset();\n    var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;\n    var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);\n    var scrollIndex = currentPageBottomRow;\n    var currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;\n    var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;\n    var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n    var pageLastRow = this.paginationProxy.getPageLastRow();\n\n    if (focusIndex > pageLastRow) {\n      focusIndex = pageLastRow;\n    }\n\n    if (scrollIndex > pageLastRow) {\n      scrollIndex = pageLastRow;\n    }\n\n    this.navigateTo(scrollIndex, 'top', null, focusIndex, gridCell.column);\n    this.setTimeLastPageEventProcessed();\n  };\n\n  NavigationService.prototype.onPageUp = function (gridCell) {\n    if (this.isTimeSinceLastPageEventToRecent()) {\n      return;\n    }\n\n    var scrollPosition = this.gridPanel.getVScrollPosition();\n    var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n\n    if (this.gridPanel.isHorizontalScrollShowing()) {\n      pixelsInOnePage -= this.scrollWidth;\n    }\n\n    var pagingPixelOffset = this.paginationProxy.getPixelOffset();\n    var currentPageTopPixel = scrollPosition.top;\n    var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);\n    var scrollIndex = currentPageTopRow;\n    var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);\n    var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;\n    var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n    var firstRow = this.paginationProxy.getPageFirstRow();\n\n    if (focusIndex < firstRow) {\n      focusIndex = firstRow;\n    }\n\n    if (scrollIndex < firstRow) {\n      scrollIndex = firstRow;\n    }\n\n    this.navigateTo(scrollIndex, 'bottom', null, focusIndex, gridCell.column);\n    this.setTimeLastPageEventProcessed();\n  }; // common logic to navigate. takes parameters:\n  // scrollIndex - what row to vertically scroll to\n  // scrollType - what position to put scroll index ie top/bottom\n  // scrollColumn - what column to horizontally scroll to\n  // focusIndex / focusColumn - for page up / down, we want to scroll to one row/column, but focus another\n\n\n  NavigationService.prototype.navigateTo = function (scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn) {\n    if (_.exists(scrollColumn)) {\n      this.gridPanel.ensureColumnVisible(scrollColumn);\n    }\n\n    if (_.exists(scrollIndex)) {\n      this.gridPanel.ensureIndexVisible(scrollIndex, scrollType);\n    } // make sure the cell is rendered, needed if we are to focus\n\n\n    this.animationFrameService.flushAllFrames(); // if we don't do this, the range will be left on the last cell, which will leave the last focused cell\n    // highlighted.\n\n    this.focusController.setFocusedCell(focusIndex, focusColumn, null, true);\n\n    if (this.rangeController) {\n      var cellPosition = {\n        rowIndex: focusIndex,\n        rowPinned: null,\n        column: focusColumn\n      };\n      this.rangeController.setRangeToCell(cellPosition);\n    }\n  }; // ctrl + up/down will bring focus to same column, first/last row. no horizontal scrolling.\n\n\n  NavigationService.prototype.onCtrlUpOrDown = function (key, gridCell) {\n    var upKey = key === Constants.KEY_UP;\n    var rowIndexToScrollTo = upKey ? 0 : this.paginationProxy.getPageLastRow();\n    this.navigateTo(rowIndexToScrollTo, null, gridCell.column, rowIndexToScrollTo, gridCell.column);\n  }; // ctrl + left/right will bring focus to same row, first/last cell. no vertical scrolling.\n\n\n  NavigationService.prototype.onCtrlLeftOrRight = function (key, gridCell) {\n    var leftKey = key === Constants.KEY_LEFT;\n    var allColumns = this.columnController.getAllDisplayedColumns();\n    var columnToSelect = leftKey ? allColumns[0] : _.last(allColumns);\n    this.navigateTo(gridCell.rowIndex, null, columnToSelect, gridCell.rowIndex, columnToSelect);\n  }; // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring\n  // same cell into view (which means either scroll all the way up, or all the way down).\n\n\n  NavigationService.prototype.onHomeOrEndKey = function (key) {\n    var homeKey = key === Constants.KEY_PAGE_HOME;\n    var allColumns = this.columnController.getAllDisplayedColumns();\n    var columnToSelect = homeKey ? allColumns[0] : _.last(allColumns);\n    var rowIndexToScrollTo = homeKey ? 0 : this.paginationProxy.getPageLastRow();\n    this.navigateTo(rowIndexToScrollTo, null, columnToSelect, rowIndexToScrollTo, columnToSelect);\n  };\n\n  __decorate([Autowired('mouseEventService')], NavigationService.prototype, \"mouseEventService\", void 0);\n\n  __decorate([Autowired('paginationProxy')], NavigationService.prototype, \"paginationProxy\", void 0);\n\n  __decorate([Autowired('focusController')], NavigationService.prototype, \"focusController\", void 0);\n\n  __decorate([Autowired('animationFrameService')], NavigationService.prototype, \"animationFrameService\", void 0);\n\n  __decorate([Optional('rangeController')], NavigationService.prototype, \"rangeController\", void 0);\n\n  __decorate([Autowired('columnController')], NavigationService.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], NavigationService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([PostConstruct], NavigationService.prototype, \"init\", null);\n\n  NavigationService = __decorate([Bean('navigationService')], NavigationService);\n  return NavigationService;\n}(BeanStub);\n\nexport { NavigationService };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/gridPanel/navigationService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","Optional","PostConstruct","Constants","BeanStub","_","NavigationService","_super","_this","apply","timeLastPageEventProcessed","init","scrollWidth","gridOptionsWrapper","getScrollbarWidth","registerGridComp","gridPanel","handlePageScrollingKey","event","which","keyCode","alt","altKey","ctrl","ctrlKey","currentCell","mouseEventService","getCellPositionForEvent","processed","KEY_PAGE_HOME","KEY_PAGE_END","onHomeOrEndKey","KEY_LEFT","KEY_RIGHT","onCtrlLeftOrRight","KEY_UP","KEY_DOWN","onCtrlUpOrDown","KEY_PAGE_DOWN","onPageDown","KEY_PAGE_UP","onPageUp","preventDefault","isTimeSinceLastPageEventToRecent","now","Date","getTime","diff","setTimeLastPageEventProcessed","gridCell","scrollPosition","getVScrollPosition","pixelsInOnePage","bottom","top","isHorizontalScrollShowing","pagingPixelOffset","paginationProxy","getPixelOffset","currentPageBottomPixel","currentPageBottomRow","getRowIndexAtPixel","scrollIndex","currentCellPixel","getRow","rowIndex","rowTop","nextCellPixel","focusIndex","pageLastRow","getPageLastRow","navigateTo","column","currentPageTopPixel","currentPageTopRow","currentRowNode","rowHeight","firstRow","getPageFirstRow","scrollType","scrollColumn","focusColumn","exists","ensureColumnVisible","ensureIndexVisible","animationFrameService","flushAllFrames","focusController","setFocusedCell","rangeController","cellPosition","rowPinned","setRangeToCell","upKey","rowIndexToScrollTo","leftKey","allColumns","columnController","getAllDisplayedColumns","columnToSelect","last","homeKey"],"mappings":"AAAA;;;;;;AAMA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,cAAa,GAAG,uBAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,cAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd;AAAiB,YAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAA1C;AAAwD,KAF9E;;AAGA,WAAOP,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGd,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HhB,CAA3H;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACoB,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACc,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BpB,CAAC,CAACc,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAclB,MAAM,CAACuB,cAAP,CAAsBX,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASM,SAAT,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,aAApC,QAAyD,oBAAzD;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,CAAT,QAAkB,UAAlB;;AACA,IAAIC,iBAAiB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACrDpC,EAAAA,SAAS,CAACmC,iBAAD,EAAoBC,MAApB,CAAT;;AACA,WAASD,iBAAT,GAA6B;AACzB,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBlB,SAAnB,CAAnB,IAAoD,IAAhE;;AACAiB,IAAAA,KAAK,CAACE,0BAAN,GAAmC,CAAnC;AACA,WAAOF,KAAP;AACH;;AACDF,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4B4B,IAA5B,GAAmC,YAAY;AAC3C,SAAKC,WAAL,GAAmB,KAAKC,kBAAL,CAAwBC,iBAAxB,EAAnB;AACH,GAFD;;AAGAR,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4BgC,gBAA5B,GAA+C,UAAUC,SAAV,EAAqB;AAChE,SAAKA,SAAL,GAAiBA,SAAjB;AACH,GAFD;;AAGAV,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4BkC,sBAA5B,GAAqD,UAAUC,KAAV,EAAiB;AAClE,QAAI9B,GAAG,GAAG8B,KAAK,CAACC,KAAN,IAAeD,KAAK,CAACE,OAA/B;AACA,QAAIC,GAAG,GAAGH,KAAK,CAACI,MAAhB;AACA,QAAIC,IAAI,GAAGL,KAAK,CAACM,OAAjB;AACA,QAAIC,WAAW,GAAG,KAAKC,iBAAL,CAAuBC,uBAAvB,CAA+CT,KAA/C,CAAlB;;AACA,QAAI,CAACO,WAAL,EAAkB;AACd,aAAO,KAAP;AACH;;AACD,QAAIG,SAAS,GAAG,KAAhB;;AACA,YAAQxC,GAAR;AACI,WAAKe,SAAS,CAAC0B,aAAf;AACA,WAAK1B,SAAS,CAAC2B,YAAf;AACI;AACA,YAAI,CAACP,IAAD,IAAS,CAACF,GAAd,EAAmB;AACf,eAAKU,cAAL,CAAoB3C,GAApB;AACAwC,UAAAA,SAAS,GAAG,IAAZ;AACH;;AACD;;AACJ,WAAKzB,SAAS,CAAC6B,QAAf;AACA,WAAK7B,SAAS,CAAC8B,SAAf;AACI;AACA,YAAIV,IAAI,IAAI,CAACF,GAAb,EAAkB;AACd,eAAKa,iBAAL,CAAuB9C,GAAvB,EAA4BqC,WAA5B;AACAG,UAAAA,SAAS,GAAG,IAAZ;AACH;;AACD;;AACJ,WAAKzB,SAAS,CAACgC,MAAf;AACA,WAAKhC,SAAS,CAACiC,QAAf;AACI;AACA,YAAIb,IAAI,IAAI,CAACF,GAAb,EAAkB;AACd,eAAKgB,cAAL,CAAoBjD,GAApB,EAAyBqC,WAAzB;AACAG,UAAAA,SAAS,GAAG,IAAZ;AACH;;AACD;;AACJ,WAAKzB,SAAS,CAACmC,aAAf;AACI;AACA,YAAI,CAACf,IAAD,IAAS,CAACF,GAAd,EAAmB;AACf,eAAKkB,UAAL,CAAgBd,WAAhB;AACAG,UAAAA,SAAS,GAAG,IAAZ;AACH;;AACD;;AACJ,WAAKzB,SAAS,CAACqC,WAAf;AACI;AACA,YAAI,CAACjB,IAAD,IAAS,CAACF,GAAd,EAAmB;AACf,eAAKoB,QAAL,CAAchB,WAAd;AACAG,UAAAA,SAAS,GAAG,IAAZ;AACH;;AACD;AAtCR;;AAwCA,QAAIA,SAAJ,EAAe;AACXV,MAAAA,KAAK,CAACwB,cAAN;AACH;;AACD,WAAOd,SAAP;AACH,GArDD,CAbqD,CAmErD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtB,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4B4D,gCAA5B,GAA+D,YAAY;AACvE,QAAIC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAV;AACA,QAAIC,IAAI,GAAGH,GAAG,GAAG,KAAKlC,0BAAtB;AACA,WAAQqC,IAAI,GAAG,GAAf;AACH,GAJD;;AAKAzC,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4BiE,6BAA5B,GAA4D,YAAY;AACpE,SAAKtC,0BAAL,GAAkC,IAAImC,IAAJ,GAAWC,OAAX,EAAlC;AACH,GAFD;;AAGAxC,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4BwD,UAA5B,GAAyC,UAAUU,QAAV,EAAoB;AACzD,QAAI,KAAKN,gCAAL,EAAJ,EAA6C;AACzC;AACH;;AACD,QAAIO,cAAc,GAAG,KAAKlC,SAAL,CAAemC,kBAAf,EAArB;AACA,QAAIC,eAAe,GAAGF,cAAc,CAACG,MAAf,GAAwBH,cAAc,CAACI,GAA7D;;AACA,QAAI,KAAKtC,SAAL,CAAeuC,yBAAf,EAAJ,EAAgD;AAC5CH,MAAAA,eAAe,IAAI,KAAKxC,WAAxB;AACH;;AACD,QAAI4C,iBAAiB,GAAG,KAAKC,eAAL,CAAqBC,cAArB,EAAxB;AACA,QAAIC,sBAAsB,GAAGT,cAAc,CAACI,GAAf,GAAqBF,eAAlD;AACA,QAAIQ,oBAAoB,GAAG,KAAKH,eAAL,CAAqBI,kBAArB,CAAwCF,sBAAsB,GAAGH,iBAAjE,CAA3B;AACA,QAAIM,WAAW,GAAGF,oBAAlB;AACA,QAAIG,gBAAgB,GAAG,KAAKN,eAAL,CAAqBO,MAArB,CAA4Bf,QAAQ,CAACgB,QAArC,EAA+CC,MAAtE;AACA,QAAIC,aAAa,GAAGJ,gBAAgB,GAAGX,eAAnB,GAAqCI,iBAAzD;AACA,QAAIY,UAAU,GAAG,KAAKX,eAAL,CAAqBI,kBAArB,CAAwCM,aAAa,GAAGX,iBAAxD,CAAjB;AACA,QAAIa,WAAW,GAAG,KAAKZ,eAAL,CAAqBa,cAArB,EAAlB;;AACA,QAAIF,UAAU,GAAGC,WAAjB,EAA8B;AAC1BD,MAAAA,UAAU,GAAGC,WAAb;AACH;;AACD,QAAIP,WAAW,GAAGO,WAAlB,EAA+B;AAC3BP,MAAAA,WAAW,GAAGO,WAAd;AACH;;AACD,SAAKE,UAAL,CAAgBT,WAAhB,EAA6B,KAA7B,EAAoC,IAApC,EAA0CM,UAA1C,EAAsDnB,QAAQ,CAACuB,MAA/D;AACA,SAAKxB,6BAAL;AACH,GAzBD;;AA0BA1C,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4B0D,QAA5B,GAAuC,UAAUQ,QAAV,EAAoB;AACvD,QAAI,KAAKN,gCAAL,EAAJ,EAA6C;AACzC;AACH;;AACD,QAAIO,cAAc,GAAG,KAAKlC,SAAL,CAAemC,kBAAf,EAArB;AACA,QAAIC,eAAe,GAAGF,cAAc,CAACG,MAAf,GAAwBH,cAAc,CAACI,GAA7D;;AACA,QAAI,KAAKtC,SAAL,CAAeuC,yBAAf,EAAJ,EAAgD;AAC5CH,MAAAA,eAAe,IAAI,KAAKxC,WAAxB;AACH;;AACD,QAAI4C,iBAAiB,GAAG,KAAKC,eAAL,CAAqBC,cAArB,EAAxB;AACA,QAAIe,mBAAmB,GAAGvB,cAAc,CAACI,GAAzC;AACA,QAAIoB,iBAAiB,GAAG,KAAKjB,eAAL,CAAqBI,kBAArB,CAAwCY,mBAAmB,GAAGjB,iBAA9D,CAAxB;AACA,QAAIM,WAAW,GAAGY,iBAAlB;AACA,QAAIC,cAAc,GAAG,KAAKlB,eAAL,CAAqBO,MAArB,CAA4Bf,QAAQ,CAACgB,QAArC,CAArB;AACA,QAAIE,aAAa,GAAGQ,cAAc,CAACT,MAAf,GAAwBS,cAAc,CAACC,SAAvC,GAAmDxB,eAAnD,GAAqEI,iBAAzF;AACA,QAAIY,UAAU,GAAG,KAAKX,eAAL,CAAqBI,kBAArB,CAAwCM,aAAa,GAAGX,iBAAxD,CAAjB;AACA,QAAIqB,QAAQ,GAAG,KAAKpB,eAAL,CAAqBqB,eAArB,EAAf;;AACA,QAAIV,UAAU,GAAGS,QAAjB,EAA2B;AACvBT,MAAAA,UAAU,GAAGS,QAAb;AACH;;AACD,QAAIf,WAAW,GAAGe,QAAlB,EAA4B;AACxBf,MAAAA,WAAW,GAAGe,QAAd;AACH;;AACD,SAAKN,UAAL,CAAgBT,WAAhB,EAA6B,QAA7B,EAAuC,IAAvC,EAA6CM,UAA7C,EAAyDnB,QAAQ,CAACuB,MAAlE;AACA,SAAKxB,6BAAL;AACH,GAzBD,CA5GqD,CAsIrD;AACA;AACA;AACA;AACA;;;AACA1C,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4BwF,UAA5B,GAAyC,UAAUT,WAAV,EAAuBiB,UAAvB,EAAmCC,YAAnC,EAAiDZ,UAAjD,EAA6Da,WAA7D,EAA0E;AAC/G,QAAI5E,CAAC,CAAC6E,MAAF,CAASF,YAAT,CAAJ,EAA4B;AACxB,WAAKhE,SAAL,CAAemE,mBAAf,CAAmCH,YAAnC;AACH;;AACD,QAAI3E,CAAC,CAAC6E,MAAF,CAASpB,WAAT,CAAJ,EAA2B;AACvB,WAAK9C,SAAL,CAAeoE,kBAAf,CAAkCtB,WAAlC,EAA+CiB,UAA/C;AACH,KAN8G,CAO/G;;;AACA,SAAKM,qBAAL,CAA2BC,cAA3B,GAR+G,CAS/G;AACA;;AACA,SAAKC,eAAL,CAAqBC,cAArB,CAAoCpB,UAApC,EAAgDa,WAAhD,EAA6D,IAA7D,EAAmE,IAAnE;;AACA,QAAI,KAAKQ,eAAT,EAA0B;AACtB,UAAIC,YAAY,GAAG;AAAEzB,QAAAA,QAAQ,EAAEG,UAAZ;AAAwBuB,QAAAA,SAAS,EAAE,IAAnC;AAAyCnB,QAAAA,MAAM,EAAES;AAAjD,OAAnB;AACA,WAAKQ,eAAL,CAAqBG,cAArB,CAAoCF,YAApC;AACH;AACJ,GAhBD,CA3IqD,CA4JrD;;;AACApF,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4BsD,cAA5B,GAA6C,UAAUjD,GAAV,EAAe6D,QAAf,EAAyB;AAClE,QAAI4C,KAAK,GAAGzG,GAAG,KAAKe,SAAS,CAACgC,MAA9B;AACA,QAAI2D,kBAAkB,GAAGD,KAAK,GAAG,CAAH,GAAO,KAAKpC,eAAL,CAAqBa,cAArB,EAArC;AACA,SAAKC,UAAL,CAAgBuB,kBAAhB,EAAoC,IAApC,EAA0C7C,QAAQ,CAACuB,MAAnD,EAA2DsB,kBAA3D,EAA+E7C,QAAQ,CAACuB,MAAxF;AACH,GAJD,CA7JqD,CAkKrD;;;AACAlE,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4BmD,iBAA5B,GAAgD,UAAU9C,GAAV,EAAe6D,QAAf,EAAyB;AACrE,QAAI8C,OAAO,GAAG3G,GAAG,KAAKe,SAAS,CAAC6B,QAAhC;AACA,QAAIgE,UAAU,GAAG,KAAKC,gBAAL,CAAsBC,sBAAtB,EAAjB;AACA,QAAIC,cAAc,GAAGJ,OAAO,GAAGC,UAAU,CAAC,CAAD,CAAb,GAAmB3F,CAAC,CAAC+F,IAAF,CAAOJ,UAAP,CAA/C;AACA,SAAKzB,UAAL,CAAgBtB,QAAQ,CAACgB,QAAzB,EAAmC,IAAnC,EAAyCkC,cAAzC,EAAyDlD,QAAQ,CAACgB,QAAlE,EAA4EkC,cAA5E;AACH,GALD,CAnKqD,CAyKrD;AACA;;;AACA7F,EAAAA,iBAAiB,CAACvB,SAAlB,CAA4BgD,cAA5B,GAA6C,UAAU3C,GAAV,EAAe;AACxD,QAAIiH,OAAO,GAAGjH,GAAG,KAAKe,SAAS,CAAC0B,aAAhC;AACA,QAAImE,UAAU,GAAG,KAAKC,gBAAL,CAAsBC,sBAAtB,EAAjB;AACA,QAAIC,cAAc,GAAGE,OAAO,GAAGL,UAAU,CAAC,CAAD,CAAb,GAAmB3F,CAAC,CAAC+F,IAAF,CAAOJ,UAAP,CAA/C;AACA,QAAIF,kBAAkB,GAAGO,OAAO,GAAG,CAAH,GAAO,KAAK5C,eAAL,CAAqBa,cAArB,EAAvC;AACA,SAAKC,UAAL,CAAgBuB,kBAAhB,EAAoC,IAApC,EAA0CK,cAA1C,EAA0DL,kBAA1D,EAA8EK,cAA9E;AACH,GAND;;AAOAlH,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,mBAAD,CADF,CAAD,EAEPO,iBAAiB,CAACvB,SAFX,EAEsB,mBAFtB,EAE2C,KAAK,CAFhD,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,iBAAD,CADF,CAAD,EAEPO,iBAAiB,CAACvB,SAFX,EAEsB,iBAFtB,EAEyC,KAAK,CAF9C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,iBAAD,CADF,CAAD,EAEPO,iBAAiB,CAACvB,SAFX,EAEsB,iBAFtB,EAEyC,KAAK,CAF9C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,uBAAD,CADF,CAAD,EAEPO,iBAAiB,CAACvB,SAFX,EAEsB,uBAFtB,EAE+C,KAAK,CAFpD,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPgB,QAAQ,CAAC,iBAAD,CADD,CAAD,EAEPK,iBAAiB,CAACvB,SAFX,EAEsB,iBAFtB,EAEyC,KAAK,CAF9C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,kBAAD,CADF,CAAD,EAEPO,iBAAiB,CAACvB,SAFX,EAEsB,kBAFtB,EAE0C,KAAK,CAF/C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPc,SAAS,CAAC,oBAAD,CADF,CAAD,EAEPO,iBAAiB,CAACvB,SAFX,EAEsB,oBAFtB,EAE4C,KAAK,CAFjD,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiB,aADO,CAAD,EAEPI,iBAAiB,CAACvB,SAFX,EAEsB,MAFtB,EAE8B,IAF9B,CAAV;;AAGAuB,EAAAA,iBAAiB,GAAGrB,UAAU,CAAC,CAC3Be,IAAI,CAAC,mBAAD,CADuB,CAAD,EAE3BM,iBAF2B,CAA9B;AAGA,SAAOA,iBAAP;AACH,CA9MsC,CA8MrCF,QA9MqC,CAAvC;;AA+MA,SAASE,iBAAT","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, Optional, PostConstruct } from \"../context/context\";\nimport { Constants } from \"../constants\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { _ } from \"../utils\";\nvar NavigationService = /** @class */ (function (_super) {\n    __extends(NavigationService, _super);\n    function NavigationService() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.timeLastPageEventProcessed = 0;\n        return _this;\n    }\n    NavigationService.prototype.init = function () {\n        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();\n    };\n    NavigationService.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    NavigationService.prototype.handlePageScrollingKey = function (event) {\n        var key = event.which || event.keyCode;\n        var alt = event.altKey;\n        var ctrl = event.ctrlKey;\n        var currentCell = this.mouseEventService.getCellPositionForEvent(event);\n        if (!currentCell) {\n            return false;\n        }\n        var processed = false;\n        switch (key) {\n            case Constants.KEY_PAGE_HOME:\n            case Constants.KEY_PAGE_END:\n                // handle home and end when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onHomeOrEndKey(key);\n                    processed = true;\n                }\n                break;\n            case Constants.KEY_LEFT:\n            case Constants.KEY_RIGHT:\n                // handle left and right when ctrl is pressed only\n                if (ctrl && !alt) {\n                    this.onCtrlLeftOrRight(key, currentCell);\n                    processed = true;\n                }\n                break;\n            case Constants.KEY_UP:\n            case Constants.KEY_DOWN:\n                // handle up and down when ctrl is pressed only\n                if (ctrl && !alt) {\n                    this.onCtrlUpOrDown(key, currentCell);\n                    processed = true;\n                }\n                break;\n            case Constants.KEY_PAGE_DOWN:\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onPageDown(currentCell);\n                    processed = true;\n                }\n                break;\n            case Constants.KEY_PAGE_UP:\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onPageUp(currentCell);\n                    processed = true;\n                }\n                break;\n        }\n        if (processed) {\n            event.preventDefault();\n        }\n        return processed;\n    };\n    // the page up/down keys caused a problem, in that if the user\n    // held the page up/down key down, lots of events got generated,\n    // which clogged up the event queue (as they take time to process)\n    // which in turn froze the grid. Logic below makes sure we wait 100ms\n    // between processing the page up/down events, so when user has finger\n    // held down on key, we ignore page up/down events until 100ms has passed,\n    // which effectively empties the queue of page up/down events.\n    NavigationService.prototype.isTimeSinceLastPageEventToRecent = function () {\n        var now = new Date().getTime();\n        var diff = now - this.timeLastPageEventProcessed;\n        return (diff < 100);\n    };\n    NavigationService.prototype.setTimeLastPageEventProcessed = function () {\n        this.timeLastPageEventProcessed = new Date().getTime();\n    };\n    NavigationService.prototype.onPageDown = function (gridCell) {\n        if (this.isTimeSinceLastPageEventToRecent()) {\n            return;\n        }\n        var scrollPosition = this.gridPanel.getVScrollPosition();\n        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n        if (this.gridPanel.isHorizontalScrollShowing()) {\n            pixelsInOnePage -= this.scrollWidth;\n        }\n        var pagingPixelOffset = this.paginationProxy.getPixelOffset();\n        var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;\n        var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);\n        var scrollIndex = currentPageBottomRow;\n        var currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;\n        var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;\n        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n        var pageLastRow = this.paginationProxy.getPageLastRow();\n        if (focusIndex > pageLastRow) {\n            focusIndex = pageLastRow;\n        }\n        if (scrollIndex > pageLastRow) {\n            scrollIndex = pageLastRow;\n        }\n        this.navigateTo(scrollIndex, 'top', null, focusIndex, gridCell.column);\n        this.setTimeLastPageEventProcessed();\n    };\n    NavigationService.prototype.onPageUp = function (gridCell) {\n        if (this.isTimeSinceLastPageEventToRecent()) {\n            return;\n        }\n        var scrollPosition = this.gridPanel.getVScrollPosition();\n        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n        if (this.gridPanel.isHorizontalScrollShowing()) {\n            pixelsInOnePage -= this.scrollWidth;\n        }\n        var pagingPixelOffset = this.paginationProxy.getPixelOffset();\n        var currentPageTopPixel = scrollPosition.top;\n        var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);\n        var scrollIndex = currentPageTopRow;\n        var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);\n        var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;\n        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n        var firstRow = this.paginationProxy.getPageFirstRow();\n        if (focusIndex < firstRow) {\n            focusIndex = firstRow;\n        }\n        if (scrollIndex < firstRow) {\n            scrollIndex = firstRow;\n        }\n        this.navigateTo(scrollIndex, 'bottom', null, focusIndex, gridCell.column);\n        this.setTimeLastPageEventProcessed();\n    };\n    // common logic to navigate. takes parameters:\n    // scrollIndex - what row to vertically scroll to\n    // scrollType - what position to put scroll index ie top/bottom\n    // scrollColumn - what column to horizontally scroll to\n    // focusIndex / focusColumn - for page up / down, we want to scroll to one row/column, but focus another\n    NavigationService.prototype.navigateTo = function (scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn) {\n        if (_.exists(scrollColumn)) {\n            this.gridPanel.ensureColumnVisible(scrollColumn);\n        }\n        if (_.exists(scrollIndex)) {\n            this.gridPanel.ensureIndexVisible(scrollIndex, scrollType);\n        }\n        // make sure the cell is rendered, needed if we are to focus\n        this.animationFrameService.flushAllFrames();\n        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell\n        // highlighted.\n        this.focusController.setFocusedCell(focusIndex, focusColumn, null, true);\n        if (this.rangeController) {\n            var cellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };\n            this.rangeController.setRangeToCell(cellPosition);\n        }\n    };\n    // ctrl + up/down will bring focus to same column, first/last row. no horizontal scrolling.\n    NavigationService.prototype.onCtrlUpOrDown = function (key, gridCell) {\n        var upKey = key === Constants.KEY_UP;\n        var rowIndexToScrollTo = upKey ? 0 : this.paginationProxy.getPageLastRow();\n        this.navigateTo(rowIndexToScrollTo, null, gridCell.column, rowIndexToScrollTo, gridCell.column);\n    };\n    // ctrl + left/right will bring focus to same row, first/last cell. no vertical scrolling.\n    NavigationService.prototype.onCtrlLeftOrRight = function (key, gridCell) {\n        var leftKey = key === Constants.KEY_LEFT;\n        var allColumns = this.columnController.getAllDisplayedColumns();\n        var columnToSelect = leftKey ? allColumns[0] : _.last(allColumns);\n        this.navigateTo(gridCell.rowIndex, null, columnToSelect, gridCell.rowIndex, columnToSelect);\n    };\n    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring\n    // same cell into view (which means either scroll all the way up, or all the way down).\n    NavigationService.prototype.onHomeOrEndKey = function (key) {\n        var homeKey = key === Constants.KEY_PAGE_HOME;\n        var allColumns = this.columnController.getAllDisplayedColumns();\n        var columnToSelect = homeKey ? allColumns[0] : _.last(allColumns);\n        var rowIndexToScrollTo = homeKey ? 0 : this.paginationProxy.getPageLastRow();\n        this.navigateTo(rowIndexToScrollTo, null, columnToSelect, rowIndexToScrollTo, columnToSelect);\n    };\n    __decorate([\n        Autowired('mouseEventService')\n    ], NavigationService.prototype, \"mouseEventService\", void 0);\n    __decorate([\n        Autowired('paginationProxy')\n    ], NavigationService.prototype, \"paginationProxy\", void 0);\n    __decorate([\n        Autowired('focusController')\n    ], NavigationService.prototype, \"focusController\", void 0);\n    __decorate([\n        Autowired('animationFrameService')\n    ], NavigationService.prototype, \"animationFrameService\", void 0);\n    __decorate([\n        Optional('rangeController')\n    ], NavigationService.prototype, \"rangeController\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], NavigationService.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], NavigationService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], NavigationService.prototype, \"init\", null);\n    NavigationService = __decorate([\n        Bean('navigationService')\n    ], NavigationService);\n    return NavigationService;\n}(BeanStub));\nexport { NavigationService };\n"]},"metadata":{},"sourceType":"module"}