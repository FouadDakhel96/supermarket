{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { _ } from '@ag-grid-community/core';\nimport { ExcelXmlSerializingSession } from './excelXmlSerializingSession';\nimport { RowType } from \"@ag-grid-community/csv-export\";\n\nvar ExcelXlsxSerializingSession =\n/** @class */\nfunction (_super) {\n  __extends(ExcelXlsxSerializingSession, _super);\n\n  function ExcelXlsxSerializingSession() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stringList = [];\n    _this.stringMap = {};\n    return _this;\n  }\n\n  ExcelXlsxSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n    var _this = this;\n\n    var currentCells = [];\n    this.rows.push({\n      cells: currentCells,\n      height: this.config.headerRowHeight\n    });\n    return {\n      onColumn: function onColumn(header, index, span) {\n        var styleIds = _this.config.styleLinker(RowType.HEADER_GROUPING, 1, index, \"grouping-\" + header, undefined, undefined);\n\n        currentCells.push(_this.createMergedCell(styleIds && styleIds.length > 0 ? styleIds[0] : undefined, 's', header, span));\n      }\n    };\n  };\n\n  ExcelXlsxSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    return function (column, index, node) {\n      var nameForCol = _this.extractHeaderValue(column);\n\n      var styleIds = _this.config.styleLinker(RowType.HEADER, rowIndex, index, nameForCol, column, undefined);\n\n      currentCells.push(_this.createCell(styleIds && styleIds.length > 0 ? styleIds[0] : undefined, 's', nameForCol));\n    };\n  };\n\n  ExcelXlsxSerializingSession.prototype.createExcel = function (data) {\n    return this.config.excelFactory.createExcel(this.excelStyles, data, this.stringList);\n  };\n\n  ExcelXlsxSerializingSession.prototype.getDataTypeForValue = function (valueForCell) {\n    return _.isNumeric(valueForCell) ? 'n' : 's';\n  };\n\n  ExcelXlsxSerializingSession.prototype.getStringPosition = function (val) {\n    var pos = this.stringMap[val];\n\n    if (pos === undefined) {\n      pos = this.stringMap[val] = this.stringList.length;\n      this.stringList.push(val);\n    }\n\n    return pos;\n  };\n\n  ExcelXlsxSerializingSession.prototype.createCell = function (styleId, type, value) {\n    var actualStyle = styleId && this.stylesByIds[styleId];\n    var styleExists = actualStyle !== undefined;\n\n    function getType() {\n      if (styleExists && actualStyle.dataType) {\n        switch (actualStyle.dataType) {\n          case 'string':\n            return 's';\n\n          case 'number':\n            return 'n';\n\n          case 'dateTime':\n            return 'd';\n\n          case 'error':\n            return 'e';\n\n          case 'boolean':\n            return 'b';\n\n          default:\n            console.warn(\"ag-grid: Unrecognized data type for excel export [\" + actualStyle.id + \".dataType=\" + actualStyle.dataType + \"]\");\n        }\n      }\n\n      return type;\n    }\n\n    var typeTransformed = getType();\n    return {\n      styleId: styleExists ? styleId : undefined,\n      data: {\n        type: typeTransformed,\n        value: typeTransformed === 's' ? this.getStringPosition(value == null ? '' : value).toString() : typeTransformed === 'n' ? Number(value).toString() : value\n      }\n    };\n  };\n\n  ExcelXlsxSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n    return {\n      styleId: this.styleExists(styleId) ? styleId : undefined,\n      data: {\n        type: type,\n        value: type === 's' ? this.getStringPosition(value == null ? '' : value).toString() : value\n      },\n      mergeAcross: numOfCells\n    };\n  };\n\n  return ExcelXlsxSerializingSession;\n}(ExcelXmlSerializingSession);\n\nexport { ExcelXlsxSerializingSession };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-enterprise/excel-export/dist/es6/excelExport/excelXlsxSerializingSession.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","_","ExcelXmlSerializingSession","RowType","ExcelXlsxSerializingSession","_super","_this","apply","arguments","stringList","stringMap","onNewHeaderGroupingRow","currentCells","rows","push","cells","height","config","headerRowHeight","onColumn","header","index","span","styleIds","styleLinker","HEADER_GROUPING","undefined","createMergedCell","length","onNewHeaderColumn","rowIndex","column","node","nameForCol","extractHeaderValue","HEADER","createCell","createExcel","data","excelFactory","excelStyles","getDataTypeForValue","valueForCell","isNumeric","getStringPosition","val","pos","styleId","type","value","actualStyle","stylesByIds","styleExists","getType","dataType","console","warn","id","typeTransformed","toString","Number","numOfCells","mergeAcross"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { _ } from '@ag-grid-community/core';\nimport { ExcelXmlSerializingSession } from './excelXmlSerializingSession';\nimport { RowType } from \"@ag-grid-community/csv-export\";\nvar ExcelXlsxSerializingSession = /** @class */ (function (_super) {\n    __extends(ExcelXlsxSerializingSession, _super);\n    function ExcelXlsxSerializingSession() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.stringList = [];\n        _this.stringMap = {};\n        return _this;\n    }\n    ExcelXlsxSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        var _this = this;\n        var currentCells = [];\n        this.rows.push({\n            cells: currentCells,\n            height: this.config.headerRowHeight\n        });\n        return {\n            onColumn: function (header, index, span) {\n                var styleIds = _this.config.styleLinker(RowType.HEADER_GROUPING, 1, index, \"grouping-\" + header, undefined, undefined);\n                currentCells.push(_this.createMergedCell((styleIds && styleIds.length > 0) ? styleIds[0] : undefined, 's', header, span));\n            }\n        };\n    };\n    ExcelXlsxSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n        var _this = this;\n        return function (column, index, node) {\n            var nameForCol = _this.extractHeaderValue(column);\n            var styleIds = _this.config.styleLinker(RowType.HEADER, rowIndex, index, nameForCol, column, undefined);\n            currentCells.push(_this.createCell((styleIds && styleIds.length > 0) ? styleIds[0] : undefined, 's', nameForCol));\n        };\n    };\n    ExcelXlsxSerializingSession.prototype.createExcel = function (data) {\n        return this.config.excelFactory.createExcel(this.excelStyles, data, this.stringList);\n    };\n    ExcelXlsxSerializingSession.prototype.getDataTypeForValue = function (valueForCell) {\n        return _.isNumeric(valueForCell) ? 'n' : 's';\n    };\n    ExcelXlsxSerializingSession.prototype.getStringPosition = function (val) {\n        var pos = this.stringMap[val];\n        if (pos === undefined) {\n            pos = this.stringMap[val] = this.stringList.length;\n            this.stringList.push(val);\n        }\n        return pos;\n    };\n    ExcelXlsxSerializingSession.prototype.createCell = function (styleId, type, value) {\n        var actualStyle = styleId && this.stylesByIds[styleId];\n        var styleExists = actualStyle !== undefined;\n        function getType() {\n            if (styleExists &&\n                actualStyle.dataType) {\n                switch (actualStyle.dataType) {\n                    case 'string':\n                        return 's';\n                    case 'number':\n                        return 'n';\n                    case 'dateTime':\n                        return 'd';\n                    case 'error':\n                        return 'e';\n                    case 'boolean':\n                        return 'b';\n                    default:\n                        console.warn(\"ag-grid: Unrecognized data type for excel export [\" + actualStyle.id + \".dataType=\" + actualStyle.dataType + \"]\");\n                }\n            }\n            return type;\n        }\n        var typeTransformed = getType();\n        return {\n            styleId: styleExists ? styleId : undefined,\n            data: {\n                type: typeTransformed,\n                value: typeTransformed === 's'\n                    ? this.getStringPosition(value == null ? '' : value).toString()\n                    : typeTransformed === 'n'\n                        ? Number(value).toString()\n                        : value\n            }\n        };\n    };\n    ExcelXlsxSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n        return {\n            styleId: this.styleExists(styleId) ? styleId : undefined,\n            data: {\n                type: type,\n                value: type === 's' ? this.getStringPosition(value == null ? '' : value).toString() : value\n            },\n            mergeAcross: numOfCells\n        };\n    };\n    return ExcelXlsxSerializingSession;\n}(ExcelXmlSerializingSession));\nexport { ExcelXlsxSerializingSession };\n"]},"metadata":{},"sourceType":"module"}