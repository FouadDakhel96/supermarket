{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { DragSourceType } from \"../dragAndDrop/dragAndDropService\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { MoveColumnController } from \"./moveColumnController\";\nimport { BodyDropPivotTarget } from \"./bodyDropPivotTarget\";\nimport { Constants } from \"../constants\";\nimport { BeanStub } from \"../context/beanStub\";\nvar DropType;\n\n(function (DropType) {\n  DropType[DropType[\"ColumnMove\"] = 0] = \"ColumnMove\";\n  DropType[DropType[\"Pivot\"] = 1] = \"Pivot\";\n})(DropType || (DropType = {}));\n\nvar BodyDropTarget =\n/** @class */\nfunction (_super) {\n  __extends(BodyDropTarget, _super);\n\n  function BodyDropTarget(pinned, eContainer) {\n    var _this = _super.call(this) || this;\n\n    _this.dropListeners = {};\n    _this.pinned = pinned;\n    _this.eContainer = eContainer;\n    return _this;\n  }\n\n  BodyDropTarget.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n    this.moveColumnController.registerGridComp(gridPanel);\n\n    switch (this.pinned) {\n      case Constants.PINNED_LEFT:\n        this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();\n        break;\n\n      case Constants.PINNED_RIGHT:\n        this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers();\n        break;\n\n      default:\n        this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();\n        break;\n    }\n  };\n\n  BodyDropTarget.prototype.isInterestedIn = function (type) {\n    return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel();\n  };\n\n  BodyDropTarget.prototype.getSecondaryContainers = function () {\n    return this.eSecondaryContainers;\n  };\n\n  BodyDropTarget.prototype.getContainer = function () {\n    return this.eContainer;\n  };\n\n  BodyDropTarget.prototype.init = function () {\n    this.moveColumnController = this.createBean(new MoveColumnController(this.pinned, this.eContainer));\n    var bodyDropPivotTarget = new BodyDropPivotTarget(this.pinned);\n    this.createBean(bodyDropPivotTarget);\n    this.dropListeners[DropType.ColumnMove] = this.moveColumnController;\n    this.dropListeners[DropType.Pivot] = bodyDropPivotTarget;\n    this.dragAndDropService.addDropTarget(this);\n  };\n\n  BodyDropTarget.prototype.getIconName = function () {\n    return this.currentDropListener.getIconName();\n  }; // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n  // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n  // dropped into the grid's body.\n\n\n  BodyDropTarget.prototype.getDropType = function (draggingEvent) {\n    if (this.columnController.isPivotMode()) {\n      // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n      // a standard column move, however if it came from the toolpanel, then we are introducing\n      // dimensions or values to the grid\n      if (draggingEvent.dragSource.type === DragSourceType.ToolPanel) {\n        return DropType.Pivot;\n      }\n\n      return DropType.ColumnMove;\n    } // it's a column, and not pivot mode, so always moving\n\n\n    return DropType.ColumnMove;\n  };\n\n  BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {\n    // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n    // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n    // we change visibility state and position.\n    // if (this.columnController.isPivotMode()) {\n    var dropType = this.getDropType(draggingEvent);\n    this.currentDropListener = this.dropListeners[dropType];\n    this.currentDropListener.onDragEnter(draggingEvent);\n  };\n\n  BodyDropTarget.prototype.onDragLeave = function (params) {\n    this.currentDropListener.onDragLeave(params);\n  };\n\n  BodyDropTarget.prototype.onDragging = function (params) {\n    this.currentDropListener.onDragging(params);\n  };\n\n  BodyDropTarget.prototype.onDragStop = function (params) {\n    this.currentDropListener.onDragStop(params);\n  };\n\n  __decorate([Autowired('dragAndDropService')], BodyDropTarget.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Autowired('columnController')], BodyDropTarget.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], BodyDropTarget.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([PostConstruct], BodyDropTarget.prototype, \"init\", null);\n\n  return BodyDropTarget;\n}(BeanStub);\n\nexport { BodyDropTarget };","map":{"version":3,"sources":["/Users/fouaddakhel/Projects/Nana/ReactJS/supermarket_dashboard/supermarket_dashboard/node_modules/@ag-grid-community/core/dist/es6/headerRendering/bodyDropTarget.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","DragSourceType","Autowired","PostConstruct","MoveColumnController","BodyDropPivotTarget","Constants","BeanStub","DropType","BodyDropTarget","_super","pinned","eContainer","_this","call","dropListeners","registerGridComp","gridPanel","moveColumnController","PINNED_LEFT","eSecondaryContainers","getDropTargetLeftContainers","PINNED_RIGHT","getDropTargetRightContainers","getDropTargetBodyContainers","isInterestedIn","type","HeaderCell","ToolPanel","gridOptionsWrapper","isAllowDragFromColumnsToolPanel","getSecondaryContainers","getContainer","init","createBean","bodyDropPivotTarget","ColumnMove","Pivot","dragAndDropService","addDropTarget","getIconName","currentDropListener","getDropType","draggingEvent","columnController","isPivotMode","dragSource","onDragEnter","dropType","onDragLeave","params","onDragging","onDragStop"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v23.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { DragSourceType } from \"../dragAndDrop/dragAndDropService\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { MoveColumnController } from \"./moveColumnController\";\nimport { BodyDropPivotTarget } from \"./bodyDropPivotTarget\";\nimport { Constants } from \"../constants\";\nimport { BeanStub } from \"../context/beanStub\";\nvar DropType;\n(function (DropType) {\n    DropType[DropType[\"ColumnMove\"] = 0] = \"ColumnMove\";\n    DropType[DropType[\"Pivot\"] = 1] = \"Pivot\";\n})(DropType || (DropType = {}));\nvar BodyDropTarget = /** @class */ (function (_super) {\n    __extends(BodyDropTarget, _super);\n    function BodyDropTarget(pinned, eContainer) {\n        var _this = _super.call(this) || this;\n        _this.dropListeners = {};\n        _this.pinned = pinned;\n        _this.eContainer = eContainer;\n        return _this;\n    }\n    BodyDropTarget.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n        this.moveColumnController.registerGridComp(gridPanel);\n        switch (this.pinned) {\n            case Constants.PINNED_LEFT:\n                this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();\n                break;\n            case Constants.PINNED_RIGHT:\n                this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers();\n                break;\n            default:\n                this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();\n                break;\n        }\n    };\n    BodyDropTarget.prototype.isInterestedIn = function (type) {\n        return type === DragSourceType.HeaderCell ||\n            (type === DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel());\n    };\n    BodyDropTarget.prototype.getSecondaryContainers = function () {\n        return this.eSecondaryContainers;\n    };\n    BodyDropTarget.prototype.getContainer = function () {\n        return this.eContainer;\n    };\n    BodyDropTarget.prototype.init = function () {\n        this.moveColumnController = this.createBean(new MoveColumnController(this.pinned, this.eContainer));\n        var bodyDropPivotTarget = new BodyDropPivotTarget(this.pinned);\n        this.createBean(bodyDropPivotTarget);\n        this.dropListeners[DropType.ColumnMove] = this.moveColumnController;\n        this.dropListeners[DropType.Pivot] = bodyDropPivotTarget;\n        this.dragAndDropService.addDropTarget(this);\n    };\n    BodyDropTarget.prototype.getIconName = function () {\n        return this.currentDropListener.getIconName();\n    };\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n    // dropped into the grid's body.\n    BodyDropTarget.prototype.getDropType = function (draggingEvent) {\n        if (this.columnController.isPivotMode()) {\n            // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n            // a standard column move, however if it came from the toolpanel, then we are introducing\n            // dimensions or values to the grid\n            if (draggingEvent.dragSource.type === DragSourceType.ToolPanel) {\n                return DropType.Pivot;\n            }\n            return DropType.ColumnMove;\n        }\n        // it's a column, and not pivot mode, so always moving\n        return DropType.ColumnMove;\n    };\n    BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n        // we change visibility state and position.\n        // if (this.columnController.isPivotMode()) {\n        var dropType = this.getDropType(draggingEvent);\n        this.currentDropListener = this.dropListeners[dropType];\n        this.currentDropListener.onDragEnter(draggingEvent);\n    };\n    BodyDropTarget.prototype.onDragLeave = function (params) {\n        this.currentDropListener.onDragLeave(params);\n    };\n    BodyDropTarget.prototype.onDragging = function (params) {\n        this.currentDropListener.onDragging(params);\n    };\n    BodyDropTarget.prototype.onDragStop = function (params) {\n        this.currentDropListener.onDragStop(params);\n    };\n    __decorate([\n        Autowired('dragAndDropService')\n    ], BodyDropTarget.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], BodyDropTarget.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], BodyDropTarget.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], BodyDropTarget.prototype, \"init\", null);\n    return BodyDropTarget;\n}(BeanStub));\nexport { BodyDropTarget };\n"]},"metadata":{},"sourceType":"module"}